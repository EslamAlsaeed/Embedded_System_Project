
IMT_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005bc0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00800060  00005bc0  00005c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00005f64  00000000  00000000  00005d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001a3f  00000000  00000000  0000bd00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  0000d73f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  0000d8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  0000da92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  0000faa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00010c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00011c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  00011db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  00012075  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00012923  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bc 2a 	jmp	0x5578	; 0x5578 <__vector_1>
       8:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <__vector_2>
       c:	0c 94 77 2b 	jmp	0x56ee	; 0x56ee <__vector_3>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <main>
      7a:	0c 94 de 2d 	jmp	0x5bbc	; 0x5bbc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a7 2d 	jmp	0x5b4e	; 0x5b4e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e8       	ldi	r26, 0x87	; 135
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c3 2d 	jmp	0x5b86	; 0x5b86 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b3 2d 	jmp	0x5b66	; 0x5b66 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cf 2d 	jmp	0x5b9e	; 0x5b9e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b3 2d 	jmp	0x5b66	; 0x5b66 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cf 2d 	jmp	0x5b9e	; 0x5b9e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a7 2d 	jmp	0x5b4e	; 0x5b4e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e8       	ldi	r24, 0x87	; 135
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c3 2d 	jmp	0x5b86	; 0x5b86 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b3 2d 	jmp	0x5b66	; 0x5b66 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 cf 2d 	jmp	0x5b9e	; 0x5b9e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b3 2d 	jmp	0x5b66	; 0x5b66 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 cf 2d 	jmp	0x5b9e	; 0x5b9e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b3 2d 	jmp	0x5b66	; 0x5b66 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 cf 2d 	jmp	0x5b9e	; 0x5b9e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b7 2d 	jmp	0x5b6e	; 0x5b6e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d3 2d 	jmp	0x5ba6	; 0x5ba6 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e1 57       	subi	r30, 0x71	; 113
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <GIE_State>:
#include "../../Service/STD_LIB.h"
#include "../../Service/Bit_Math.h"
/*Function to Set Global Interrupt
 * Receive State like (ENABLE or DISABLE)
 */
void GIE_State(u8 State) {
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	89 83       	std	Y+1, r24	; 0x01

	if (State == ENABLE) {
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <GIE_State+0x20>

		Set_Bit(SREG_REG, SREG_I);
     cd8:	af e5       	ldi	r26, 0x5F	; 95
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	ef e5       	ldi	r30, 0x5F	; 95
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	80 68       	ori	r24, 0x80	; 128
     ce4:	8c 93       	st	X, r24
	}

	if (State == DISABLE) {
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	88 23       	and	r24, r24
     cea:	39 f4       	brne	.+14     	; 0xcfa <GIE_State+0x34>

		Clr_Bit(SREG_REG, SREG_I);
     cec:	af e5       	ldi	r26, 0x5F	; 95
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ef e5       	ldi	r30, 0x5F	; 95
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 77       	andi	r24, 0x7F	; 127
     cf8:	8c 93       	st	X, r24
}

}
     cfa:	0f 90       	pop	r0
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <EXT_ISR0Intial>:
/*Function to Set Interrupt 0 for run Mode of Sleep Mode
 * Receive ISR0_State which Be like (ENABLE or DISABLE)
 * Receive ISR0_Mode which like (LOW_LEVEL ,NO_CHANGE , FALLING_EDGE, RASING_EDGE,DEFUALT )
 *Defualt mean that Mode is Rising Edge
 */
void EXT_ISR0Intial(u8 ISR0_State, u8 ISR0_Mode) {
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	00 d0       	rcall	.+0      	; 0xd08 <EXT_ISR0Intial+0x6>
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	6a 83       	std	Y+2, r22	; 0x02


#if ISR0_State == DISABLE
	Clr_Bit(GICR_REG, GICR_INT0);
     d10:	ab e5       	ldi	r26, 0x5B	; 91
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	eb e5       	ldi	r30, 0x5B	; 91
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8f 7b       	andi	r24, 0xBF	; 191
     d1c:	8c 93       	st	X, r24
#elif ISR0_State == ENABLE
	Set_Bit(GICR_REG, GICR_INT0);
#endif
	//INT0 on low level
	if (ISR0_Mode == LOW_LEVEL) {
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	88 23       	and	r24, r24
     d22:	79 f4       	brne	.+30     	; 0xd42 <EXT_ISR0Intial+0x40>
	Clr_Bit(MCUCR_REG, MCUCR_ISC00);
     d24:	a5 e5       	ldi	r26, 0x55	; 85
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e5 e5       	ldi	r30, 0x55	; 85
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8e 7f       	andi	r24, 0xFE	; 254
     d30:	8c 93       	st	X, r24
	Clr_Bit(MCUCR_REG, MCUCR_ISC01);
     d32:	a5 e5       	ldi	r26, 0x55	; 85
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e5 e5       	ldi	r30, 0x55	; 85
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8d 7f       	andi	r24, 0xFD	; 253
     d3e:	8c 93       	st	X, r24
     d40:	47 c0       	rjmp	.+142    	; 0xdd0 <EXT_ISR0Intial+0xce>
	}
	//INT0 Any change
	else if (ISR0_Mode == NO_CHANGE) {
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	79 f4       	brne	.+30     	; 0xd66 <EXT_ISR0Intial+0x64>
	Set_Bit(MCUCR_REG, MCUCR_ISC00);
     d48:	a5 e5       	ldi	r26, 0x55	; 85
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e5 e5       	ldi	r30, 0x55	; 85
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	8c 93       	st	X, r24
	Clr_Bit(MCUCR_REG, MCUCR_ISC01);
     d56:	a5 e5       	ldi	r26, 0x55	; 85
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e5 e5       	ldi	r30, 0x55	; 85
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	8d 7f       	andi	r24, 0xFD	; 253
     d62:	8c 93       	st	X, r24
     d64:	35 c0       	rjmp	.+106    	; 0xdd0 <EXT_ISR0Intial+0xce>
	}
//INT0 on falling edge
	else if (ISR0_Mode == FALLING_EDGE) {
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	79 f4       	brne	.+30     	; 0xd8a <EXT_ISR0Intial+0x88>
	Clr_Bit(MCUCR_REG, MCUCR_ISC00);
     d6c:	a5 e5       	ldi	r26, 0x55	; 85
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e5       	ldi	r30, 0x55	; 85
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	8c 93       	st	X, r24
	Set_Bit(MCUCR_REG, MCUCR_ISC01);
     d7a:	a5 e5       	ldi	r26, 0x55	; 85
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e5 e5       	ldi	r30, 0x55	; 85
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	82 60       	ori	r24, 0x02	; 2
     d86:	8c 93       	st	X, r24
     d88:	23 c0       	rjmp	.+70     	; 0xdd0 <EXT_ISR0Intial+0xce>
	}
//INT0 on High level rising Edge
	else if (ISR0_Mode == RASING_EDGE) {
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	79 f4       	brne	.+30     	; 0xdae <EXT_ISR0Intial+0xac>
Set_Bit(MCUCR_REG, MCUCR_ISC00);
     d90:	a5 e5       	ldi	r26, 0x55	; 85
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e5 e5       	ldi	r30, 0x55	; 85
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	81 60       	ori	r24, 0x01	; 1
     d9c:	8c 93       	st	X, r24
Set_Bit(MCUCR_REG, MCUCR_ISC01);
     d9e:	a5 e5       	ldi	r26, 0x55	; 85
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e5 e5       	ldi	r30, 0x55	; 85
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	8c 93       	st	X, r24
     dac:	11 c0       	rjmp	.+34     	; 0xdd0 <EXT_ISR0Intial+0xce>
	}
//Defualt Mode is Rising Edage
	else if (ISR0_Mode == DEFUALT) {
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	8a 30       	cpi	r24, 0x0A	; 10
     db2:	71 f4       	brne	.+28     	; 0xdd0 <EXT_ISR0Intial+0xce>
	Set_Bit(MCUCR_REG, MCUCR_ISC00);
     db4:	a5 e5       	ldi	r26, 0x55	; 85
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e5 e5       	ldi	r30, 0x55	; 85
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	81 60       	ori	r24, 0x01	; 1
     dc0:	8c 93       	st	X, r24
	Set_Bit(MCUCR_REG, MCUCR_ISC01);
     dc2:	a5 e5       	ldi	r26, 0x55	; 85
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e5 e5       	ldi	r30, 0x55	; 85
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	82 60       	ori	r24, 0x02	; 2
     dce:	8c 93       	st	X, r24
}

}
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <EXT_ISR1Intial>:
void EXT_ISR1Intial(u8 ISR1_State, u8 ISR1_Mode) {
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <EXT_ISR1Intial+0x6>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	6a 83       	std	Y+2, r22	; 0x02

#if ISR1_State == DISABLE
	Clr_Bit(GICR_REG, GICR_INT1);
     de8:	ab e5       	ldi	r26, 0x5B	; 91
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	eb e5       	ldi	r30, 0x5B	; 91
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8f 77       	andi	r24, 0x7F	; 127
     df4:	8c 93       	st	X, r24
#elif ISR1_State == ENABLE
	Set_Bit(GICR_REG, GICR_INT1);
#endif
	//INT1 on low level
	if (ISR1_Mode == LOW_LEVEL) {
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 23       	and	r24, r24
     dfa:	79 f4       	brne	.+30     	; 0xe1a <EXT_ISR1Intial+0x40>
		Clr_Bit(MCUCR_REG, MCUCR_ISC10);
     dfc:	a5 e5       	ldi	r26, 0x55	; 85
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e5       	ldi	r30, 0x55	; 85
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8b 7f       	andi	r24, 0xFB	; 251
     e08:	8c 93       	st	X, r24
		Clr_Bit(MCUCR_REG, MCUCR_ISC11);
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	87 7f       	andi	r24, 0xF7	; 247
     e16:	8c 93       	st	X, r24
     e18:	35 c0       	rjmp	.+106    	; 0xe84 <EXT_ISR1Intial+0xaa>
	}
	//INT1 Any change
	else if (ISR1_Mode == NO_CHANGE) {
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	79 f4       	brne	.+30     	; 0xe3e <EXT_ISR1Intial+0x64>
		Set_Bit(MCUCR_REG, MCUCR_ISC10);
     e20:	a5 e5       	ldi	r26, 0x55	; 85
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e5 e5       	ldi	r30, 0x55	; 85
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	8c 93       	st	X, r24
		Clr_Bit(MCUCR_REG, MCUCR_ISC11);
     e2e:	a5 e5       	ldi	r26, 0x55	; 85
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e5 e5       	ldi	r30, 0x55	; 85
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	8c 93       	st	X, r24
     e3c:	23 c0       	rjmp	.+70     	; 0xe84 <EXT_ISR1Intial+0xaa>
	}
//INT1 on falling edge
	else if (ISR1_Mode == FALLING_EDGE) {
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	79 f4       	brne	.+30     	; 0xe62 <EXT_ISR1Intial+0x88>
		Clr_Bit(MCUCR_REG, MCUCR_ISC10);
     e44:	a5 e5       	ldi	r26, 0x55	; 85
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e5 e5       	ldi	r30, 0x55	; 85
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8b 7f       	andi	r24, 0xFB	; 251
     e50:	8c 93       	st	X, r24
		Set_Bit(MCUCR_REG, MCUCR_ISC11);
     e52:	a5 e5       	ldi	r26, 0x55	; 85
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e5       	ldi	r30, 0x55	; 85
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	8c 93       	st	X, r24
     e60:	11 c0       	rjmp	.+34     	; 0xe84 <EXT_ISR1Intial+0xaa>
	}
//INT1 on High level rising Edge
	else if (ISR1_Mode == RASING_EDGE) {
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	71 f4       	brne	.+28     	; 0xe84 <EXT_ISR1Intial+0xaa>
		Set_Bit(MCUCR_REG, MCUCR_ISC10);
     e68:	a5 e5       	ldi	r26, 0x55	; 85
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e5       	ldi	r30, 0x55	; 85
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	84 60       	ori	r24, 0x04	; 4
     e74:	8c 93       	st	X, r24
		Set_Bit(MCUCR_REG, MCUCR_ISC11);
     e76:	a5 e5       	ldi	r26, 0x55	; 85
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e5       	ldi	r30, 0x55	; 85
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	8c 93       	st	X, r24
	}



}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <EXT_ISR2Intial>:
void EXT_ISR2Intial(u8 ISR2_State) {
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	89 83       	std	Y+1, r24	; 0x01
#if ISR2_State == DISABLE
	Clr_Bit(GICR_REG, GICR_INT2);
     e9a:	ab e5       	ldi	r26, 0x5B	; 91
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e5       	ldi	r30, 0x5B	; 91
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7d       	andi	r24, 0xDF	; 223
     ea6:	8c 93       	st	X, r24
#elif ISR2_State == ENABLE
	Set_Bit(GICR_REG, GICR_INT2);
#endif

	}
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <EXT_ISRFlag>:

/*Function To Select INT
 *Receive INT name like (INT0)
 */
void EXT_ISRFlag(u8 INT) {
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <EXT_ISRFlag+0x6>
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	89 83       	std	Y+1, r24	; 0x01
	switch (INT) {
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3b 83       	std	Y+3, r19	; 0x03
     ec6:	2a 83       	std	Y+2, r18	; 0x02
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	9b 81       	ldd	r25, Y+3	; 0x03
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	91 05       	cpc	r25, r1
     ed0:	89 f0       	breq	.+34     	; 0xef4 <EXT_ISRFlag+0x44>
     ed2:	2a 81       	ldd	r18, Y+2	; 0x02
     ed4:	3b 81       	ldd	r19, Y+3	; 0x03
     ed6:	22 30       	cpi	r18, 0x02	; 2
     ed8:	31 05       	cpc	r19, r1
     eda:	a1 f0       	breq	.+40     	; 0xf04 <EXT_ISRFlag+0x54>
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	9b 81       	ldd	r25, Y+3	; 0x03
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	b9 f4       	brne	.+46     	; 0xf12 <EXT_ISRFlag+0x62>
	case INT0:
		Set_Bit(GIFR_REG, GIFR_INTF0);
     ee4:	aa e5       	ldi	r26, 0x5A	; 90
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ea e5       	ldi	r30, 0x5A	; 90
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 64       	ori	r24, 0x40	; 64
     ef0:	8c 93       	st	X, r24
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <EXT_ISRFlag+0x62>
		break;
	case INT1:
		Set_Bit(GIFR_REG, GIFR_INTF1);
     ef4:	aa e5       	ldi	r26, 0x5A	; 90
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ea e5       	ldi	r30, 0x5A	; 90
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 68       	ori	r24, 0x80	; 128
     f00:	8c 93       	st	X, r24
     f02:	07 c0       	rjmp	.+14     	; 0xf12 <EXT_ISRFlag+0x62>
		break;
	case INT2:
		Set_Bit(GIFR_REG, GIFR_INTF2);
     f04:	aa e5       	ldi	r26, 0x5A	; 90
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ea e5       	ldi	r30, 0x5A	; 90
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 62       	ori	r24, 0x20	; 32
     f10:	8c 93       	st	X, r24
		break;
	}
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <Set_PinDirection>:
 * Receive Name of Port in all capital like (PORTA)
 * And Name Pin like(PIN0)
 * And Direction like (OUTPUT)
 */

void Set_PinDirection(u8 Port , u8 Pin , u8 Direction ){
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	27 97       	sbiw	r28, 0x07	; 7
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	6a 83       	std	Y+2, r22	; 0x02
     f36:	4b 83       	std	Y+3, r20	; 0x03

	if (Direction == OUTPUT){
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <Set_PinDirection+0x22>
     f3e:	6e c0       	rjmp	.+220    	; 0x101c <Set_PinDirection+0xfe>
		switch(Port){
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3f 83       	std	Y+7, r19	; 0x07
     f48:	2e 83       	std	Y+6, r18	; 0x06
     f4a:	8e 81       	ldd	r24, Y+6	; 0x06
     f4c:	9f 81       	ldd	r25, Y+7	; 0x07
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	49 f1       	breq	.+82     	; 0xfa6 <Set_PinDirection+0x88>
     f54:	2e 81       	ldd	r18, Y+6	; 0x06
     f56:	3f 81       	ldd	r19, Y+7	; 0x07
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	2c f4       	brge	.+10     	; 0xf68 <Set_PinDirection+0x4a>
     f5e:	8e 81       	ldd	r24, Y+6	; 0x06
     f60:	9f 81       	ldd	r25, Y+7	; 0x07
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	61 f0       	breq	.+24     	; 0xf7e <Set_PinDirection+0x60>
     f66:	5a c0       	rjmp	.+180    	; 0x101c <Set_PinDirection+0xfe>
     f68:	2e 81       	ldd	r18, Y+6	; 0x06
     f6a:	3f 81       	ldd	r19, Y+7	; 0x07
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	71 f1       	breq	.+92     	; 0xfce <Set_PinDirection+0xb0>
     f72:	8e 81       	ldd	r24, Y+6	; 0x06
     f74:	9f 81       	ldd	r25, Y+7	; 0x07
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	91 05       	cpc	r25, r1
     f7a:	e9 f1       	breq	.+122    	; 0xff6 <Set_PinDirection+0xd8>
     f7c:	4f c0       	rjmp	.+158    	; 0x101c <Set_PinDirection+0xfe>
		case PORTA:
			Set_Bit(DDRa, Pin);   break;
     f7e:	aa e3       	ldi	r26, 0x3A	; 58
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ea e3       	ldi	r30, 0x3A	; 58
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <Set_PinDirection+0x7e>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <Set_PinDirection+0x7a>
     fa0:	84 2b       	or	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	3b c0       	rjmp	.+118    	; 0x101c <Set_PinDirection+0xfe>
		case PORTB:
			Set_Bit(DDRb, Pin);   break;
     fa6:	a7 e3       	ldi	r26, 0x37	; 55
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e3       	ldi	r30, 0x37	; 55
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <Set_PinDirection+0xa6>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <Set_PinDirection+0xa2>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	27 c0       	rjmp	.+78     	; 0x101c <Set_PinDirection+0xfe>
		case PORTC:
			Set_Bit(DDRc, Pin);   break;
     fce:	a4 e3       	ldi	r26, 0x34	; 52
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e4 e3       	ldi	r30, 0x34	; 52
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <Set_PinDirection+0xce>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <Set_PinDirection+0xca>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	13 c0       	rjmp	.+38     	; 0x101c <Set_PinDirection+0xfe>
		case PORTD:
			Set_Bit(DDRd, Pin);   break;
     ff6:	a1 e3       	ldi	r26, 0x31	; 49
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <Set_PinDirection+0xf6>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <Set_PinDirection+0xf2>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
         }

	}
	if (Direction == INPUT){
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 23       	and	r24, r24
    1020:	09 f0       	breq	.+2      	; 0x1024 <Set_PinDirection+0x106>
    1022:	73 c0       	rjmp	.+230    	; 0x110a <Set_PinDirection+0x1ec>
		switch(Port){
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	59 f1       	breq	.+86     	; 0x108e <Set_PinDirection+0x170>
    1038:	2c 81       	ldd	r18, Y+4	; 0x04
    103a:	3d 81       	ldd	r19, Y+5	; 0x05
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	31 05       	cpc	r19, r1
    1040:	2c f4       	brge	.+10     	; 0x104c <Set_PinDirection+0x12e>
    1042:	8c 81       	ldd	r24, Y+4	; 0x04
    1044:	9d 81       	ldd	r25, Y+5	; 0x05
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f0       	breq	.+26     	; 0x1064 <Set_PinDirection+0x146>
    104a:	5f c0       	rjmp	.+190    	; 0x110a <Set_PinDirection+0x1ec>
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
    104e:	3d 81       	ldd	r19, Y+5	; 0x05
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	89 f1       	breq	.+98     	; 0x10b8 <Set_PinDirection+0x19a>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	91 05       	cpc	r25, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <Set_PinDirection+0x144>
    1060:	40 c0       	rjmp	.+128    	; 0x10e2 <Set_PinDirection+0x1c4>
    1062:	53 c0       	rjmp	.+166    	; 0x110a <Set_PinDirection+0x1ec>
		case PORTA:
			Clr_Bit(DDRa, Pin);   break;
    1064:	aa e3       	ldi	r26, 0x3A	; 58
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ea e3       	ldi	r30, 0x3A	; 58
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <Set_PinDirection+0x164>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <Set_PinDirection+0x160>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	3e c0       	rjmp	.+124    	; 0x110a <Set_PinDirection+0x1ec>
		case PORTB:
			Clr_Bit(DDRb, Pin);   break;
    108e:	a7 e3       	ldi	r26, 0x37	; 55
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e7 e3       	ldi	r30, 0x37	; 55
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <Set_PinDirection+0x18e>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <Set_PinDirection+0x18a>
    10b0:	80 95       	com	r24
    10b2:	84 23       	and	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	29 c0       	rjmp	.+82     	; 0x110a <Set_PinDirection+0x1ec>
		case PORTC:
			Clr_Bit(DDRc, Pin);   break;
    10b8:	a4 e3       	ldi	r26, 0x34	; 52
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e4 e3       	ldi	r30, 0x34	; 52
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Set_PinDirection+0x1b8>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <Set_PinDirection+0x1b4>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <Set_PinDirection+0x1ec>
		case PORTD:
			Clr_Bit(DDRd, Pin);   break;
    10e2:	a1 e3       	ldi	r26, 0x31	; 49
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e1 e3       	ldi	r30, 0x31	; 49
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <Set_PinDirection+0x1e2>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <Set_PinDirection+0x1de>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
		}


}

}
    110a:	27 96       	adiw	r28, 0x07	; 7
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <Set_PinValue>:
 * Receive Name of Port in all capital like (PORTA)
 * And Name Pin like(PIN0)
 * And Value like (HIGH)
 */

void Set_PinValue(u8 Port , u8 Pin, u8 Value){
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	27 97       	sbiw	r28, 0x07	; 7
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	6a 83       	std	Y+2, r22	; 0x02
    1134:	4b 83       	std	Y+3, r20	; 0x03
	Set_PinDirection(Port, Pin, OUTPUT);
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	6a 81       	ldd	r22, Y+2	; 0x02
    113a:	41 e0       	ldi	r20, 0x01	; 1
    113c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
	if (Value== HIGH){
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	09 f0       	breq	.+2      	; 0x1148 <Set_PinValue+0x2c>
    1146:	6e c0       	rjmp	.+220    	; 0x1224 <Set_PinValue+0x108>
		switch(Port){
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3f 83       	std	Y+7, r19	; 0x07
    1150:	2e 83       	std	Y+6, r18	; 0x06
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
    1154:	9f 81       	ldd	r25, Y+7	; 0x07
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	49 f1       	breq	.+82     	; 0x11ae <Set_PinValue+0x92>
    115c:	2e 81       	ldd	r18, Y+6	; 0x06
    115e:	3f 81       	ldd	r19, Y+7	; 0x07
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <Set_PinValue+0x54>
    1166:	8e 81       	ldd	r24, Y+6	; 0x06
    1168:	9f 81       	ldd	r25, Y+7	; 0x07
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <Set_PinValue+0x6a>
    116e:	5a c0       	rjmp	.+180    	; 0x1224 <Set_PinValue+0x108>
    1170:	2e 81       	ldd	r18, Y+6	; 0x06
    1172:	3f 81       	ldd	r19, Y+7	; 0x07
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	71 f1       	breq	.+92     	; 0x11d6 <Set_PinValue+0xba>
    117a:	8e 81       	ldd	r24, Y+6	; 0x06
    117c:	9f 81       	ldd	r25, Y+7	; 0x07
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	e9 f1       	breq	.+122    	; 0x11fe <Set_PinValue+0xe2>
    1184:	4f c0       	rjmp	.+158    	; 0x1224 <Set_PinValue+0x108>
		case PORTA:
			Set_Bit(PORTa, Pin);   break;
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <Set_PinValue+0x88>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <Set_PinValue+0x84>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	3b c0       	rjmp	.+118    	; 0x1224 <Set_PinValue+0x108>
		case PORTB:
			Set_Bit(PORTb, Pin);   break;
    11ae:	a8 e3       	ldi	r26, 0x38	; 56
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e8 e3       	ldi	r30, 0x38	; 56
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <Set_PinValue+0xb0>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <Set_PinValue+0xac>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	27 c0       	rjmp	.+78     	; 0x1224 <Set_PinValue+0x108>
		case PORTC:
			Set_Bit(PORTc, Pin);   break;
    11d6:	a5 e3       	ldi	r26, 0x35	; 53
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e3       	ldi	r30, 0x35	; 53
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <Set_PinValue+0xd8>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <Set_PinValue+0xd4>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <Set_PinValue+0x108>
		case PORTD:
			Set_Bit(PORTd, Pin);   break;
    11fe:	a2 e3       	ldi	r26, 0x32	; 50
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e2 e3       	ldi	r30, 0x32	; 50
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <Set_PinValue+0x100>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <Set_PinValue+0xfc>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
         }

	}
	if (Value == LOW){
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	88 23       	and	r24, r24
    1228:	09 f0       	breq	.+2      	; 0x122c <Set_PinValue+0x110>
    122a:	73 c0       	rjmp	.+230    	; 0x1312 <Set_PinValue+0x1f6>
		switch(Port){
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	3d 83       	std	Y+5, r19	; 0x05
    1234:	2c 83       	std	Y+4, r18	; 0x04
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	91 05       	cpc	r25, r1
    123e:	59 f1       	breq	.+86     	; 0x1296 <Set_PinValue+0x17a>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	2c f4       	brge	.+10     	; 0x1254 <Set_PinValue+0x138>
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	9d 81       	ldd	r25, Y+5	; 0x05
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	69 f0       	breq	.+26     	; 0x126c <Set_PinValue+0x150>
    1252:	5f c0       	rjmp	.+190    	; 0x1312 <Set_PinValue+0x1f6>
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	3d 81       	ldd	r19, Y+5	; 0x05
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	89 f1       	breq	.+98     	; 0x12c0 <Set_PinValue+0x1a4>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <Set_PinValue+0x14e>
    1268:	40 c0       	rjmp	.+128    	; 0x12ea <Set_PinValue+0x1ce>
    126a:	53 c0       	rjmp	.+166    	; 0x1312 <Set_PinValue+0x1f6>
		case PORTA:
			Clr_Bit(PORTa, Pin);   break;
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <Set_PinValue+0x16e>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <Set_PinValue+0x16a>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	3e c0       	rjmp	.+124    	; 0x1312 <Set_PinValue+0x1f6>
		case PORTB:
			Clr_Bit(PORTb, Pin);   break;
    1296:	a8 e3       	ldi	r26, 0x38	; 56
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e8 e3       	ldi	r30, 0x38	; 56
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <Set_PinValue+0x198>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <Set_PinValue+0x194>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	29 c0       	rjmp	.+82     	; 0x1312 <Set_PinValue+0x1f6>
		case PORTC:
			Clr_Bit(PORTc, Pin);   break;
    12c0:	a5 e3       	ldi	r26, 0x35	; 53
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e3       	ldi	r30, 0x35	; 53
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <Set_PinValue+0x1c2>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <Set_PinValue+0x1be>
    12e2:	80 95       	com	r24
    12e4:	84 23       	and	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <Set_PinValue+0x1f6>
		case PORTD:
			Clr_Bit(PORTd, Pin);   break;
    12ea:	a2 e3       	ldi	r26, 0x32	; 50
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e2 e3       	ldi	r30, 0x32	; 50
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <Set_PinValue+0x1ec>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <Set_PinValue+0x1e8>
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8c 93       	st	X, r24


}


}
    1312:	27 96       	adiw	r28, 0x07	; 7
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <Set_PortDirection>:
/* Function to Set Full Port  Direction
 * Receive Name of Port in all capital like (PORTA)
 * And Direction like (OUTPUT or INPUT )or Value you want like 0xF0
 */

void Set_PortDirection(u8 Port ,u8 Direction){
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	28 97       	sbiw	r28, 0x08	; 8
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	6a 83       	std	Y+2, r22	; 0x02

	if (Direction == OUTPUT){
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	99 f5       	brne	.+102    	; 0x13a8 <Set_PortDirection+0x84>
		switch(Port){
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	38 87       	std	Y+8, r19	; 0x08
    134a:	2f 83       	std	Y+7, r18	; 0x07
    134c:	8f 81       	ldd	r24, Y+7	; 0x07
    134e:	98 85       	ldd	r25, Y+8	; 0x08
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	d1 f0       	breq	.+52     	; 0x138a <Set_PortDirection+0x66>
    1356:	2f 81       	ldd	r18, Y+7	; 0x07
    1358:	38 85       	ldd	r19, Y+8	; 0x08
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <Set_PortDirection+0x46>
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	98 85       	ldd	r25, Y+8	; 0x08
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	61 f0       	breq	.+24     	; 0x1380 <Set_PortDirection+0x5c>
    1368:	83 c0       	rjmp	.+262    	; 0x1470 <Set_PortDirection+0x14c>
    136a:	2f 81       	ldd	r18, Y+7	; 0x07
    136c:	38 85       	ldd	r19, Y+8	; 0x08
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <Set_PortDirection+0x70>
    1374:	8f 81       	ldd	r24, Y+7	; 0x07
    1376:	98 85       	ldd	r25, Y+8	; 0x08
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	81 f0       	breq	.+32     	; 0x139e <Set_PortDirection+0x7a>
    137e:	78 c0       	rjmp	.+240    	; 0x1470 <Set_PortDirection+0x14c>
		case PORTA:
			DDRa=0b11111111;   break;
    1380:	ea e3       	ldi	r30, 0x3A	; 58
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	80 83       	st	Z, r24
    1388:	73 c0       	rjmp	.+230    	; 0x1470 <Set_PortDirection+0x14c>
		case PORTB:
			DDRb=0b11111111;   break;
    138a:	e7 e3       	ldi	r30, 0x37	; 55
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	80 83       	st	Z, r24
    1392:	6e c0       	rjmp	.+220    	; 0x1470 <Set_PortDirection+0x14c>
		case PORTC:
			DDRc=0b11111111;   break;
    1394:	e4 e3       	ldi	r30, 0x34	; 52
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	80 83       	st	Z, r24
    139c:	69 c0       	rjmp	.+210    	; 0x1470 <Set_PortDirection+0x14c>
		case PORTD:
			DDRd=0b11111111;   break;
    139e:	e1 e3       	ldi	r30, 0x31	; 49
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	80 83       	st	Z, r24
    13a6:	64 c0       	rjmp	.+200    	; 0x1470 <Set_PortDirection+0x14c>
         }

	}
	else if (Direction == INPUT) {
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	88 23       	and	r24, r24
    13ac:	79 f5       	brne	.+94     	; 0x140c <Set_PortDirection+0xe8>
		switch(Port){
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	3e 83       	std	Y+6, r19	; 0x06
    13b6:	2d 83       	std	Y+5, r18	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	91 05       	cpc	r25, r1
    13c0:	c9 f0       	breq	.+50     	; 0x13f4 <Set_PortDirection+0xd0>
    13c2:	2d 81       	ldd	r18, Y+5	; 0x05
    13c4:	3e 81       	ldd	r19, Y+6	; 0x06
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	2c f4       	brge	.+10     	; 0x13d6 <Set_PortDirection+0xb2>
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	61 f0       	breq	.+24     	; 0x13ec <Set_PortDirection+0xc8>
    13d4:	4d c0       	rjmp	.+154    	; 0x1470 <Set_PortDirection+0x14c>
    13d6:	2d 81       	ldd	r18, Y+5	; 0x05
    13d8:	3e 81       	ldd	r19, Y+6	; 0x06
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	71 f0       	breq	.+28     	; 0x13fc <Set_PortDirection+0xd8>
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	91 05       	cpc	r25, r1
    13e8:	69 f0       	breq	.+26     	; 0x1404 <Set_PortDirection+0xe0>
    13ea:	42 c0       	rjmp	.+132    	; 0x1470 <Set_PortDirection+0x14c>
		case PORTA:
			DDRa=0b00000000;   break;
    13ec:	ea e3       	ldi	r30, 0x3A	; 58
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	10 82       	st	Z, r1
    13f2:	3e c0       	rjmp	.+124    	; 0x1470 <Set_PortDirection+0x14c>
		case PORTB:
			DDRb=0b00000000;   break;
    13f4:	e7 e3       	ldi	r30, 0x37	; 55
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	10 82       	st	Z, r1
    13fa:	3a c0       	rjmp	.+116    	; 0x1470 <Set_PortDirection+0x14c>
		case PORTC:
			DDRc=0b00000000;   break;
    13fc:	e4 e3       	ldi	r30, 0x34	; 52
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	10 82       	st	Z, r1
    1402:	36 c0       	rjmp	.+108    	; 0x1470 <Set_PortDirection+0x14c>
		case PORTD:
			DDRd=0b00000000;   break;
    1404:	e1 e3       	ldi	r30, 0x31	; 49
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
    140a:	32 c0       	rjmp	.+100    	; 0x1470 <Set_PortDirection+0x14c>
		}


}
	else {
		switch (Port) {
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	3c 83       	std	Y+4, r19	; 0x04
    1414:	2b 83       	std	Y+3, r18	; 0x03
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	91 05       	cpc	r25, r1
    141e:	d1 f0       	breq	.+52     	; 0x1454 <Set_PortDirection+0x130>
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	2c f4       	brge	.+10     	; 0x1434 <Set_PortDirection+0x110>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	61 f0       	breq	.+24     	; 0x144a <Set_PortDirection+0x126>
    1432:	1e c0       	rjmp	.+60     	; 0x1470 <Set_PortDirection+0x14c>
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	3c 81       	ldd	r19, Y+4	; 0x04
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	81 f0       	breq	.+32     	; 0x145e <Set_PortDirection+0x13a>
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	91 05       	cpc	r25, r1
    1446:	81 f0       	breq	.+32     	; 0x1468 <Set_PortDirection+0x144>
    1448:	13 c0       	rjmp	.+38     	; 0x1470 <Set_PortDirection+0x14c>
		case PORTA:
			PORTa = Direction;
    144a:	eb e3       	ldi	r30, 0x3B	; 59
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	80 83       	st	Z, r24
    1452:	0e c0       	rjmp	.+28     	; 0x1470 <Set_PortDirection+0x14c>
			break;
		case PORTB:
			PORTb = Direction;
    1454:	e8 e3       	ldi	r30, 0x38	; 56
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	80 83       	st	Z, r24
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <Set_PortDirection+0x14c>
			break;
		case PORTC:
			PORTc = Direction;
    145e:	e5 e3       	ldi	r30, 0x35	; 53
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 83       	st	Z, r24
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <Set_PortDirection+0x14c>
			break;
		case PORTD:
			PORTd = Direction;
    1468:	e2 e3       	ldi	r30, 0x32	; 50
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
			break;
		}
	}

}
    1470:	28 96       	adiw	r28, 0x08	; 8
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <Set_PortValue>:
/*Set Port Value make it OUTPUT
 * Receive PORT Name like (PORTA)
 *Receive Value That You Want Or to Set FUll Port By (HIGH or LOW)
 */

void Set_PortValue(u8 Port, u8 Value) {
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	28 97       	sbiw	r28, 0x08	; 8
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02

	Set_PortDirection(Port, OUTPUT);
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	0e 94 92 09 	call	0x1324	; 0x1324 <Set_PortDirection>
	if (Value == HIGH) {
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	99 f5       	brne	.+102    	; 0x150e <Set_PortValue+0x8c>
		switch (Port) {
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	38 87       	std	Y+8, r19	; 0x08
    14b0:	2f 83       	std	Y+7, r18	; 0x07
    14b2:	8f 81       	ldd	r24, Y+7	; 0x07
    14b4:	98 85       	ldd	r25, Y+8	; 0x08
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	d1 f0       	breq	.+52     	; 0x14f0 <Set_PortValue+0x6e>
    14bc:	2f 81       	ldd	r18, Y+7	; 0x07
    14be:	38 85       	ldd	r19, Y+8	; 0x08
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <Set_PortValue+0x4e>
    14c6:	8f 81       	ldd	r24, Y+7	; 0x07
    14c8:	98 85       	ldd	r25, Y+8	; 0x08
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <Set_PortValue+0x64>
    14ce:	83 c0       	rjmp	.+262    	; 0x15d6 <Set_PortValue+0x154>
    14d0:	2f 81       	ldd	r18, Y+7	; 0x07
    14d2:	38 85       	ldd	r19, Y+8	; 0x08
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	81 f0       	breq	.+32     	; 0x14fa <Set_PortValue+0x78>
    14da:	8f 81       	ldd	r24, Y+7	; 0x07
    14dc:	98 85       	ldd	r25, Y+8	; 0x08
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <Set_PortValue+0x82>
    14e4:	78 c0       	rjmp	.+240    	; 0x15d6 <Set_PortValue+0x154>
		case PORTA:
			PORTa = 0b11111111;
    14e6:	eb e3       	ldi	r30, 0x3B	; 59
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	80 83       	st	Z, r24
    14ee:	73 c0       	rjmp	.+230    	; 0x15d6 <Set_PortValue+0x154>
			break;
		case PORTB:
			PORTb = 0b11111111;
    14f0:	e8 e3       	ldi	r30, 0x38	; 56
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	80 83       	st	Z, r24
    14f8:	6e c0       	rjmp	.+220    	; 0x15d6 <Set_PortValue+0x154>
			break;
		case PORTC:
			PORTc = 0b11111111;
    14fa:	e5 e3       	ldi	r30, 0x35	; 53
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	80 83       	st	Z, r24
    1502:	69 c0       	rjmp	.+210    	; 0x15d6 <Set_PortValue+0x154>
			break;
		case PORTD:
			PORTd = 0b11111111;
    1504:	e2 e3       	ldi	r30, 0x32	; 50
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	80 83       	st	Z, r24
    150c:	64 c0       	rjmp	.+200    	; 0x15d6 <Set_PortValue+0x154>
			break;

}
	}
	else if (Value == LOW) {
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	88 23       	and	r24, r24
    1512:	79 f5       	brne	.+94     	; 0x1572 <Set_PortValue+0xf0>
		switch (Port) {
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3e 83       	std	Y+6, r19	; 0x06
    151c:	2d 83       	std	Y+5, r18	; 0x05
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	c9 f0       	breq	.+50     	; 0x155a <Set_PortValue+0xd8>
    1528:	2d 81       	ldd	r18, Y+5	; 0x05
    152a:	3e 81       	ldd	r19, Y+6	; 0x06
    152c:	22 30       	cpi	r18, 0x02	; 2
    152e:	31 05       	cpc	r19, r1
    1530:	2c f4       	brge	.+10     	; 0x153c <Set_PortValue+0xba>
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	61 f0       	breq	.+24     	; 0x1552 <Set_PortValue+0xd0>
    153a:	4d c0       	rjmp	.+154    	; 0x15d6 <Set_PortValue+0x154>
    153c:	2d 81       	ldd	r18, Y+5	; 0x05
    153e:	3e 81       	ldd	r19, Y+6	; 0x06
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	71 f0       	breq	.+28     	; 0x1562 <Set_PortValue+0xe0>
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	91 05       	cpc	r25, r1
    154e:	69 f0       	breq	.+26     	; 0x156a <Set_PortValue+0xe8>
    1550:	42 c0       	rjmp	.+132    	; 0x15d6 <Set_PortValue+0x154>
		case PORTA:
			PORTa = 0b00000000;
    1552:	eb e3       	ldi	r30, 0x3B	; 59
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	10 82       	st	Z, r1
    1558:	3e c0       	rjmp	.+124    	; 0x15d6 <Set_PortValue+0x154>
			break;
		case PORTB:
			PORTb = 0b00000000;
    155a:	e8 e3       	ldi	r30, 0x38	; 56
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	10 82       	st	Z, r1
    1560:	3a c0       	rjmp	.+116    	; 0x15d6 <Set_PortValue+0x154>
			break;
		case PORTC:
			PORTc = 0b00000000;
    1562:	e5 e3       	ldi	r30, 0x35	; 53
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	10 82       	st	Z, r1
    1568:	36 c0       	rjmp	.+108    	; 0x15d6 <Set_PortValue+0x154>
			break;
		case PORTD:
			PORTd = 0b00000000;
    156a:	e2 e3       	ldi	r30, 0x32	; 50
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	10 82       	st	Z, r1
    1570:	32 c0       	rjmp	.+100    	; 0x15d6 <Set_PortValue+0x154>

		}
	}

	else {
		switch (Port) {
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	3c 83       	std	Y+4, r19	; 0x04
    157a:	2b 83       	std	Y+3, r18	; 0x03
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	d1 f0       	breq	.+52     	; 0x15ba <Set_PortValue+0x138>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	2c f4       	brge	.+10     	; 0x159a <Set_PortValue+0x118>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	61 f0       	breq	.+24     	; 0x15b0 <Set_PortValue+0x12e>
    1598:	1e c0       	rjmp	.+60     	; 0x15d6 <Set_PortValue+0x154>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	81 f0       	breq	.+32     	; 0x15c4 <Set_PortValue+0x142>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	91 05       	cpc	r25, r1
    15ac:	81 f0       	breq	.+32     	; 0x15ce <Set_PortValue+0x14c>
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <Set_PortValue+0x154>
		case PORTA:
			PORTa = Value;
    15b0:	eb e3       	ldi	r30, 0x3B	; 59
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	80 83       	st	Z, r24
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <Set_PortValue+0x154>
		break;
		case PORTB:
			PORTb = Value;
    15ba:	e8 e3       	ldi	r30, 0x38	; 56
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <Set_PortValue+0x154>
		break;
		case PORTC:
			PORTc = Value;
    15c4:	e5 e3       	ldi	r30, 0x35	; 53
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <Set_PortValue+0x154>
		break;
		case PORTD:
			PORTd = Value;
    15ce:	e2 e3       	ldi	r30, 0x32	; 50
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	80 83       	st	Z, r24
		break;
		}
}
}
    15d6:	28 96       	adiw	r28, 0x08	; 8
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <Get_PinValue>:

/*Function To Get Value for Any Pin
 * Receive Name Of PIN like (PINA)
 * Receive Pin Number like(PIN0)
 */
u8 Get_PinValue(u8 PIN, u8 PIN_N) {
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <Get_PinValue+0x6>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <Get_PinValue+0x8>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <Get_PinValue+0xa>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	6a 83       	std	Y+2, r22	; 0x02

	switch (PIN) {
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3d 83       	std	Y+5, r19	; 0x05
    1602:	2c 83       	std	Y+4, r18	; 0x04
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	85 30       	cpi	r24, 0x05	; 5
    160a:	91 05       	cpc	r25, r1
    160c:	41 f1       	breq	.+80     	; 0x165e <Get_PinValue+0x76>
    160e:	2c 81       	ldd	r18, Y+4	; 0x04
    1610:	3d 81       	ldd	r19, Y+5	; 0x05
    1612:	26 30       	cpi	r18, 0x06	; 6
    1614:	31 05       	cpc	r19, r1
    1616:	34 f4       	brge	.+12     	; 0x1624 <Get_PinValue+0x3c>
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	9d 81       	ldd	r25, Y+5	; 0x05
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	91 05       	cpc	r25, r1
    1620:	61 f0       	breq	.+24     	; 0x163a <Get_PinValue+0x52>
    1622:	53 c0       	rjmp	.+166    	; 0x16ca <Get_PinValue+0xe2>
    1624:	2c 81       	ldd	r18, Y+4	; 0x04
    1626:	3d 81       	ldd	r19, Y+5	; 0x05
    1628:	26 30       	cpi	r18, 0x06	; 6
    162a:	31 05       	cpc	r19, r1
    162c:	51 f1       	breq	.+84     	; 0x1682 <Get_PinValue+0x9a>
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	9d 81       	ldd	r25, Y+5	; 0x05
    1632:	87 30       	cpi	r24, 0x07	; 7
    1634:	91 05       	cpc	r25, r1
    1636:	b9 f1       	breq	.+110    	; 0x16a6 <Get_PinValue+0xbe>
    1638:	48 c0       	rjmp	.+144    	; 0x16ca <Get_PinValue+0xe2>
	case PINA:
		return Get_Bit(PINa, PIN_N);
    163a:	e9 e3       	ldi	r30, 0x39	; 57
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <Get_PinValue+0x6c>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <Get_PinValue+0x68>
    1658:	84 23       	and	r24, r20
    165a:	8b 83       	std	Y+3, r24	; 0x03
    165c:	37 c0       	rjmp	.+110    	; 0x16cc <Get_PinValue+0xe4>
		break;
	case PINB:
		return Get_Bit(PINb, PIN_N);
    165e:	e6 e3       	ldi	r30, 0x36	; 54
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <Get_PinValue+0x90>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <Get_PinValue+0x8c>
    167c:	84 23       	and	r24, r20
    167e:	8b 83       	std	Y+3, r24	; 0x03
    1680:	25 c0       	rjmp	.+74     	; 0x16cc <Get_PinValue+0xe4>
		break;
	case PINC:
		return Get_Bit(PINc, PIN_N);
    1682:	e3 e3       	ldi	r30, 0x33	; 51
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <Get_PinValue+0xb4>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <Get_PinValue+0xb0>
    16a0:	84 23       	and	r24, r20
    16a2:	8b 83       	std	Y+3, r24	; 0x03
    16a4:	13 c0       	rjmp	.+38     	; 0x16cc <Get_PinValue+0xe4>
		break;
	case PIND:
		return Get_Bit(PINd, PIN_N);
    16a6:	e0 e3       	ldi	r30, 0x30	; 48
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <Get_PinValue+0xd8>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <Get_PinValue+0xd4>
    16c4:	84 23       	and	r24, r20
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <Get_PinValue+0xe4>
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <Get_PinValue+0xe8>
		break;
	}


}
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	26 96       	adiw	r28, 0x06	; 6
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <ADC_VoltageRef>:
 *Mode AREF to  Internal Vref turned off
 *Mode AVCC to AVCC with external capacitor at AREF pin
 *Mode Reserved
 *Mode AREF_IN toInternal 2.56V Voltage Reference with external capacitor at AREF pin
 */
void ADC_VoltageRef(u8 Mode) {
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <ADC_VoltageRef+0x6>
    16ea:	0f 92       	push	r0
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	89 83       	std	Y+1, r24	; 0x01

	switch (Mode) {
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3b 83       	std	Y+3, r19	; 0x03
    16fa:	2a 83       	std	Y+2, r18	; 0x02
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	21 f1       	breq	.+72     	; 0x174e <ADC_VoltageRef+0x6a>
    1706:	2a 81       	ldd	r18, Y+2	; 0x02
    1708:	3b 81       	ldd	r19, Y+3	; 0x03
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <ADC_VoltageRef+0x36>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	61 f0       	breq	.+24     	; 0x1730 <ADC_VoltageRef+0x4c>
    1718:	46 c0       	rjmp	.+140    	; 0x17a6 <ADC_VoltageRef+0xc2>
    171a:	2a 81       	ldd	r18, Y+2	; 0x02
    171c:	3b 81       	ldd	r19, Y+3	; 0x03
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	21 f1       	breq	.+72     	; 0x176c <ADC_VoltageRef+0x88>
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	9b 81       	ldd	r25, Y+3	; 0x03
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	71 f1       	breq	.+92     	; 0x178a <ADC_VoltageRef+0xa6>
    172e:	3b c0       	rjmp	.+118    	; 0x17a6 <ADC_VoltageRef+0xc2>
//AREF, Internal Vref turned off
	case AREF:
		Clr_Bit(ADMUX, REFS_1);
    1730:	a7 e2       	ldi	r26, 0x27	; 39
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e7 e2       	ldi	r30, 0x27	; 39
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8f 77       	andi	r24, 0x7F	; 127
    173c:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, REFS_0);
    173e:	a7 e2       	ldi	r26, 0x27	; 39
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e7 e2       	ldi	r30, 0x27	; 39
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8f 7b       	andi	r24, 0xBF	; 191
    174a:	8c 93       	st	X, r24
    174c:	2c c0       	rjmp	.+88     	; 0x17a6 <ADC_VoltageRef+0xc2>
	break;
//AVCC with external capacitor at AREF pin
	case AVCC:
		Clr_Bit(ADMUX, REFS_1);
    174e:	a7 e2       	ldi	r26, 0x27	; 39
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e7 e2       	ldi	r30, 0x27	; 39
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	8f 77       	andi	r24, 0x7F	; 127
    175a:	8c 93       	st	X, r24
		Set_Bit(ADMUX, REFS_0);
    175c:	a7 e2       	ldi	r26, 0x27	; 39
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e7 e2       	ldi	r30, 0x27	; 39
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	80 64       	ori	r24, 0x40	; 64
    1768:	8c 93       	st	X, r24
    176a:	1d c0       	rjmp	.+58     	; 0x17a6 <ADC_VoltageRef+0xc2>
		break;
// Reserved
	case Reserved:
		Set_Bit(ADMUX, REFS_1);
    176c:	a7 e2       	ldi	r26, 0x27	; 39
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e7 e2       	ldi	r30, 0x27	; 39
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 68       	ori	r24, 0x80	; 128
    1778:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, REFS_0);
    177a:	a7 e2       	ldi	r26, 0x27	; 39
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e7 e2       	ldi	r30, 0x27	; 39
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 7b       	andi	r24, 0xBF	; 191
    1786:	8c 93       	st	X, r24
    1788:	0e c0       	rjmp	.+28     	; 0x17a6 <ADC_VoltageRef+0xc2>
		break;
//Internal 2.56V Voltage Reference with external capacitor at AREF pin
	case AREF_IN:
		Set_Bit(ADMUX, REFS_1);
    178a:	a7 e2       	ldi	r26, 0x27	; 39
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e7 e2       	ldi	r30, 0x27	; 39
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	80 68       	ori	r24, 0x80	; 128
    1796:	8c 93       	st	X, r24
		Set_Bit(ADMUX, REFS_0);
    1798:	a7 e2       	ldi	r26, 0x27	; 39
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e7 e2       	ldi	r30, 0x27	; 39
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	80 64       	ori	r24, 0x40	; 64
    17a4:	8c 93       	st	X, r24
		break;

	}
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <ADC_AdjustResult>:
 * Receive Mode like (RIGHT or LEFT)
 * Mode LEFT mean  left adjust the result
 * Mode RIGHT mean Right Adjusted result
 */

u8 ADC_AdjustResult(u8 Mode) {
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <ADC_AdjustResult+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <ADC_AdjustResult+0x8>
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	89 83       	std	Y+1, r24	; 0x01

	switch (Mode) {
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3c 83       	std	Y+4, r19	; 0x04
    17ca:	2b 83       	std	Y+3, r18	; 0x03
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	31 f0       	breq	.+12     	; 0x17e0 <ADC_AdjustResult+0x2e>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	21 30       	cpi	r18, 0x01	; 1
    17da:	31 05       	cpc	r19, r1
    17dc:	69 f0       	breq	.+26     	; 0x17f8 <ADC_AdjustResult+0x46>
    17de:	18 c0       	rjmp	.+48     	; 0x1810 <ADC_AdjustResult+0x5e>

	case LEFT:
		Set_Bit(ADMUX, ADLAR);
    17e0:	a7 e2       	ldi	r26, 0x27	; 39
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e7 e2       	ldi	r30, 0x27	; 39
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 62       	ori	r24, 0x20	; 32
    17ec:	8c 93       	st	X, r24
		return ADCH;
    17ee:	e5 e2       	ldi	r30, 0x25	; 37
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	30 81       	ld	r19, Z
    17f4:	3a 83       	std	Y+2, r19	; 0x02
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <ADC_AdjustResult+0x60>
		break;
	case RIGHT:
		Clr_Bit(ADMUX, ADLAR);
    17f8:	a7 e2       	ldi	r26, 0x27	; 39
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e7 e2       	ldi	r30, 0x27	; 39
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8f 7d       	andi	r24, 0xDF	; 223
    1804:	8c 93       	st	X, r24
		return ADCL;
    1806:	e4 e2       	ldi	r30, 0x24	; 36
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8a 83       	std	Y+2, r24	; 0x02
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <ADC_AdjustResult+0x60>
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <ADC_AdjustResult+0x64>
		break;
	
	}

}
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	9d 83       	std	Y+5, r25	; 0x05
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <ADC_SinglePinInput>:
/*Function for bits selects which combination of analog inputs are connected to the ADC
 * This function for Single Ended Input
 * Receive Name Pin like (ADC0 or ADC1... )
 */

void ADC_SinglePinInput(u8 Pin) {
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <ADC_SinglePinInput+0x6>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
	switch (Pin) {
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3b 83       	std	Y+3, r19	; 0x03
    183e:	2a 83       	std	Y+2, r18	; 0x02
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <ADC_SinglePinInput+0x24>
    184a:	aa c0       	rjmp	.+340    	; 0x19a0 <ADC_SinglePinInput+0x178>
    184c:	2a 81       	ldd	r18, Y+2	; 0x02
    184e:	3b 81       	ldd	r19, Y+3	; 0x03
    1850:	24 30       	cpi	r18, 0x04	; 4
    1852:	31 05       	cpc	r19, r1
    1854:	8c f4       	brge	.+34     	; 0x1878 <ADC_SinglePinInput+0x50>
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9b 81       	ldd	r25, Y+3	; 0x03
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <ADC_SinglePinInput+0x3a>
    1860:	4d c0       	rjmp	.+154    	; 0x18fc <ADC_SinglePinInput+0xd4>
    1862:	2a 81       	ldd	r18, Y+2	; 0x02
    1864:	3b 81       	ldd	r19, Y+3	; 0x03
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	0c f0       	brlt	.+2      	; 0x186e <ADC_SinglePinInput+0x46>
    186c:	70 c0       	rjmp	.+224    	; 0x194e <ADC_SinglePinInput+0x126>
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	9b 81       	ldd	r25, Y+3	; 0x03
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	d1 f0       	breq	.+52     	; 0x18aa <ADC_SinglePinInput+0x82>
    1876:	60 c1       	rjmp	.+704    	; 0x1b38 <ADC_SinglePinInput+0x310>
    1878:	2a 81       	ldd	r18, Y+2	; 0x02
    187a:	3b 81       	ldd	r19, Y+3	; 0x03
    187c:	25 30       	cpi	r18, 0x05	; 5
    187e:	31 05       	cpc	r19, r1
    1880:	09 f4       	brne	.+2      	; 0x1884 <ADC_SinglePinInput+0x5c>
    1882:	e0 c0       	rjmp	.+448    	; 0x1a44 <ADC_SinglePinInput+0x21c>
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	85 30       	cpi	r24, 0x05	; 5
    188a:	91 05       	cpc	r25, r1
    188c:	0c f4       	brge	.+2      	; 0x1890 <ADC_SinglePinInput+0x68>
    188e:	b1 c0       	rjmp	.+354    	; 0x19f2 <ADC_SinglePinInput+0x1ca>
    1890:	2a 81       	ldd	r18, Y+2	; 0x02
    1892:	3b 81       	ldd	r19, Y+3	; 0x03
    1894:	26 30       	cpi	r18, 0x06	; 6
    1896:	31 05       	cpc	r19, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <ADC_SinglePinInput+0x74>
    189a:	fd c0       	rjmp	.+506    	; 0x1a96 <ADC_SinglePinInput+0x26e>
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	87 30       	cpi	r24, 0x07	; 7
    18a2:	91 05       	cpc	r25, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <ADC_SinglePinInput+0x80>
    18a6:	20 c1       	rjmp	.+576    	; 0x1ae8 <ADC_SinglePinInput+0x2c0>
    18a8:	47 c1       	rjmp	.+654    	; 0x1b38 <ADC_SinglePinInput+0x310>
	case ADC0:
		Set_PinDirection(PORTA, PIN0, INPUT);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
		Clr_Bit(ADMUX, MUX0);
    18b4:	a7 e2       	ldi	r26, 0x27	; 39
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e7 e2       	ldi	r30, 0x27	; 39
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8e 7f       	andi	r24, 0xFE	; 254
    18c0:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX1);
    18c2:	a7 e2       	ldi	r26, 0x27	; 39
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e7 e2       	ldi	r30, 0x27	; 39
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8d 7f       	andi	r24, 0xFD	; 253
    18ce:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX2);
    18d0:	a7 e2       	ldi	r26, 0x27	; 39
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e7 e2       	ldi	r30, 0x27	; 39
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8b 7f       	andi	r24, 0xFB	; 251
    18dc:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX3);
    18de:	a7 e2       	ldi	r26, 0x27	; 39
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e7 e2       	ldi	r30, 0x27	; 39
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	87 7f       	andi	r24, 0xF7	; 247
    18ea:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX4);
    18ec:	a7 e2       	ldi	r26, 0x27	; 39
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e2       	ldi	r30, 0x27	; 39
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8f 7e       	andi	r24, 0xEF	; 239
    18f8:	8c 93       	st	X, r24
    18fa:	1e c1       	rjmp	.+572    	; 0x1b38 <ADC_SinglePinInput+0x310>
		break;
	case ADC1:
		Set_PinDirection(PORTA, PIN1, INPUT);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
		Set_Bit(ADMUX, MUX0);
    1906:	a7 e2       	ldi	r26, 0x27	; 39
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e7 e2       	ldi	r30, 0x27	; 39
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	81 60       	ori	r24, 0x01	; 1
    1912:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX1);
    1914:	a7 e2       	ldi	r26, 0x27	; 39
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e7 e2       	ldi	r30, 0x27	; 39
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	8d 7f       	andi	r24, 0xFD	; 253
    1920:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX2);
    1922:	a7 e2       	ldi	r26, 0x27	; 39
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e7 e2       	ldi	r30, 0x27	; 39
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8b 7f       	andi	r24, 0xFB	; 251
    192e:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX3);
    1930:	a7 e2       	ldi	r26, 0x27	; 39
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e7 e2       	ldi	r30, 0x27	; 39
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	87 7f       	andi	r24, 0xF7	; 247
    193c:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX4);
    193e:	a7 e2       	ldi	r26, 0x27	; 39
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e7 e2       	ldi	r30, 0x27	; 39
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8f 7e       	andi	r24, 0xEF	; 239
    194a:	8c 93       	st	X, r24
    194c:	f5 c0       	rjmp	.+490    	; 0x1b38 <ADC_SinglePinInput+0x310>
		break;
	case ADC2:
		Set_PinDirection(PORTA, PIN2, INPUT);
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
		Clr_Bit(ADMUX, MUX0);
    1958:	a7 e2       	ldi	r26, 0x27	; 39
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e7 e2       	ldi	r30, 0x27	; 39
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8e 7f       	andi	r24, 0xFE	; 254
    1964:	8c 93       	st	X, r24
		Set_Bit(ADMUX, MUX1);
    1966:	a7 e2       	ldi	r26, 0x27	; 39
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e7 e2       	ldi	r30, 0x27	; 39
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	82 60       	ori	r24, 0x02	; 2
    1972:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX2);
    1974:	a7 e2       	ldi	r26, 0x27	; 39
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e7 e2       	ldi	r30, 0x27	; 39
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8b 7f       	andi	r24, 0xFB	; 251
    1980:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX3);
    1982:	a7 e2       	ldi	r26, 0x27	; 39
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e7 e2       	ldi	r30, 0x27	; 39
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	87 7f       	andi	r24, 0xF7	; 247
    198e:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX4);
    1990:	a7 e2       	ldi	r26, 0x27	; 39
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e7 e2       	ldi	r30, 0x27	; 39
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8f 7e       	andi	r24, 0xEF	; 239
    199c:	8c 93       	st	X, r24
    199e:	cc c0       	rjmp	.+408    	; 0x1b38 <ADC_SinglePinInput+0x310>
		break;
	case ADC3:
		Set_PinDirection(PORTA, PIN3, INPUT);
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	63 e0       	ldi	r22, 0x03	; 3
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
		Set_Bit(ADMUX, MUX0);
    19aa:	a7 e2       	ldi	r26, 0x27	; 39
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e7 e2       	ldi	r30, 0x27	; 39
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	81 60       	ori	r24, 0x01	; 1
    19b6:	8c 93       	st	X, r24
		Set_Bit(ADMUX, MUX1);
    19b8:	a7 e2       	ldi	r26, 0x27	; 39
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e7 e2       	ldi	r30, 0x27	; 39
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	82 60       	ori	r24, 0x02	; 2
    19c4:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX2);
    19c6:	a7 e2       	ldi	r26, 0x27	; 39
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e7 e2       	ldi	r30, 0x27	; 39
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8b 7f       	andi	r24, 0xFB	; 251
    19d2:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX3);
    19d4:	a7 e2       	ldi	r26, 0x27	; 39
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e7 e2       	ldi	r30, 0x27	; 39
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	87 7f       	andi	r24, 0xF7	; 247
    19e0:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX4);
    19e2:	a7 e2       	ldi	r26, 0x27	; 39
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e7 e2       	ldi	r30, 0x27	; 39
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8f 7e       	andi	r24, 0xEF	; 239
    19ee:	8c 93       	st	X, r24
    19f0:	a3 c0       	rjmp	.+326    	; 0x1b38 <ADC_SinglePinInput+0x310>
		break;
	case ADC4:
		Set_PinDirection(PORTA, PIN4, INPUT);
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	64 e0       	ldi	r22, 0x04	; 4
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
		Clr_Bit(ADMUX, MUX0);
    19fc:	a7 e2       	ldi	r26, 0x27	; 39
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e7 e2       	ldi	r30, 0x27	; 39
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8e 7f       	andi	r24, 0xFE	; 254
    1a08:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX1);
    1a0a:	a7 e2       	ldi	r26, 0x27	; 39
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e7 e2       	ldi	r30, 0x27	; 39
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8d 7f       	andi	r24, 0xFD	; 253
    1a16:	8c 93       	st	X, r24
		Set_Bit(ADMUX, MUX2);
    1a18:	a7 e2       	ldi	r26, 0x27	; 39
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e7 e2       	ldi	r30, 0x27	; 39
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	84 60       	ori	r24, 0x04	; 4
    1a24:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX3);
    1a26:	a7 e2       	ldi	r26, 0x27	; 39
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e7 e2       	ldi	r30, 0x27	; 39
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	87 7f       	andi	r24, 0xF7	; 247
    1a32:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX4);
    1a34:	a7 e2       	ldi	r26, 0x27	; 39
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e7 e2       	ldi	r30, 0x27	; 39
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8f 7e       	andi	r24, 0xEF	; 239
    1a40:	8c 93       	st	X, r24
    1a42:	7a c0       	rjmp	.+244    	; 0x1b38 <ADC_SinglePinInput+0x310>
		break;
	case ADC5:
		Set_PinDirection(PORTA, PIN5, INPUT);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	65 e0       	ldi	r22, 0x05	; 5
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
		Set_Bit(ADMUX, MUX0);
    1a4e:	a7 e2       	ldi	r26, 0x27	; 39
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e7 e2       	ldi	r30, 0x27	; 39
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	81 60       	ori	r24, 0x01	; 1
    1a5a:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX1);
    1a5c:	a7 e2       	ldi	r26, 0x27	; 39
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e7 e2       	ldi	r30, 0x27	; 39
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8d 7f       	andi	r24, 0xFD	; 253
    1a68:	8c 93       	st	X, r24
		Set_Bit(ADMUX, MUX2);
    1a6a:	a7 e2       	ldi	r26, 0x27	; 39
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e7 e2       	ldi	r30, 0x27	; 39
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	84 60       	ori	r24, 0x04	; 4
    1a76:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX3);
    1a78:	a7 e2       	ldi	r26, 0x27	; 39
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e7 e2       	ldi	r30, 0x27	; 39
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	87 7f       	andi	r24, 0xF7	; 247
    1a84:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX4);
    1a86:	a7 e2       	ldi	r26, 0x27	; 39
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e7 e2       	ldi	r30, 0x27	; 39
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 7e       	andi	r24, 0xEF	; 239
    1a92:	8c 93       	st	X, r24
    1a94:	51 c0       	rjmp	.+162    	; 0x1b38 <ADC_SinglePinInput+0x310>
		break;
	case ADC6:
		Set_PinDirection(PORTA, PIN6, INPUT);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	66 e0       	ldi	r22, 0x06	; 6
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
		Clr_Bit(ADMUX, MUX0);
    1aa0:	a7 e2       	ldi	r26, 0x27	; 39
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e7 e2       	ldi	r30, 0x27	; 39
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8e 7f       	andi	r24, 0xFE	; 254
    1aac:	8c 93       	st	X, r24
		Set_Bit(ADMUX, MUX1);
    1aae:	a7 e2       	ldi	r26, 0x27	; 39
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e7 e2       	ldi	r30, 0x27	; 39
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	82 60       	ori	r24, 0x02	; 2
    1aba:	8c 93       	st	X, r24
		Set_Bit(ADMUX, MUX2);
    1abc:	a7 e2       	ldi	r26, 0x27	; 39
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e7 e2       	ldi	r30, 0x27	; 39
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	84 60       	ori	r24, 0x04	; 4
    1ac8:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX3);
    1aca:	a7 e2       	ldi	r26, 0x27	; 39
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e7 e2       	ldi	r30, 0x27	; 39
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	87 7f       	andi	r24, 0xF7	; 247
    1ad6:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX4);
    1ad8:	a7 e2       	ldi	r26, 0x27	; 39
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e7 e2       	ldi	r30, 0x27	; 39
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 7e       	andi	r24, 0xEF	; 239
    1ae4:	8c 93       	st	X, r24
    1ae6:	28 c0       	rjmp	.+80     	; 0x1b38 <ADC_SinglePinInput+0x310>
		break;
	case ADC7:
		Set_PinDirection(PORTA, PIN7, INPUT);
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	67 e0       	ldi	r22, 0x07	; 7
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
		Set_Bit(ADMUX, MUX0);
    1af2:	a7 e2       	ldi	r26, 0x27	; 39
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e7 e2       	ldi	r30, 0x27	; 39
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	81 60       	ori	r24, 0x01	; 1
    1afe:	8c 93       	st	X, r24
		Set_Bit(ADMUX, MUX1);
    1b00:	a7 e2       	ldi	r26, 0x27	; 39
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e7 e2       	ldi	r30, 0x27	; 39
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	82 60       	ori	r24, 0x02	; 2
    1b0c:	8c 93       	st	X, r24
		Set_Bit(ADMUX, MUX2);
    1b0e:	a7 e2       	ldi	r26, 0x27	; 39
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e7 e2       	ldi	r30, 0x27	; 39
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	84 60       	ori	r24, 0x04	; 4
    1b1a:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX3);
    1b1c:	a7 e2       	ldi	r26, 0x27	; 39
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e7 e2       	ldi	r30, 0x27	; 39
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	87 7f       	andi	r24, 0xF7	; 247
    1b28:	8c 93       	st	X, r24
		Clr_Bit(ADMUX, MUX4);
    1b2a:	a7 e2       	ldi	r26, 0x27	; 39
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e7 e2       	ldi	r30, 0x27	; 39
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	8f 7e       	andi	r24, 0xEF	; 239
    1b36:	8c 93       	st	X, r24
		break;
	}

}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <ADC_Control>:
/*Function To Set ADC Enable or Disable
 * Receive Mode Like (ENABLE or DISABLE)
 */
void ADC_Control(u8 Mode) {
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <ADC_Control+0x6>
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	89 83       	std	Y+1, r24	; 0x01
	switch (Mode) {
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	3b 83       	std	Y+3, r19	; 0x03
    1b5a:	2a 83       	std	Y+2, r18	; 0x02
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	21 f1       	breq	.+72     	; 0x1bac <ADC_Control+0x68>
    1b64:	2a 81       	ldd	r18, Y+2	; 0x02
    1b66:	3b 81       	ldd	r19, Y+3	; 0x03
    1b68:	21 30       	cpi	r18, 0x01	; 1
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	69 f5       	brne	.+90     	; 0x1bc8 <ADC_Control+0x84>
	case ENABLE:

		Set_Bit(ADCSRA, ADEN);  //Bit Enable ADC
    1b6e:	a6 e2       	ldi	r26, 0x26	; 38
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e6 e2       	ldi	r30, 0x26	; 38
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	80 68       	ori	r24, 0x80	; 128
    1b7a:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADSC);  //Bit to Start Conversion Mode
    1b7c:	a6 e2       	ldi	r26, 0x26	; 38
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e6 e2       	ldi	r30, 0x26	; 38
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 64       	ori	r24, 0x40	; 64
    1b88:	8c 93       	st	X, r24
		while (Get_Bit(ADCSRA,ADIF) == 0)
    1b8a:	e6 e2       	ldi	r30, 0x26	; 38
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	80 71       	andi	r24, 0x10	; 16
    1b96:	90 70       	andi	r25, 0x00	; 0
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	b9 f3       	breq	.-18     	; 0x1b8a <ADC_Control+0x46>
			//set flag on of interrupt
			;
		Set_Bit(ADCSRA, ADIF); //clear flag
    1b9c:	a6 e2       	ldi	r26, 0x26	; 38
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e6 e2       	ldi	r30, 0x26	; 38
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	80 61       	ori	r24, 0x10	; 16
    1ba8:	8c 93       	st	X, r24
    1baa:	0e c0       	rjmp	.+28     	; 0x1bc8 <ADC_Control+0x84>
		break;
	case DISABLE:
		Clr_Bit(ADCSRA, ADEN);
    1bac:	a6 e2       	ldi	r26, 0x26	; 38
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e6 e2       	ldi	r30, 0x26	; 38
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8f 77       	andi	r24, 0x7F	; 127
    1bb8:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADSC);
    1bba:	a6 e2       	ldi	r26, 0x26	; 38
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e6 e2       	ldi	r30, 0x26	; 38
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 7b       	andi	r24, 0xBF	; 191
    1bc6:	8c 93       	st	X, r24
		break;

	}

}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <ADC_DivisionFactor>:
/*Function determine the division factor between the XTAL frequency and the input clock to the ADC
 *Receive Mode Based On Factor  like (FACTOR_2 or FACTOR_128..)
 */

void ADC_DivisionFactor(u8 Mode) {
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <ADC_DivisionFactor+0x6>
    1bda:	0f 92       	push	r0
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	89 83       	std	Y+1, r24	; 0x01
	switch (Mode) {
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	3b 83       	std	Y+3, r19	; 0x03
    1bea:	2a 83       	std	Y+2, r18	; 0x02
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <ADC_DivisionFactor+0x24>
    1bf6:	70 c0       	rjmp	.+224    	; 0x1cd8 <ADC_DivisionFactor+0x104>
    1bf8:	2a 81       	ldd	r18, Y+2	; 0x02
    1bfa:	3b 81       	ldd	r19, Y+3	; 0x03
    1bfc:	24 30       	cpi	r18, 0x04	; 4
    1bfe:	31 05       	cpc	r19, r1
    1c00:	84 f4       	brge	.+32     	; 0x1c22 <ADC_DivisionFactor+0x4e>
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	9b 81       	ldd	r25, Y+3	; 0x03
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	91 05       	cpc	r25, r1
    1c0a:	d1 f1       	breq	.+116    	; 0x1c80 <ADC_DivisionFactor+0xac>
    1c0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	0c f0       	brlt	.+2      	; 0x1c18 <ADC_DivisionFactor+0x44>
    1c16:	4a c0       	rjmp	.+148    	; 0x1cac <ADC_DivisionFactor+0xd8>
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	d1 f0       	breq	.+52     	; 0x1c54 <ADC_DivisionFactor+0x80>
    1c20:	c8 c0       	rjmp	.+400    	; 0x1db2 <ADC_DivisionFactor+0x1de>
    1c22:	2a 81       	ldd	r18, Y+2	; 0x02
    1c24:	3b 81       	ldd	r19, Y+3	; 0x03
    1c26:	25 30       	cpi	r18, 0x05	; 5
    1c28:	31 05       	cpc	r19, r1
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <ADC_DivisionFactor+0x5a>
    1c2c:	81 c0       	rjmp	.+258    	; 0x1d30 <ADC_DivisionFactor+0x15c>
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	9b 81       	ldd	r25, Y+3	; 0x03
    1c32:	85 30       	cpi	r24, 0x05	; 5
    1c34:	91 05       	cpc	r25, r1
    1c36:	0c f4       	brge	.+2      	; 0x1c3a <ADC_DivisionFactor+0x66>
    1c38:	65 c0       	rjmp	.+202    	; 0x1d04 <ADC_DivisionFactor+0x130>
    1c3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c3e:	26 30       	cpi	r18, 0x06	; 6
    1c40:	31 05       	cpc	r19, r1
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <ADC_DivisionFactor+0x72>
    1c44:	8b c0       	rjmp	.+278    	; 0x1d5c <ADC_DivisionFactor+0x188>
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	87 30       	cpi	r24, 0x07	; 7
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <ADC_DivisionFactor+0x7e>
    1c50:	9b c0       	rjmp	.+310    	; 0x1d88 <ADC_DivisionFactor+0x1b4>
    1c52:	af c0       	rjmp	.+350    	; 0x1db2 <ADC_DivisionFactor+0x1de>
	case FACTOR_0: //Factor 2
		Clr_Bit(ADCSRA, ADPS0);
    1c54:	a6 e2       	ldi	r26, 0x26	; 38
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e6 e2       	ldi	r30, 0x26	; 38
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8e 7f       	andi	r24, 0xFE	; 254
    1c60:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADPS1);
    1c62:	a6 e2       	ldi	r26, 0x26	; 38
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e6 e2       	ldi	r30, 0x26	; 38
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8d 7f       	andi	r24, 0xFD	; 253
    1c6e:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADPS2);
    1c70:	a6 e2       	ldi	r26, 0x26	; 38
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e6 e2       	ldi	r30, 0x26	; 38
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8b 7f       	andi	r24, 0xFB	; 251
    1c7c:	8c 93       	st	X, r24
    1c7e:	99 c0       	rjmp	.+306    	; 0x1db2 <ADC_DivisionFactor+0x1de>
		break;
	case FACTOR_2: //Factor 2
		Set_Bit(ADCSRA, ADPS0);
    1c80:	a6 e2       	ldi	r26, 0x26	; 38
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e6 e2       	ldi	r30, 0x26	; 38
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	81 60       	ori	r24, 0x01	; 1
    1c8c:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADPS1);
    1c8e:	a6 e2       	ldi	r26, 0x26	; 38
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e6 e2       	ldi	r30, 0x26	; 38
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8d 7f       	andi	r24, 0xFD	; 253
    1c9a:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADPS2);
    1c9c:	a6 e2       	ldi	r26, 0x26	; 38
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e6 e2       	ldi	r30, 0x26	; 38
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8b 7f       	andi	r24, 0xFB	; 251
    1ca8:	8c 93       	st	X, r24
    1caa:	83 c0       	rjmp	.+262    	; 0x1db2 <ADC_DivisionFactor+0x1de>
		break;
	case FACTOR_4: //Factor 4
		Clr_Bit(ADCSRA, ADPS0);
    1cac:	a6 e2       	ldi	r26, 0x26	; 38
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e6 e2       	ldi	r30, 0x26	; 38
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8e 7f       	andi	r24, 0xFE	; 254
    1cb8:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADPS1);
    1cba:	a6 e2       	ldi	r26, 0x26	; 38
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e6 e2       	ldi	r30, 0x26	; 38
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	82 60       	ori	r24, 0x02	; 2
    1cc6:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADPS2);
    1cc8:	a6 e2       	ldi	r26, 0x26	; 38
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e6 e2       	ldi	r30, 0x26	; 38
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8b 7f       	andi	r24, 0xFB	; 251
    1cd4:	8c 93       	st	X, r24
    1cd6:	6d c0       	rjmp	.+218    	; 0x1db2 <ADC_DivisionFactor+0x1de>
		break;
	case FACTOR_8:
		Set_Bit(ADCSRA, ADPS0);
    1cd8:	a6 e2       	ldi	r26, 0x26	; 38
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e6 e2       	ldi	r30, 0x26	; 38
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADPS1);
    1ce6:	a6 e2       	ldi	r26, 0x26	; 38
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e6 e2       	ldi	r30, 0x26	; 38
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	82 60       	ori	r24, 0x02	; 2
    1cf2:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADPS2);
    1cf4:	a6 e2       	ldi	r26, 0x26	; 38
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e6 e2       	ldi	r30, 0x26	; 38
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8b 7f       	andi	r24, 0xFB	; 251
    1d00:	8c 93       	st	X, r24
    1d02:	57 c0       	rjmp	.+174    	; 0x1db2 <ADC_DivisionFactor+0x1de>
		break;
	case FACTOR_16:
		Clr_Bit(ADCSRA, ADPS0);
    1d04:	a6 e2       	ldi	r26, 0x26	; 38
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e6 e2       	ldi	r30, 0x26	; 38
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	8e 7f       	andi	r24, 0xFE	; 254
    1d10:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADPS1);
    1d12:	a6 e2       	ldi	r26, 0x26	; 38
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e6 e2       	ldi	r30, 0x26	; 38
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8d 7f       	andi	r24, 0xFD	; 253
    1d1e:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADPS2);
    1d20:	a6 e2       	ldi	r26, 0x26	; 38
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e6 e2       	ldi	r30, 0x26	; 38
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	84 60       	ori	r24, 0x04	; 4
    1d2c:	8c 93       	st	X, r24
    1d2e:	41 c0       	rjmp	.+130    	; 0x1db2 <ADC_DivisionFactor+0x1de>
		break;
	case FACTOR_32:
		Set_Bit(ADCSRA, ADPS0);
    1d30:	a6 e2       	ldi	r26, 0x26	; 38
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e6 e2       	ldi	r30, 0x26	; 38
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	81 60       	ori	r24, 0x01	; 1
    1d3c:	8c 93       	st	X, r24
		Clr_Bit(ADCSRA, ADPS1);
    1d3e:	a6 e2       	ldi	r26, 0x26	; 38
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e6 e2       	ldi	r30, 0x26	; 38
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	8d 7f       	andi	r24, 0xFD	; 253
    1d4a:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADPS2);
    1d4c:	a6 e2       	ldi	r26, 0x26	; 38
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e6 e2       	ldi	r30, 0x26	; 38
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	84 60       	ori	r24, 0x04	; 4
    1d58:	8c 93       	st	X, r24
    1d5a:	2b c0       	rjmp	.+86     	; 0x1db2 <ADC_DivisionFactor+0x1de>
		break;
	case FACTOR_64:
		Clr_Bit(ADCSRA, ADPS0);
    1d5c:	a6 e2       	ldi	r26, 0x26	; 38
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e6 e2       	ldi	r30, 0x26	; 38
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	8e 7f       	andi	r24, 0xFE	; 254
    1d68:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADPS1);
    1d6a:	a6 e2       	ldi	r26, 0x26	; 38
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e6 e2       	ldi	r30, 0x26	; 38
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	82 60       	ori	r24, 0x02	; 2
    1d76:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADPS2);
    1d78:	a6 e2       	ldi	r26, 0x26	; 38
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e6 e2       	ldi	r30, 0x26	; 38
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	84 60       	ori	r24, 0x04	; 4
    1d84:	8c 93       	st	X, r24
    1d86:	15 c0       	rjmp	.+42     	; 0x1db2 <ADC_DivisionFactor+0x1de>
		break;
	case FACTOR_128:
		Set_Bit(ADCSRA, ADPS0);
    1d88:	a6 e2       	ldi	r26, 0x26	; 38
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e6 e2       	ldi	r30, 0x26	; 38
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	81 60       	ori	r24, 0x01	; 1
    1d94:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADPS1);
    1d96:	a6 e2       	ldi	r26, 0x26	; 38
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e6 e2       	ldi	r30, 0x26	; 38
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	8c 93       	st	X, r24
		Set_Bit(ADCSRA, ADPS2);
    1da4:	a6 e2       	ldi	r26, 0x26	; 38
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e6 e2       	ldi	r30, 0x26	; 38
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	84 60       	ori	r24, 0x04	; 4
    1db0:	8c 93       	st	X, r24
		break;
	}

}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <ADC_TriggerSourc>:

/*Function To Special Function Auto Trigger Source
 * Receive Mode like (FREE_RUN or ANALOGE_COMP  ...)
 */
void ADC_TriggerSourc(u8 Mode) {
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <ADC_TriggerSourc+0x6>
    1dc4:	0f 92       	push	r0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
	switch (Mode) {
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3b 83       	std	Y+3, r19	; 0x03
    1dd4:	2a 83       	std	Y+2, r18	; 0x02
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	91 05       	cpc	r25, r1
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <ADC_TriggerSourc+0x24>
    1de0:	70 c0       	rjmp	.+224    	; 0x1ec2 <ADC_TriggerSourc+0x104>
    1de2:	2a 81       	ldd	r18, Y+2	; 0x02
    1de4:	3b 81       	ldd	r19, Y+3	; 0x03
    1de6:	24 30       	cpi	r18, 0x04	; 4
    1de8:	31 05       	cpc	r19, r1
    1dea:	84 f4       	brge	.+32     	; 0x1e0c <ADC_TriggerSourc+0x4e>
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	9b 81       	ldd	r25, Y+3	; 0x03
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	91 05       	cpc	r25, r1
    1df4:	d1 f1       	breq	.+116    	; 0x1e6a <ADC_TriggerSourc+0xac>
    1df6:	2a 81       	ldd	r18, Y+2	; 0x02
    1df8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	0c f0       	brlt	.+2      	; 0x1e02 <ADC_TriggerSourc+0x44>
    1e00:	4a c0       	rjmp	.+148    	; 0x1e96 <ADC_TriggerSourc+0xd8>
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	d1 f0       	breq	.+52     	; 0x1e3e <ADC_TriggerSourc+0x80>
    1e0a:	c8 c0       	rjmp	.+400    	; 0x1f9c <ADC_TriggerSourc+0x1de>
    1e0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e10:	25 30       	cpi	r18, 0x05	; 5
    1e12:	31 05       	cpc	r19, r1
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <ADC_TriggerSourc+0x5a>
    1e16:	81 c0       	rjmp	.+258    	; 0x1f1a <ADC_TriggerSourc+0x15c>
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1c:	85 30       	cpi	r24, 0x05	; 5
    1e1e:	91 05       	cpc	r25, r1
    1e20:	0c f4       	brge	.+2      	; 0x1e24 <ADC_TriggerSourc+0x66>
    1e22:	65 c0       	rjmp	.+202    	; 0x1eee <ADC_TriggerSourc+0x130>
    1e24:	2a 81       	ldd	r18, Y+2	; 0x02
    1e26:	3b 81       	ldd	r19, Y+3	; 0x03
    1e28:	26 30       	cpi	r18, 0x06	; 6
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <ADC_TriggerSourc+0x72>
    1e2e:	8b c0       	rjmp	.+278    	; 0x1f46 <ADC_TriggerSourc+0x188>
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	9b 81       	ldd	r25, Y+3	; 0x03
    1e34:	87 30       	cpi	r24, 0x07	; 7
    1e36:	91 05       	cpc	r25, r1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <ADC_TriggerSourc+0x7e>
    1e3a:	9b c0       	rjmp	.+310    	; 0x1f72 <ADC_TriggerSourc+0x1b4>
    1e3c:	af c0       	rjmp	.+350    	; 0x1f9c <ADC_TriggerSourc+0x1de>
	case FREE_RUN:
		Clr_Bit(SFIOR, ADTS0);
    1e3e:	a0 e5       	ldi	r26, 0x50	; 80
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e0 e5       	ldi	r30, 0x50	; 80
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8f 7d       	andi	r24, 0xDF	; 223
    1e4a:	8c 93       	st	X, r24
		Clr_Bit(SFIOR, ADTS1);
    1e4c:	a0 e5       	ldi	r26, 0x50	; 80
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e0 e5       	ldi	r30, 0x50	; 80
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8f 7b       	andi	r24, 0xBF	; 191
    1e58:	8c 93       	st	X, r24
		Clr_Bit(SFIOR, ADTS2);
    1e5a:	a0 e5       	ldi	r26, 0x50	; 80
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e0 e5       	ldi	r30, 0x50	; 80
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 77       	andi	r24, 0x7F	; 127
    1e66:	8c 93       	st	X, r24
    1e68:	99 c0       	rjmp	.+306    	; 0x1f9c <ADC_TriggerSourc+0x1de>
		break;
	case ANALOGE_COMP:
		Set_Bit(SFIOR, ADTS0);
    1e6a:	a0 e5       	ldi	r26, 0x50	; 80
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e0 e5       	ldi	r30, 0x50	; 80
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	80 62       	ori	r24, 0x20	; 32
    1e76:	8c 93       	st	X, r24
		Clr_Bit(SFIOR, ADTS1);
    1e78:	a0 e5       	ldi	r26, 0x50	; 80
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e0 e5       	ldi	r30, 0x50	; 80
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8f 7b       	andi	r24, 0xBF	; 191
    1e84:	8c 93       	st	X, r24
		Clr_Bit(SFIOR, ADTS2);
    1e86:	a0 e5       	ldi	r26, 0x50	; 80
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e0 e5       	ldi	r30, 0x50	; 80
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	8f 77       	andi	r24, 0x7F	; 127
    1e92:	8c 93       	st	X, r24
    1e94:	83 c0       	rjmp	.+262    	; 0x1f9c <ADC_TriggerSourc+0x1de>
		break;
	case EXTER_INT_0:
		Clr_Bit(SFIOR, ADTS0);
    1e96:	a0 e5       	ldi	r26, 0x50	; 80
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e0 e5       	ldi	r30, 0x50	; 80
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8f 7d       	andi	r24, 0xDF	; 223
    1ea2:	8c 93       	st	X, r24
		Set_Bit(SFIOR, ADTS1);
    1ea4:	a0 e5       	ldi	r26, 0x50	; 80
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e0 e5       	ldi	r30, 0x50	; 80
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	80 64       	ori	r24, 0x40	; 64
    1eb0:	8c 93       	st	X, r24
		Clr_Bit(SFIOR, ADTS2);
    1eb2:	a0 e5       	ldi	r26, 0x50	; 80
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e0 e5       	ldi	r30, 0x50	; 80
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 77       	andi	r24, 0x7F	; 127
    1ebe:	8c 93       	st	X, r24
    1ec0:	6d c0       	rjmp	.+218    	; 0x1f9c <ADC_TriggerSourc+0x1de>
		break;
	case TIMER0_COMPARE:
		Set_Bit(SFIOR, ADTS0);
    1ec2:	a0 e5       	ldi	r26, 0x50	; 80
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e0 e5       	ldi	r30, 0x50	; 80
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 62       	ori	r24, 0x20	; 32
    1ece:	8c 93       	st	X, r24
		Set_Bit(SFIOR, ADTS1);
    1ed0:	a0 e5       	ldi	r26, 0x50	; 80
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e0 e5       	ldi	r30, 0x50	; 80
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 64       	ori	r24, 0x40	; 64
    1edc:	8c 93       	st	X, r24
		Clr_Bit(SFIOR, ADTS2);
    1ede:	a0 e5       	ldi	r26, 0x50	; 80
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e0 e5       	ldi	r30, 0x50	; 80
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8f 77       	andi	r24, 0x7F	; 127
    1eea:	8c 93       	st	X, r24
    1eec:	57 c0       	rjmp	.+174    	; 0x1f9c <ADC_TriggerSourc+0x1de>
		break;
	case TIMER0_OVERFLOW:
		Clr_Bit(SFIOR, ADTS0);
    1eee:	a0 e5       	ldi	r26, 0x50	; 80
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e0 e5       	ldi	r30, 0x50	; 80
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	8f 7d       	andi	r24, 0xDF	; 223
    1efa:	8c 93       	st	X, r24
		Clr_Bit(SFIOR, ADTS1);
    1efc:	a0 e5       	ldi	r26, 0x50	; 80
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e0 e5       	ldi	r30, 0x50	; 80
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	8f 7b       	andi	r24, 0xBF	; 191
    1f08:	8c 93       	st	X, r24
		Set_Bit(SFIOR, ADTS2);
    1f0a:	a0 e5       	ldi	r26, 0x50	; 80
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e0 e5       	ldi	r30, 0x50	; 80
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	80 68       	ori	r24, 0x80	; 128
    1f16:	8c 93       	st	X, r24
    1f18:	41 c0       	rjmp	.+130    	; 0x1f9c <ADC_TriggerSourc+0x1de>
		break;
	case TIMER1_COMPERA_B:
		Set_Bit(SFIOR, ADTS0);
    1f1a:	a0 e5       	ldi	r26, 0x50	; 80
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e0 e5       	ldi	r30, 0x50	; 80
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	80 62       	ori	r24, 0x20	; 32
    1f26:	8c 93       	st	X, r24
		Clr_Bit(SFIOR, ADTS1);
    1f28:	a0 e5       	ldi	r26, 0x50	; 80
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e0 e5       	ldi	r30, 0x50	; 80
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	8f 7b       	andi	r24, 0xBF	; 191
    1f34:	8c 93       	st	X, r24
		Set_Bit(SFIOR, ADTS2);
    1f36:	a0 e5       	ldi	r26, 0x50	; 80
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e0 e5       	ldi	r30, 0x50	; 80
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	80 68       	ori	r24, 0x80	; 128
    1f42:	8c 93       	st	X, r24
    1f44:	2b c0       	rjmp	.+86     	; 0x1f9c <ADC_TriggerSourc+0x1de>
		break;

	case ITMER1_OVERFLOW:
		Clr_Bit(SFIOR, ADTS0);
    1f46:	a0 e5       	ldi	r26, 0x50	; 80
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e0 e5       	ldi	r30, 0x50	; 80
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	8f 7d       	andi	r24, 0xDF	; 223
    1f52:	8c 93       	st	X, r24
		Set_Bit(SFIOR, ADTS1);
    1f54:	a0 e5       	ldi	r26, 0x50	; 80
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 e5       	ldi	r30, 0x50	; 80
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	80 64       	ori	r24, 0x40	; 64
    1f60:	8c 93       	st	X, r24
		Set_Bit(SFIOR, ADTS2);
    1f62:	a0 e5       	ldi	r26, 0x50	; 80
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e0 e5       	ldi	r30, 0x50	; 80
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 68       	ori	r24, 0x80	; 128
    1f6e:	8c 93       	st	X, r24
    1f70:	15 c0       	rjmp	.+42     	; 0x1f9c <ADC_TriggerSourc+0x1de>
		break;

	case TIMER1_CAPUTURE:
	    Set_Bit(SFIOR,ADTS0);
    1f72:	a0 e5       	ldi	r26, 0x50	; 80
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e0 e5       	ldi	r30, 0x50	; 80
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	80 62       	ori	r24, 0x20	; 32
    1f7e:	8c 93       	st	X, r24
		Set_Bit(SFIOR, ADTS1);
    1f80:	a0 e5       	ldi	r26, 0x50	; 80
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e0 e5       	ldi	r30, 0x50	; 80
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	80 64       	ori	r24, 0x40	; 64
    1f8c:	8c 93       	st	X, r24
		Set_Bit(SFIOR, ADTS2);
    1f8e:	a0 e5       	ldi	r26, 0x50	; 80
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e0 e5       	ldi	r30, 0x50	; 80
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	80 68       	ori	r24, 0x80	; 128
    1f9a:	8c 93       	st	X, r24
	break;

}
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <SelfRead>:
 * Receive Channal Name like (ADC0 or ADC1 ..)
 * Voltage refernce is AVCC
 * Adjust result is LEFT
 * 
 */
u8 SelfRead(u8 CHANNAL) {
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	0f 92       	push	r0
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	89 83       	std	Y+1, r24	; 0x01
	ADC_Control(ENABLE);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ADC_Control>
	ADC_VoltageRef(AVCC);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <ADC_VoltageRef>
	ADC_SinglePinInput(CHANNAL);
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	0e 94 14 0c 	call	0x1828	; 0x1828 <ADC_SinglePinInput>
	return ADC_AdjustResult(LEFT);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <ADC_AdjustResult>

}
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <SensorLM35>:
 * Receive Channal Name like (ADC0 or ADC1.. )
 * Voltage reference is AVCC and Adjust result is LEFT
 * return equation to calculate value of sensor
 *
 */
u8 SensorLM35(u8 CHANNAL) {
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01

	//ADC_Init();
	ADC_Control(ENABLE);
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ADC_Control>
	ADC_VoltageRef(AREF_IN);
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <ADC_VoltageRef>
	//ADC_DivisionFactor(FACTOR_128);
	ADC_SinglePinInput(CHANNAL);
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	0e 94 14 0c 	call	0x1828	; 0x1828 <ADC_SinglePinInput>
	return ADC_AdjustResult(LEFT);
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <ADC_AdjustResult>


}
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <LED_ON>:

/*Used for make led ON
 *Receive PORT name
 *Receive PIN Number
 */
void LED_ON(u8 PORT, u8 PIN) {
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <LED_ON+0x6>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	6a 83       	std	Y+2, r22	; 0x02
	Set_PinDirection(PORT, PIN, OUTPUT);
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	6a 81       	ldd	r22, Y+2	; 0x02
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
	Set_PinValue(PORT, PIN, HIGH);
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	6a 81       	ldd	r22, Y+2	; 0x02
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>

}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <LED_OFF>:
/*Used for make led OFF
 *Receive PORT name
 *Receive PIN Number
 */

void LED_OFF(u8 PORT, u8 PIN) {
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <LED_OFF+0x6>
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	6a 83       	std	Y+2, r22	; 0x02
	Set_PinDirection(PORT, PIN, OUTPUT);
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	6a 81       	ldd	r22, Y+2	; 0x02
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
	Set_PinValue(PORT, PIN, LOW);
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	6a 81       	ldd	r22, Y+2	; 0x02
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>

}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <LED_Delay>:
 *Receive PORT name
 *Receive PIN Number
 *Receive and Delay time
 */

void LED_Delay(u8 PORT, u8 PIN, u8 Delay) {
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	6f 97       	sbiw	r28, 0x1f	; 31
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	8d 8f       	std	Y+29, r24	; 0x1d
    206e:	6e 8f       	std	Y+30, r22	; 0x1e
    2070:	4f 8f       	std	Y+31, r20	; 0x1f
	Set_PinDirection(PORT, PIN, OUTPUT);
    2072:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2074:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>

	Set_PinValue(PORT, PIN, HIGH);
    207c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    207e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
	_delay_ms(Delay);
    2086:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	89 8f       	std	Y+25, r24	; 0x19
    209e:	9a 8f       	std	Y+26, r25	; 0x1a
    20a0:	ab 8f       	std	Y+27, r26	; 0x1b
    20a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	69 8d       	ldd	r22, Y+25	; 0x19
    20a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a ef       	ldi	r20, 0xFA	; 250
    20b2:	54 e4       	ldi	r21, 0x44	; 68
    20b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8d 8b       	std	Y+21, r24	; 0x15
    20be:	9e 8b       	std	Y+22, r25	; 0x16
    20c0:	af 8b       	std	Y+23, r26	; 0x17
    20c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <LED_Delay+0x8e>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <LED_Delay+0x10c>
	else if (__tmp > 65535)
    20e6:	6d 89       	ldd	r22, Y+21	; 0x15
    20e8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ea:	8f 89       	ldd	r24, Y+23	; 0x17
    20ec:	98 8d       	ldd	r25, Y+24	; 0x18
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <LED_Delay+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <LED_Delay+0xee>
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9a 8b       	std	Y+18, r25	; 0x12
    212e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2130:	89 89       	ldd	r24, Y+17	; 0x11
    2132:	9a 89       	ldd	r25, Y+18	; 0x12
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LED_Delay+0xdc>
    2138:	9a 8b       	std	Y+18, r25	; 0x12
    213a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8b 89       	ldd	r24, Y+19	; 0x13
    2148:	9c 89       	ldd	r25, Y+20	; 0x14
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <LED_Delay+0xd0>
    214e:	14 c0       	rjmp	.+40     	; 0x2178 <LED_Delay+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6d 89       	ldd	r22, Y+21	; 0x15
    2152:	7e 89       	ldd	r23, Y+22	; 0x16
    2154:	8f 89       	ldd	r24, Y+23	; 0x17
    2156:	98 8d       	ldd	r25, Y+24	; 0x18
    2158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	8b 8b       	std	Y+19, r24	; 0x13
    2164:	8b 89       	ldd	r24, Y+19	; 0x13
    2166:	9c 89       	ldd	r25, Y+20	; 0x14
    2168:	98 8b       	std	Y+16, r25	; 0x10
    216a:	8f 87       	std	Y+15, r24	; 0x0f
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	98 89       	ldd	r25, Y+16	; 0x10
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <LED_Delay+0x118>
    2174:	98 8b       	std	Y+16, r25	; 0x10
    2176:	8f 87       	std	Y+15, r24	; 0x0f
	Set_PinValue(PORT, PIN, LOW);
    2178:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
	_delay_ms(Delay);
    2182:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 e0       	ldi	r26, 0x00	; 0
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8b 87       	std	Y+11, r24	; 0x0b
    219a:	9c 87       	std	Y+12, r25	; 0x0c
    219c:	ad 87       	std	Y+13, r26	; 0x0d
    219e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	4a ef       	ldi	r20, 0xFA	; 250
    21ae:	54 e4       	ldi	r21, 0x44	; 68
    21b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8f 83       	std	Y+7, r24	; 0x07
    21ba:	98 87       	std	Y+8, r25	; 0x08
    21bc:	a9 87       	std	Y+9, r26	; 0x09
    21be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c0:	6f 81       	ldd	r22, Y+7	; 0x07
    21c2:	78 85       	ldd	r23, Y+8	; 0x08
    21c4:	89 85       	ldd	r24, Y+9	; 0x09
    21c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <LED_Delay+0x18a>
		__ticks = 1;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <LED_Delay+0x208>
	else if (__tmp > 65535)
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	57 e4       	ldi	r21, 0x47	; 71
    21f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	4c f5       	brge	.+82     	; 0x224c <LED_Delay+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2200:	9e 85       	ldd	r25, Y+14	; 0x0e
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e2       	ldi	r20, 0x20	; 32
    2208:	51 e4       	ldi	r21, 0x41	; 65
    220a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	0f c0       	rjmp	.+30     	; 0x2242 <LED_Delay+0x1ea>
    2224:	88 ec       	ldi	r24, 0xC8	; 200
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9c 83       	std	Y+4, r25	; 0x04
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LED_Delay+0x1d8>
    2234:	9c 83       	std	Y+4, r25	; 0x04
    2236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	69 f7       	brne	.-38     	; 0x2224 <LED_Delay+0x1cc>
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <LED_Delay+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	8d 81       	ldd	r24, Y+5	; 0x05
    2262:	9e 81       	ldd	r25, Y+6	; 0x06
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LED_Delay+0x214>
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
}
    2274:	6f 96       	adiw	r28, 0x1f	; 31
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <LED_Port>:
/*Used for make Full PORT ON OR OFF
 *Receive PORT name
 *Receive PORT Value
 */

void LED_Port(u8 PORT, u8 Value) {
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	00 d0       	rcall	.+0      	; 0x228c <LED_Port+0x6>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	6a 83       	std	Y+2, r22	; 0x02
	Set_PortDirection(PORT, OUTPUT);
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	0e 94 92 09 	call	0x1324	; 0x1324 <Set_PortDirection>
	Set_PortValue(PORT, Value);
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	6a 81       	ldd	r22, Y+2	; 0x02
    22a0:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>

}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <LED_PortDelay>:
/*Used for make Full PORT ON and OFF with Delay
 *Receive PORT name
 *Receive Delay Value
 */

void LED_PortDelay(u8 PORT, u8 Delay) {
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	6e 97       	sbiw	r28, 0x1e	; 30
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	8d 8f       	std	Y+29, r24	; 0x1d
    22c4:	6e 8f       	std	Y+30, r22	; 0x1e
	Set_PortDirection(PORT, OUTPUT);
    22c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c8:	61 e0       	ldi	r22, 0x01	; 1
    22ca:	0e 94 92 09 	call	0x1324	; 0x1324 <Set_PortDirection>

	Set_PortValue(PORT, HIGH);
    22ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>
	_delay_ms(Delay);
    22d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 e0       	ldi	r26, 0x00	; 0
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	89 8f       	std	Y+25, r24	; 0x19
    22ee:	9a 8f       	std	Y+26, r25	; 0x1a
    22f0:	ab 8f       	std	Y+27, r26	; 0x1b
    22f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	69 8d       	ldd	r22, Y+25	; 0x19
    22f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a ef       	ldi	r20, 0xFA	; 250
    2302:	54 e4       	ldi	r21, 0x44	; 68
    2304:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8d 8b       	std	Y+21, r24	; 0x15
    230e:	9e 8b       	std	Y+22, r25	; 0x16
    2310:	af 8b       	std	Y+23, r26	; 0x17
    2312:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <LED_PortDelay+0x88>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <LED_PortDelay+0x106>
	else if (__tmp > 65535)
    2336:	6d 89       	ldd	r22, Y+21	; 0x15
    2338:	7e 89       	ldd	r23, Y+22	; 0x16
    233a:	8f 89       	ldd	r24, Y+23	; 0x17
    233c:	98 8d       	ldd	r25, Y+24	; 0x18
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <LED_PortDelay+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	69 8d       	ldd	r22, Y+25	; 0x19
    2350:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9c 8b       	std	Y+20, r25	; 0x14
    2374:	8b 8b       	std	Y+19, r24	; 0x13
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <LED_PortDelay+0xe8>
    2378:	88 ec       	ldi	r24, 0xC8	; 200
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9a 8b       	std	Y+18, r25	; 0x12
    237e:	89 8b       	std	Y+17, r24	; 0x11
    2380:	89 89       	ldd	r24, Y+17	; 0x11
    2382:	9a 89       	ldd	r25, Y+18	; 0x12
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LED_PortDelay+0xd6>
    2388:	9a 8b       	std	Y+18, r25	; 0x12
    238a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <LED_PortDelay+0xca>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <LED_PortDelay+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6d 89       	ldd	r22, Y+21	; 0x15
    23a2:	7e 89       	ldd	r23, Y+22	; 0x16
    23a4:	8f 89       	ldd	r24, Y+23	; 0x17
    23a6:	98 8d       	ldd	r25, Y+24	; 0x18
    23a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9c 8b       	std	Y+20, r25	; 0x14
    23b2:	8b 8b       	std	Y+19, r24	; 0x13
    23b4:	8b 89       	ldd	r24, Y+19	; 0x13
    23b6:	9c 89       	ldd	r25, Y+20	; 0x14
    23b8:	98 8b       	std	Y+16, r25	; 0x10
    23ba:	8f 87       	std	Y+15, r24	; 0x0f
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	98 89       	ldd	r25, Y+16	; 0x10
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LED_PortDelay+0x112>
    23c4:	98 8b       	std	Y+16, r25	; 0x10
    23c6:	8f 87       	std	Y+15, r24	; 0x0f
	Set_PortValue(PORT, LOW);
    23c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>
	_delay_ms(Delay);
    23d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e0       	ldi	r26, 0x00	; 0
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	8b 87       	std	Y+11, r24	; 0x0b
    23e8:	9c 87       	std	Y+12, r25	; 0x0c
    23ea:	ad 87       	std	Y+13, r26	; 0x0d
    23ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a ef       	ldi	r20, 0xFA	; 250
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8f 83       	std	Y+7, r24	; 0x07
    2408:	98 87       	std	Y+8, r25	; 0x08
    240a:	a9 87       	std	Y+9, r26	; 0x09
    240c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <LED_PortDelay+0x182>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <LED_PortDelay+0x200>
	else if (__tmp > 65535)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	57 e4       	ldi	r21, 0x47	; 71
    2440:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <LED_PortDelay+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <LED_PortDelay+0x1e2>
    2472:	88 ec       	ldi	r24, 0xC8	; 200
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9c 83       	std	Y+4, r25	; 0x04
    2478:	8b 83       	std	Y+3, r24	; 0x03
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LED_PortDelay+0x1d0>
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <LED_PortDelay+0x1c4>
    2498:	14 c0       	rjmp	.+40     	; 0x24c2 <LED_PortDelay+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	9a 83       	std	Y+2, r25	; 0x02
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LED_PortDelay+0x20c>
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01


}
    24c2:	6e 96       	adiw	r28, 0x1e	; 30
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <LED_Switch>:
 * Receive Delay you Want
 *
 */


void LED_Switch(u8 PORT, u8 Delay) {
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	c2 5e       	subi	r28, 0xE2	; 226
    24e2:	d0 40       	sbci	r29, 0x00	; 0
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	fe 01       	movw	r30, r28
    24f0:	ef 51       	subi	r30, 0x1F	; 31
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 83       	st	Z, r24
    24f6:	fe 01       	movw	r30, r28
    24f8:	ee 51       	subi	r30, 0x1E	; 30
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	60 83       	st	Z, r22
	LED_ON(PORT, PIN0);
    24fe:	fe 01       	movw	r30, r28
    2500:	ef 51       	subi	r30, 0x1F	; 31
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
	_delay_ms(Delay);
    250c:	fe 01       	movw	r30, r28
    250e:	ee 51       	subi	r30, 0x1E	; 30
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	a0 e0       	ldi	r26, 0x00	; 0
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	fe 01       	movw	r30, r28
    252a:	e3 52       	subi	r30, 0x23	; 35
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 83       	st	Z, r24
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	a2 83       	std	Z+2, r26	; 0x02
    2534:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2536:	8e 01       	movw	r16, r28
    2538:	07 52       	subi	r16, 0x27	; 39
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	fe 01       	movw	r30, r28
    253e:	e3 52       	subi	r30, 0x23	; 35
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	4a ef       	ldi	r20, 0xFA	; 250
    2550:	54 e4       	ldi	r21, 0x44	; 68
    2552:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	f8 01       	movw	r30, r16
    255c:	80 83       	st	Z, r24
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	a2 83       	std	Z+2, r26	; 0x02
    2562:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2564:	fe 01       	movw	r30, r28
    2566:	e7 52       	subi	r30, 0x27	; 39
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	44 f4       	brge	.+16     	; 0x2592 <LED_Switch+0xbe>
		__ticks = 1;
    2582:	fe 01       	movw	r30, r28
    2584:	e9 52       	subi	r30, 0x29	; 41
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
    2590:	64 c0       	rjmp	.+200    	; 0x265a <LED_Switch+0x186>
	else if (__tmp > 65535)
    2592:	fe 01       	movw	r30, r28
    2594:	e7 52       	subi	r30, 0x27	; 39
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	3f ef       	ldi	r19, 0xFF	; 255
    25a4:	4f e7       	ldi	r20, 0x7F	; 127
    25a6:	57 e4       	ldi	r21, 0x47	; 71
    25a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	0c f0       	brlt	.+2      	; 0x25b2 <LED_Switch+0xde>
    25b0:	43 c0       	rjmp	.+134    	; 0x2638 <LED_Switch+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b2:	fe 01       	movw	r30, r28
    25b4:	e3 52       	subi	r30, 0x23	; 35
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e2       	ldi	r20, 0x20	; 32
    25c6:	51 e4       	ldi	r21, 0x41	; 65
    25c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	8e 01       	movw	r16, r28
    25d2:	09 52       	subi	r16, 0x29	; 41
    25d4:	1f 4f       	sbci	r17, 0xFF	; 255
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	f8 01       	movw	r30, r16
    25e4:	91 83       	std	Z+1, r25	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	1f c0       	rjmp	.+62     	; 0x2628 <LED_Switch+0x154>
    25ea:	fe 01       	movw	r30, r28
    25ec:	eb 52       	subi	r30, 0x2B	; 43
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	88 ec       	ldi	r24, 0xC8	; 200
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	fe 01       	movw	r30, r28
    25fa:	eb 52       	subi	r30, 0x2B	; 43
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LED_Switch+0x12e>
    2606:	fe 01       	movw	r30, r28
    2608:	eb 52       	subi	r30, 0x2B	; 43
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2610:	de 01       	movw	r26, r28
    2612:	a9 52       	subi	r26, 0x29	; 41
    2614:	bf 4f       	sbci	r27, 0xFF	; 255
    2616:	fe 01       	movw	r30, r28
    2618:	e9 52       	subi	r30, 0x29	; 41
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	11 96       	adiw	r26, 0x01	; 1
    2624:	9c 93       	st	X, r25
    2626:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2628:	fe 01       	movw	r30, r28
    262a:	e9 52       	subi	r30, 0x29	; 41
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	d1 f6       	brne	.-76     	; 0x25ea <LED_Switch+0x116>
    2636:	27 c0       	rjmp	.+78     	; 0x2686 <LED_Switch+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2638:	8e 01       	movw	r16, r28
    263a:	09 52       	subi	r16, 0x29	; 41
    263c:	1f 4f       	sbci	r17, 0xFF	; 255
    263e:	fe 01       	movw	r30, r28
    2640:	e7 52       	subi	r30, 0x27	; 39
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	f8 01       	movw	r30, r16
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	80 83       	st	Z, r24
    265a:	de 01       	movw	r26, r28
    265c:	ad 52       	subi	r26, 0x2D	; 45
    265e:	bf 4f       	sbci	r27, 0xFF	; 255
    2660:	fe 01       	movw	r30, r28
    2662:	e9 52       	subi	r30, 0x29	; 41
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	8d 93       	st	X+, r24
    266c:	9c 93       	st	X, r25
    266e:	fe 01       	movw	r30, r28
    2670:	ed 52       	subi	r30, 0x2D	; 45
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <LED_Switch+0x1a4>
    267c:	fe 01       	movw	r30, r28
    267e:	ed 52       	subi	r30, 0x2D	; 45
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
	LED_OFF(PORT, PIN0);
    2686:	fe 01       	movw	r30, r28
    2688:	ef 51       	subi	r30, 0x1F	; 31
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
	_delay_ms(Delay);
    2694:	fe 01       	movw	r30, r28
    2696:	ee 51       	subi	r30, 0x1E	; 30
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	88 2f       	mov	r24, r24
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a0 e0       	ldi	r26, 0x00	; 0
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	fe 01       	movw	r30, r28
    26b2:	e1 53       	subi	r30, 0x31	; 49
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 83       	st	Z, r24
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	a2 83       	std	Z+2, r26	; 0x02
    26bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	8e 01       	movw	r16, r28
    26c0:	05 53       	subi	r16, 0x35	; 53
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	e1 53       	subi	r30, 0x31	; 49
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	4a ef       	ldi	r20, 0xFA	; 250
    26d8:	54 e4       	ldi	r21, 0x44	; 68
    26da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	80 83       	st	Z, r24
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	a2 83       	std	Z+2, r26	; 0x02
    26ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e5 53       	subi	r30, 0x35	; 53
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	44 f4       	brge	.+16     	; 0x271a <LED_Switch+0x246>
		__ticks = 1;
    270a:	fe 01       	movw	r30, r28
    270c:	e7 53       	subi	r30, 0x37	; 55
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
    2718:	64 c0       	rjmp	.+200    	; 0x27e2 <LED_Switch+0x30e>
	else if (__tmp > 65535)
    271a:	fe 01       	movw	r30, r28
    271c:	e5 53       	subi	r30, 0x35	; 53
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	3f ef       	ldi	r19, 0xFF	; 255
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	57 e4       	ldi	r21, 0x47	; 71
    2730:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2734:	18 16       	cp	r1, r24
    2736:	0c f0       	brlt	.+2      	; 0x273a <LED_Switch+0x266>
    2738:	43 c0       	rjmp	.+134    	; 0x27c0 <LED_Switch+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	fe 01       	movw	r30, r28
    273c:	e1 53       	subi	r30, 0x31	; 49
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8e 01       	movw	r16, r28
    275a:	07 53       	subi	r16, 0x37	; 55
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	f8 01       	movw	r30, r16
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
    2770:	1f c0       	rjmp	.+62     	; 0x27b0 <LED_Switch+0x2dc>
    2772:	fe 01       	movw	r30, r28
    2774:	e9 53       	subi	r30, 0x39	; 57
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
    2780:	fe 01       	movw	r30, r28
    2782:	e9 53       	subi	r30, 0x39	; 57
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <LED_Switch+0x2b6>
    278e:	fe 01       	movw	r30, r28
    2790:	e9 53       	subi	r30, 0x39	; 57
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	de 01       	movw	r26, r28
    279a:	a7 53       	subi	r26, 0x37	; 55
    279c:	bf 4f       	sbci	r27, 0xFF	; 255
    279e:	fe 01       	movw	r30, r28
    27a0:	e7 53       	subi	r30, 0x37	; 55
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	11 96       	adiw	r26, 0x01	; 1
    27ac:	9c 93       	st	X, r25
    27ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b0:	fe 01       	movw	r30, r28
    27b2:	e7 53       	subi	r30, 0x37	; 55
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 81       	ld	r24, Z
    27b8:	91 81       	ldd	r25, Z+1	; 0x01
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	d1 f6       	brne	.-76     	; 0x2772 <LED_Switch+0x29e>
    27be:	27 c0       	rjmp	.+78     	; 0x280e <LED_Switch+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	8e 01       	movw	r16, r28
    27c2:	07 53       	subi	r16, 0x37	; 55
    27c4:	1f 4f       	sbci	r17, 0xFF	; 255
    27c6:	fe 01       	movw	r30, r28
    27c8:	e5 53       	subi	r30, 0x35	; 53
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	60 81       	ld	r22, Z
    27ce:	71 81       	ldd	r23, Z+1	; 0x01
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	de 01       	movw	r26, r28
    27e4:	ab 53       	subi	r26, 0x3B	; 59
    27e6:	bf 4f       	sbci	r27, 0xFF	; 255
    27e8:	fe 01       	movw	r30, r28
    27ea:	e7 53       	subi	r30, 0x37	; 55
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	8d 93       	st	X+, r24
    27f4:	9c 93       	st	X, r25
    27f6:	fe 01       	movw	r30, r28
    27f8:	eb 53       	subi	r30, 0x3B	; 59
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <LED_Switch+0x32c>
    2804:	fe 01       	movw	r30, r28
    2806:	eb 53       	subi	r30, 0x3B	; 59
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24

	LED_ON(PORT, PIN1);
    280e:	fe 01       	movw	r30, r28
    2810:	ef 51       	subi	r30, 0x1F	; 31
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
	_delay_ms(Delay);
    281c:	fe 01       	movw	r30, r28
    281e:	ee 51       	subi	r30, 0x1E	; 30
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 e0       	ldi	r26, 0x00	; 0
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	fe 01       	movw	r30, r28
    283a:	ef 53       	subi	r30, 0x3F	; 63
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 83       	st	Z, r24
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	a2 83       	std	Z+2, r26	; 0x02
    2844:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	8e 01       	movw	r16, r28
    2848:	03 54       	subi	r16, 0x43	; 67
    284a:	1f 4f       	sbci	r17, 0xFF	; 255
    284c:	fe 01       	movw	r30, r28
    284e:	ef 53       	subi	r30, 0x3F	; 63
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4a ef       	ldi	r20, 0xFA	; 250
    2860:	54 e4       	ldi	r21, 0x44	; 68
    2862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	f8 01       	movw	r30, r16
    286c:	80 83       	st	Z, r24
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	a2 83       	std	Z+2, r26	; 0x02
    2872:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2874:	fe 01       	movw	r30, r28
    2876:	e3 54       	subi	r30, 0x43	; 67
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	44 f4       	brge	.+16     	; 0x28a2 <LED_Switch+0x3ce>
		__ticks = 1;
    2892:	fe 01       	movw	r30, r28
    2894:	e5 54       	subi	r30, 0x45	; 69
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
    28a0:	64 c0       	rjmp	.+200    	; 0x296a <LED_Switch+0x496>
	else if (__tmp > 65535)
    28a2:	fe 01       	movw	r30, r28
    28a4:	e3 54       	subi	r30, 0x43	; 67
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	3f ef       	ldi	r19, 0xFF	; 255
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	57 e4       	ldi	r21, 0x47	; 71
    28b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	0c f0       	brlt	.+2      	; 0x28c2 <LED_Switch+0x3ee>
    28c0:	43 c0       	rjmp	.+134    	; 0x2948 <LED_Switch+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	fe 01       	movw	r30, r28
    28c4:	ef 53       	subi	r30, 0x3F	; 63
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	60 81       	ld	r22, Z
    28ca:	71 81       	ldd	r23, Z+1	; 0x01
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e2       	ldi	r20, 0x20	; 32
    28d6:	51 e4       	ldi	r21, 0x41	; 65
    28d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	8e 01       	movw	r16, r28
    28e2:	05 54       	subi	r16, 0x45	; 69
    28e4:	1f 4f       	sbci	r17, 0xFF	; 255
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	f8 01       	movw	r30, r16
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
    28f8:	1f c0       	rjmp	.+62     	; 0x2938 <LED_Switch+0x464>
    28fa:	fe 01       	movw	r30, r28
    28fc:	e7 54       	subi	r30, 0x47	; 71
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	88 ec       	ldi	r24, 0xC8	; 200
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	91 83       	std	Z+1, r25	; 0x01
    2906:	80 83       	st	Z, r24
    2908:	fe 01       	movw	r30, r28
    290a:	e7 54       	subi	r30, 0x47	; 71
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <LED_Switch+0x43e>
    2916:	fe 01       	movw	r30, r28
    2918:	e7 54       	subi	r30, 0x47	; 71
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	de 01       	movw	r26, r28
    2922:	a5 54       	subi	r26, 0x45	; 69
    2924:	bf 4f       	sbci	r27, 0xFF	; 255
    2926:	fe 01       	movw	r30, r28
    2928:	e5 54       	subi	r30, 0x45	; 69
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	11 96       	adiw	r26, 0x01	; 1
    2934:	9c 93       	st	X, r25
    2936:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2938:	fe 01       	movw	r30, r28
    293a:	e5 54       	subi	r30, 0x45	; 69
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 81       	ld	r24, Z
    2940:	91 81       	ldd	r25, Z+1	; 0x01
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	d1 f6       	brne	.-76     	; 0x28fa <LED_Switch+0x426>
    2946:	27 c0       	rjmp	.+78     	; 0x2996 <LED_Switch+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2948:	8e 01       	movw	r16, r28
    294a:	05 54       	subi	r16, 0x45	; 69
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	fe 01       	movw	r30, r28
    2950:	e3 54       	subi	r30, 0x43	; 67
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	60 81       	ld	r22, Z
    2956:	71 81       	ldd	r23, Z+1	; 0x01
    2958:	82 81       	ldd	r24, Z+2	; 0x02
    295a:	93 81       	ldd	r25, Z+3	; 0x03
    295c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	f8 01       	movw	r30, r16
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
    296a:	de 01       	movw	r26, r28
    296c:	a9 54       	subi	r26, 0x49	; 73
    296e:	bf 4f       	sbci	r27, 0xFF	; 255
    2970:	fe 01       	movw	r30, r28
    2972:	e5 54       	subi	r30, 0x45	; 69
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	8d 93       	st	X+, r24
    297c:	9c 93       	st	X, r25
    297e:	fe 01       	movw	r30, r28
    2980:	e9 54       	subi	r30, 0x49	; 73
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	91 81       	ldd	r25, Z+1	; 0x01
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LED_Switch+0x4b4>
    298c:	fe 01       	movw	r30, r28
    298e:	e9 54       	subi	r30, 0x49	; 73
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	80 83       	st	Z, r24
	LED_OFF(PORT, PIN1);
    2996:	fe 01       	movw	r30, r28
    2998:	ef 51       	subi	r30, 0x1F	; 31
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 81       	ld	r24, Z
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
	_delay_ms(Delay);
    29a4:	fe 01       	movw	r30, r28
    29a6:	ee 51       	subi	r30, 0x1E	; 30
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	88 2f       	mov	r24, r24
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a0 e0       	ldi	r26, 0x00	; 0
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	fe 01       	movw	r30, r28
    29c2:	ed 54       	subi	r30, 0x4D	; 77
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 83       	st	Z, r24
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	a2 83       	std	Z+2, r26	; 0x02
    29cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ce:	8e 01       	movw	r16, r28
    29d0:	01 55       	subi	r16, 0x51	; 81
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 54       	subi	r30, 0x4D	; 77
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	60 81       	ld	r22, Z
    29dc:	71 81       	ldd	r23, Z+1	; 0x01
    29de:	82 81       	ldd	r24, Z+2	; 0x02
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	4a ef       	ldi	r20, 0xFA	; 250
    29e8:	54 e4       	ldi	r21, 0x44	; 68
    29ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	f8 01       	movw	r30, r16
    29f4:	80 83       	st	Z, r24
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	a2 83       	std	Z+2, r26	; 0x02
    29fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29fc:	fe 01       	movw	r30, r28
    29fe:	e1 55       	subi	r30, 0x51	; 81
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e8       	ldi	r20, 0x80	; 128
    2a10:	5f e3       	ldi	r21, 0x3F	; 63
    2a12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a16:	88 23       	and	r24, r24
    2a18:	44 f4       	brge	.+16     	; 0x2a2a <LED_Switch+0x556>
		__ticks = 1;
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e3 55       	subi	r30, 0x53	; 83
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	91 83       	std	Z+1, r25	; 0x01
    2a26:	80 83       	st	Z, r24
    2a28:	64 c0       	rjmp	.+200    	; 0x2af2 <LED_Switch+0x61e>
	else if (__tmp > 65535)
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e1 55       	subi	r30, 0x51	; 81
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	3f ef       	ldi	r19, 0xFF	; 255
    2a3c:	4f e7       	ldi	r20, 0x7F	; 127
    2a3e:	57 e4       	ldi	r21, 0x47	; 71
    2a40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a44:	18 16       	cp	r1, r24
    2a46:	0c f0       	brlt	.+2      	; 0x2a4a <LED_Switch+0x576>
    2a48:	43 c0       	rjmp	.+134    	; 0x2ad0 <LED_Switch+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ed 54       	subi	r30, 0x4D	; 77
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	8e 01       	movw	r16, r28
    2a6a:	03 55       	subi	r16, 0x53	; 83
    2a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
    2a80:	1f c0       	rjmp	.+62     	; 0x2ac0 <LED_Switch+0x5ec>
    2a82:	fe 01       	movw	r30, r28
    2a84:	e5 55       	subi	r30, 0x55	; 85
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	88 ec       	ldi	r24, 0xC8	; 200
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
    2a90:	fe 01       	movw	r30, r28
    2a92:	e5 55       	subi	r30, 0x55	; 85
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <LED_Switch+0x5c6>
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e5 55       	subi	r30, 0x55	; 85
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	de 01       	movw	r26, r28
    2aaa:	a3 55       	subi	r26, 0x53	; 83
    2aac:	bf 4f       	sbci	r27, 0xFF	; 255
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e3 55       	subi	r30, 0x53	; 83
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 81       	ld	r24, Z
    2ab6:	91 81       	ldd	r25, Z+1	; 0x01
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	11 96       	adiw	r26, 0x01	; 1
    2abc:	9c 93       	st	X, r25
    2abe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e3 55       	subi	r30, 0x53	; 83
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	91 81       	ldd	r25, Z+1	; 0x01
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	d1 f6       	brne	.-76     	; 0x2a82 <LED_Switch+0x5ae>
    2ace:	27 c0       	rjmp	.+78     	; 0x2b1e <LED_Switch+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad0:	8e 01       	movw	r16, r28
    2ad2:	03 55       	subi	r16, 0x53	; 83
    2ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e1 55       	subi	r30, 0x51	; 81
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	60 81       	ld	r22, Z
    2ade:	71 81       	ldd	r23, Z+1	; 0x01
    2ae0:	82 81       	ldd	r24, Z+2	; 0x02
    2ae2:	93 81       	ldd	r25, Z+3	; 0x03
    2ae4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	f8 01       	movw	r30, r16
    2aee:	91 83       	std	Z+1, r25	; 0x01
    2af0:	80 83       	st	Z, r24
    2af2:	de 01       	movw	r26, r28
    2af4:	a7 55       	subi	r26, 0x57	; 87
    2af6:	bf 4f       	sbci	r27, 0xFF	; 255
    2af8:	fe 01       	movw	r30, r28
    2afa:	e3 55       	subi	r30, 0x53	; 83
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	8d 93       	st	X+, r24
    2b04:	9c 93       	st	X, r25
    2b06:	fe 01       	movw	r30, r28
    2b08:	e7 55       	subi	r30, 0x57	; 87
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	91 81       	ldd	r25, Z+1	; 0x01
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <LED_Switch+0x63c>
    2b14:	fe 01       	movw	r30, r28
    2b16:	e7 55       	subi	r30, 0x57	; 87
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	91 83       	std	Z+1, r25	; 0x01
    2b1c:	80 83       	st	Z, r24

	LED_ON(PORT, PIN2);
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ef 51       	subi	r30, 0x1F	; 31
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	80 81       	ld	r24, Z
    2b26:	62 e0       	ldi	r22, 0x02	; 2
    2b28:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
	_delay_ms(Delay);
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ee 51       	subi	r30, 0x1E	; 30
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 e0       	ldi	r26, 0x00	; 0
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	fe 01       	movw	r30, r28
    2b4a:	eb 55       	subi	r30, 0x5B	; 91
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 83       	st	Z, r24
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	a2 83       	std	Z+2, r26	; 0x02
    2b54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	8e 01       	movw	r16, r28
    2b58:	0f 55       	subi	r16, 0x5F	; 95
    2b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	eb 55       	subi	r30, 0x5B	; 91
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	60 81       	ld	r22, Z
    2b64:	71 81       	ldd	r23, Z+1	; 0x01
    2b66:	82 81       	ldd	r24, Z+2	; 0x02
    2b68:	93 81       	ldd	r25, Z+3	; 0x03
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a ef       	ldi	r20, 0xFA	; 250
    2b70:	54 e4       	ldi	r21, 0x44	; 68
    2b72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	80 83       	st	Z, r24
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	a2 83       	std	Z+2, r26	; 0x02
    2b82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b84:	fe 01       	movw	r30, r28
    2b86:	ef 55       	subi	r30, 0x5F	; 95
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	5f e3       	ldi	r21, 0x3F	; 63
    2b9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	44 f4       	brge	.+16     	; 0x2bb2 <LED_Switch+0x6de>
		__ticks = 1;
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e1 56       	subi	r30, 0x61	; 97
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
    2bb0:	64 c0       	rjmp	.+200    	; 0x2c7a <LED_Switch+0x7a6>
	else if (__tmp > 65535)
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	ef 55       	subi	r30, 0x5F	; 95
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	60 81       	ld	r22, Z
    2bba:	71 81       	ldd	r23, Z+1	; 0x01
    2bbc:	82 81       	ldd	r24, Z+2	; 0x02
    2bbe:	93 81       	ldd	r25, Z+3	; 0x03
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	0c f0       	brlt	.+2      	; 0x2bd2 <LED_Switch+0x6fe>
    2bd0:	43 c0       	rjmp	.+134    	; 0x2c58 <LED_Switch+0x784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	eb 55       	subi	r30, 0x5B	; 91
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	60 81       	ld	r22, Z
    2bda:	71 81       	ldd	r23, Z+1	; 0x01
    2bdc:	82 81       	ldd	r24, Z+2	; 0x02
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e2       	ldi	r20, 0x20	; 32
    2be6:	51 e4       	ldi	r21, 0x41	; 65
    2be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	8e 01       	movw	r16, r28
    2bf2:	01 56       	subi	r16, 0x61	; 97
    2bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	f8 01       	movw	r30, r16
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	1f c0       	rjmp	.+62     	; 0x2c48 <LED_Switch+0x774>
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e3 56       	subi	r30, 0x63	; 99
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	88 ec       	ldi	r24, 0xC8	; 200
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e3 56       	subi	r30, 0x63	; 99
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	80 81       	ld	r24, Z
    2c20:	91 81       	ldd	r25, Z+1	; 0x01
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <LED_Switch+0x74e>
    2c26:	fe 01       	movw	r30, r28
    2c28:	e3 56       	subi	r30, 0x63	; 99
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c30:	de 01       	movw	r26, r28
    2c32:	a1 56       	subi	r26, 0x61	; 97
    2c34:	bf 4f       	sbci	r27, 0xFF	; 255
    2c36:	fe 01       	movw	r30, r28
    2c38:	e1 56       	subi	r30, 0x61	; 97
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	11 96       	adiw	r26, 0x01	; 1
    2c44:	9c 93       	st	X, r25
    2c46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e1 56       	subi	r30, 0x61	; 97
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	91 81       	ldd	r25, Z+1	; 0x01
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	d1 f6       	brne	.-76     	; 0x2c0a <LED_Switch+0x736>
    2c56:	27 c0       	rjmp	.+78     	; 0x2ca6 <LED_Switch+0x7d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c58:	8e 01       	movw	r16, r28
    2c5a:	01 56       	subi	r16, 0x61	; 97
    2c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5e:	fe 01       	movw	r30, r28
    2c60:	ef 55       	subi	r30, 0x5F	; 95
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	60 81       	ld	r22, Z
    2c66:	71 81       	ldd	r23, Z+1	; 0x01
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	f8 01       	movw	r30, r16
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
    2c7a:	de 01       	movw	r26, r28
    2c7c:	a5 56       	subi	r26, 0x65	; 101
    2c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c80:	fe 01       	movw	r30, r28
    2c82:	e1 56       	subi	r30, 0x61	; 97
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	8d 93       	st	X+, r24
    2c8c:	9c 93       	st	X, r25
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e5 56       	subi	r30, 0x65	; 101
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 81       	ld	r24, Z
    2c96:	91 81       	ldd	r25, Z+1	; 0x01
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LED_Switch+0x7c4>
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e5 56       	subi	r30, 0x65	; 101
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
	LED_OFF(PORT, PIN2);
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ef 51       	subi	r30, 0x1F	; 31
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 81       	ld	r24, Z
    2cae:	62 e0       	ldi	r22, 0x02	; 2
    2cb0:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
	_delay_ms(Delay);
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ee 51       	subi	r30, 0x1E	; 30
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a0 e0       	ldi	r26, 0x00	; 0
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e9 56       	subi	r30, 0x69	; 105
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	80 83       	st	Z, r24
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	a2 83       	std	Z+2, r26	; 0x02
    2cdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	8e 01       	movw	r16, r28
    2ce0:	0d 56       	subi	r16, 0x6D	; 109
    2ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e9 56       	subi	r30, 0x69	; 105
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	60 81       	ld	r22, Z
    2cec:	71 81       	ldd	r23, Z+1	; 0x01
    2cee:	82 81       	ldd	r24, Z+2	; 0x02
    2cf0:	93 81       	ldd	r25, Z+3	; 0x03
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	4a ef       	ldi	r20, 0xFA	; 250
    2cf8:	54 e4       	ldi	r21, 0x44	; 68
    2cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	f8 01       	movw	r30, r16
    2d04:	80 83       	st	Z, r24
    2d06:	91 83       	std	Z+1, r25	; 0x01
    2d08:	a2 83       	std	Z+2, r26	; 0x02
    2d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	ed 56       	subi	r30, 0x6D	; 109
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	60 81       	ld	r22, Z
    2d14:	71 81       	ldd	r23, Z+1	; 0x01
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e8       	ldi	r20, 0x80	; 128
    2d20:	5f e3       	ldi	r21, 0x3F	; 63
    2d22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d26:	88 23       	and	r24, r24
    2d28:	44 f4       	brge	.+16     	; 0x2d3a <LED_Switch+0x866>
		__ticks = 1;
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ef 56       	subi	r30, 0x6F	; 111
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	80 83       	st	Z, r24
    2d38:	64 c0       	rjmp	.+200    	; 0x2e02 <LED_Switch+0x92e>
	else if (__tmp > 65535)
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	ed 56       	subi	r30, 0x6D	; 109
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	60 81       	ld	r22, Z
    2d42:	71 81       	ldd	r23, Z+1	; 0x01
    2d44:	82 81       	ldd	r24, Z+2	; 0x02
    2d46:	93 81       	ldd	r25, Z+3	; 0x03
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	4f e7       	ldi	r20, 0x7F	; 127
    2d4e:	57 e4       	ldi	r21, 0x47	; 71
    2d50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d54:	18 16       	cp	r1, r24
    2d56:	0c f0       	brlt	.+2      	; 0x2d5a <LED_Switch+0x886>
    2d58:	43 c0       	rjmp	.+134    	; 0x2de0 <LED_Switch+0x90c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e9 56       	subi	r30, 0x69	; 105
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8e 01       	movw	r16, r28
    2d7a:	0f 56       	subi	r16, 0x6F	; 111
    2d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
    2d90:	1f c0       	rjmp	.+62     	; 0x2dd0 <LED_Switch+0x8fc>
    2d92:	fe 01       	movw	r30, r28
    2d94:	e1 57       	subi	r30, 0x71	; 113
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	88 ec       	ldi	r24, 0xC8	; 200
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
    2da0:	fe 01       	movw	r30, r28
    2da2:	e1 57       	subi	r30, 0x71	; 113
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <LED_Switch+0x8d6>
    2dae:	fe 01       	movw	r30, r28
    2db0:	e1 57       	subi	r30, 0x71	; 113
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db8:	de 01       	movw	r26, r28
    2dba:	af 56       	subi	r26, 0x6F	; 111
    2dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	ef 56       	subi	r30, 0x6F	; 111
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	11 96       	adiw	r26, 0x01	; 1
    2dcc:	9c 93       	st	X, r25
    2dce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ef 56       	subi	r30, 0x6F	; 111
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	80 81       	ld	r24, Z
    2dd8:	91 81       	ldd	r25, Z+1	; 0x01
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	d1 f6       	brne	.-76     	; 0x2d92 <LED_Switch+0x8be>
    2dde:	27 c0       	rjmp	.+78     	; 0x2e2e <LED_Switch+0x95a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de0:	8e 01       	movw	r16, r28
    2de2:	0f 56       	subi	r16, 0x6F	; 111
    2de4:	1f 4f       	sbci	r17, 0xFF	; 255
    2de6:	fe 01       	movw	r30, r28
    2de8:	ed 56       	subi	r30, 0x6D	; 109
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	60 81       	ld	r22, Z
    2dee:	71 81       	ldd	r23, Z+1	; 0x01
    2df0:	82 81       	ldd	r24, Z+2	; 0x02
    2df2:	93 81       	ldd	r25, Z+3	; 0x03
    2df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	f8 01       	movw	r30, r16
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	de 01       	movw	r26, r28
    2e04:	a3 57       	subi	r26, 0x73	; 115
    2e06:	bf 4f       	sbci	r27, 0xFF	; 255
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ef 56       	subi	r30, 0x6F	; 111
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 81       	ld	r24, Z
    2e10:	91 81       	ldd	r25, Z+1	; 0x01
    2e12:	8d 93       	st	X+, r24
    2e14:	9c 93       	st	X, r25
    2e16:	fe 01       	movw	r30, r28
    2e18:	e3 57       	subi	r30, 0x73	; 115
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <LED_Switch+0x94c>
    2e24:	fe 01       	movw	r30, r28
    2e26:	e3 57       	subi	r30, 0x73	; 115
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	80 83       	st	Z, r24

	LED_ON(PORT, PIN3);
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ef 51       	subi	r30, 0x1F	; 31
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 81       	ld	r24, Z
    2e36:	63 e0       	ldi	r22, 0x03	; 3
    2e38:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
	_delay_ms(Delay);
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	ee 51       	subi	r30, 0x1E	; 30
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 81       	ld	r24, Z
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e7 57       	subi	r30, 0x77	; 119
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 83       	st	Z, r24
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	a2 83       	std	Z+2, r26	; 0x02
    2e64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e66:	8e 01       	movw	r16, r28
    2e68:	0b 57       	subi	r16, 0x7B	; 123
    2e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	e7 57       	subi	r30, 0x77	; 119
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	4a ef       	ldi	r20, 0xFA	; 250
    2e80:	54 e4       	ldi	r21, 0x44	; 68
    2e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	f8 01       	movw	r30, r16
    2e8c:	80 83       	st	Z, r24
    2e8e:	91 83       	std	Z+1, r25	; 0x01
    2e90:	a2 83       	std	Z+2, r26	; 0x02
    2e92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e94:	fe 01       	movw	r30, r28
    2e96:	eb 57       	subi	r30, 0x7B	; 123
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e8       	ldi	r20, 0x80	; 128
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2eae:	88 23       	and	r24, r24
    2eb0:	44 f4       	brge	.+16     	; 0x2ec2 <LED_Switch+0x9ee>
		__ticks = 1;
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ed 57       	subi	r30, 0x7D	; 125
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	91 83       	std	Z+1, r25	; 0x01
    2ebe:	80 83       	st	Z, r24
    2ec0:	64 c0       	rjmp	.+200    	; 0x2f8a <LED_Switch+0xab6>
	else if (__tmp > 65535)
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	eb 57       	subi	r30, 0x7B	; 123
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	3f ef       	ldi	r19, 0xFF	; 255
    2ed4:	4f e7       	ldi	r20, 0x7F	; 127
    2ed6:	57 e4       	ldi	r21, 0x47	; 71
    2ed8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2edc:	18 16       	cp	r1, r24
    2ede:	0c f0       	brlt	.+2      	; 0x2ee2 <LED_Switch+0xa0e>
    2ee0:	43 c0       	rjmp	.+134    	; 0x2f68 <LED_Switch+0xa94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e7 57       	subi	r30, 0x77	; 119
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	60 81       	ld	r22, Z
    2eea:	71 81       	ldd	r23, Z+1	; 0x01
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e2       	ldi	r20, 0x20	; 32
    2ef6:	51 e4       	ldi	r21, 0x41	; 65
    2ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	8e 01       	movw	r16, r28
    2f02:	0d 57       	subi	r16, 0x7D	; 125
    2f04:	1f 4f       	sbci	r17, 0xFF	; 255
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	f8 01       	movw	r30, r16
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
    2f18:	1f c0       	rjmp	.+62     	; 0x2f58 <LED_Switch+0xa84>
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	ef 57       	subi	r30, 0x7F	; 127
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	88 ec       	ldi	r24, 0xC8	; 200
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	80 83       	st	Z, r24
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ef 57       	subi	r30, 0x7F	; 127
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <LED_Switch+0xa5e>
    2f36:	fe 01       	movw	r30, r28
    2f38:	ef 57       	subi	r30, 0x7F	; 127
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	91 83       	std	Z+1, r25	; 0x01
    2f3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f40:	de 01       	movw	r26, r28
    2f42:	ad 57       	subi	r26, 0x7D	; 125
    2f44:	bf 4f       	sbci	r27, 0xFF	; 255
    2f46:	fe 01       	movw	r30, r28
    2f48:	ed 57       	subi	r30, 0x7D	; 125
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	11 96       	adiw	r26, 0x01	; 1
    2f54:	9c 93       	st	X, r25
    2f56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ed 57       	subi	r30, 0x7D	; 125
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	d1 f6       	brne	.-76     	; 0x2f1a <LED_Switch+0xa46>
    2f66:	27 c0       	rjmp	.+78     	; 0x2fb6 <LED_Switch+0xae2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f68:	8e 01       	movw	r16, r28
    2f6a:	0d 57       	subi	r16, 0x7D	; 125
    2f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6e:	fe 01       	movw	r30, r28
    2f70:	eb 57       	subi	r30, 0x7B	; 123
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	60 81       	ld	r22, Z
    2f76:	71 81       	ldd	r23, Z+1	; 0x01
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	f8 01       	movw	r30, r16
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	80 83       	st	Z, r24
    2f8a:	de 01       	movw	r26, r28
    2f8c:	a1 58       	subi	r26, 0x81	; 129
    2f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f90:	fe 01       	movw	r30, r28
    2f92:	ed 57       	subi	r30, 0x7D	; 125
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	80 81       	ld	r24, Z
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	8d 93       	st	X+, r24
    2f9c:	9c 93       	st	X, r25
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e1 58       	subi	r30, 0x81	; 129
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 81       	ld	r24, Z
    2fa6:	91 81       	ldd	r25, Z+1	; 0x01
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <LED_Switch+0xad4>
    2fac:	fe 01       	movw	r30, r28
    2fae:	e1 58       	subi	r30, 0x81	; 129
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	91 83       	std	Z+1, r25	; 0x01
    2fb4:	80 83       	st	Z, r24
	LED_OFF(PORT, PIN3);
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ef 51       	subi	r30, 0x1F	; 31
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	63 e0       	ldi	r22, 0x03	; 3
    2fc0:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
	_delay_ms(Delay);
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ee 51       	subi	r30, 0x1E	; 30
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	80 81       	ld	r24, Z
    2fcc:	88 2f       	mov	r24, r24
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	a0 e0       	ldi	r26, 0x00	; 0
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e5 58       	subi	r30, 0x85	; 133
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	80 83       	st	Z, r24
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	a2 83       	std	Z+2, r26	; 0x02
    2fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fee:	8e 01       	movw	r16, r28
    2ff0:	09 58       	subi	r16, 0x89	; 137
    2ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	e5 58       	subi	r30, 0x85	; 133
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	60 81       	ld	r22, Z
    2ffc:	71 81       	ldd	r23, Z+1	; 0x01
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	93 81       	ldd	r25, Z+3	; 0x03
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4a ef       	ldi	r20, 0xFA	; 250
    3008:	54 e4       	ldi	r21, 0x44	; 68
    300a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	f8 01       	movw	r30, r16
    3014:	80 83       	st	Z, r24
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	a2 83       	std	Z+2, r26	; 0x02
    301a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    301c:	fe 01       	movw	r30, r28
    301e:	e9 58       	subi	r30, 0x89	; 137
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	60 81       	ld	r22, Z
    3024:	71 81       	ldd	r23, Z+1	; 0x01
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e8       	ldi	r20, 0x80	; 128
    3030:	5f e3       	ldi	r21, 0x3F	; 63
    3032:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3036:	88 23       	and	r24, r24
    3038:	44 f4       	brge	.+16     	; 0x304a <LED_Switch+0xb76>
		__ticks = 1;
    303a:	fe 01       	movw	r30, r28
    303c:	eb 58       	subi	r30, 0x8B	; 139
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
    3048:	64 c0       	rjmp	.+200    	; 0x3112 <LED_Switch+0xc3e>
	else if (__tmp > 65535)
    304a:	fe 01       	movw	r30, r28
    304c:	e9 58       	subi	r30, 0x89	; 137
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	3f ef       	ldi	r19, 0xFF	; 255
    305c:	4f e7       	ldi	r20, 0x7F	; 127
    305e:	57 e4       	ldi	r21, 0x47	; 71
    3060:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3064:	18 16       	cp	r1, r24
    3066:	0c f0       	brlt	.+2      	; 0x306a <LED_Switch+0xb96>
    3068:	43 c0       	rjmp	.+134    	; 0x30f0 <LED_Switch+0xc1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306a:	fe 01       	movw	r30, r28
    306c:	e5 58       	subi	r30, 0x85	; 133
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e2       	ldi	r20, 0x20	; 32
    307e:	51 e4       	ldi	r21, 0x41	; 65
    3080:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8e 01       	movw	r16, r28
    308a:	0b 58       	subi	r16, 0x8B	; 139
    308c:	1f 4f       	sbci	r17, 0xFF	; 255
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	f8 01       	movw	r30, r16
    309c:	91 83       	std	Z+1, r25	; 0x01
    309e:	80 83       	st	Z, r24
    30a0:	1f c0       	rjmp	.+62     	; 0x30e0 <LED_Switch+0xc0c>
    30a2:	fe 01       	movw	r30, r28
    30a4:	ed 58       	subi	r30, 0x8D	; 141
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	88 ec       	ldi	r24, 0xC8	; 200
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	91 83       	std	Z+1, r25	; 0x01
    30ae:	80 83       	st	Z, r24
    30b0:	fe 01       	movw	r30, r28
    30b2:	ed 58       	subi	r30, 0x8D	; 141
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <LED_Switch+0xbe6>
    30be:	fe 01       	movw	r30, r28
    30c0:	ed 58       	subi	r30, 0x8D	; 141
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c8:	de 01       	movw	r26, r28
    30ca:	ab 58       	subi	r26, 0x8B	; 139
    30cc:	bf 4f       	sbci	r27, 0xFF	; 255
    30ce:	fe 01       	movw	r30, r28
    30d0:	eb 58       	subi	r30, 0x8B	; 139
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	9c 93       	st	X, r25
    30de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e0:	fe 01       	movw	r30, r28
    30e2:	eb 58       	subi	r30, 0x8B	; 139
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	d1 f6       	brne	.-76     	; 0x30a2 <LED_Switch+0xbce>
    30ee:	27 c0       	rjmp	.+78     	; 0x313e <LED_Switch+0xc6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	8e 01       	movw	r16, r28
    30f2:	0b 58       	subi	r16, 0x8B	; 139
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	fe 01       	movw	r30, r28
    30f8:	e9 58       	subi	r30, 0x89	; 137
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	60 81       	ld	r22, Z
    30fe:	71 81       	ldd	r23, Z+1	; 0x01
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	f8 01       	movw	r30, r16
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
    3112:	de 01       	movw	r26, r28
    3114:	af 58       	subi	r26, 0x8F	; 143
    3116:	bf 4f       	sbci	r27, 0xFF	; 255
    3118:	fe 01       	movw	r30, r28
    311a:	eb 58       	subi	r30, 0x8B	; 139
    311c:	ff 4f       	sbci	r31, 0xFF	; 255
    311e:	80 81       	ld	r24, Z
    3120:	91 81       	ldd	r25, Z+1	; 0x01
    3122:	8d 93       	st	X+, r24
    3124:	9c 93       	st	X, r25
    3126:	fe 01       	movw	r30, r28
    3128:	ef 58       	subi	r30, 0x8F	; 143
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <LED_Switch+0xc5c>
    3134:	fe 01       	movw	r30, r28
    3136:	ef 58       	subi	r30, 0x8F	; 143
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	80 83       	st	Z, r24

	LED_ON(PORT, PIN4);
    313e:	fe 01       	movw	r30, r28
    3140:	ef 51       	subi	r30, 0x1F	; 31
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	64 e0       	ldi	r22, 0x04	; 4
    3148:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
	_delay_ms(Delay);
    314c:	fe 01       	movw	r30, r28
    314e:	ee 51       	subi	r30, 0x1E	; 30
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	88 2f       	mov	r24, r24
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a0 e0       	ldi	r26, 0x00	; 0
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	fe 01       	movw	r30, r28
    316a:	e3 59       	subi	r30, 0x93	; 147
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	80 83       	st	Z, r24
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	a2 83       	std	Z+2, r26	; 0x02
    3174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3176:	8e 01       	movw	r16, r28
    3178:	07 59       	subi	r16, 0x97	; 151
    317a:	1f 4f       	sbci	r17, 0xFF	; 255
    317c:	fe 01       	movw	r30, r28
    317e:	e3 59       	subi	r30, 0x93	; 147
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	60 81       	ld	r22, Z
    3184:	71 81       	ldd	r23, Z+1	; 0x01
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	4a ef       	ldi	r20, 0xFA	; 250
    3190:	54 e4       	ldi	r21, 0x44	; 68
    3192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	f8 01       	movw	r30, r16
    319c:	80 83       	st	Z, r24
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	a2 83       	std	Z+2, r26	; 0x02
    31a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a4:	fe 01       	movw	r30, r28
    31a6:	e7 59       	subi	r30, 0x97	; 151
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e8       	ldi	r20, 0x80	; 128
    31b8:	5f e3       	ldi	r21, 0x3F	; 63
    31ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31be:	88 23       	and	r24, r24
    31c0:	44 f4       	brge	.+16     	; 0x31d2 <LED_Switch+0xcfe>
		__ticks = 1;
    31c2:	fe 01       	movw	r30, r28
    31c4:	e9 59       	subi	r30, 0x99	; 153
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	80 83       	st	Z, r24
    31d0:	64 c0       	rjmp	.+200    	; 0x329a <LED_Switch+0xdc6>
	else if (__tmp > 65535)
    31d2:	fe 01       	movw	r30, r28
    31d4:	e7 59       	subi	r30, 0x97	; 151
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	3f ef       	ldi	r19, 0xFF	; 255
    31e4:	4f e7       	ldi	r20, 0x7F	; 127
    31e6:	57 e4       	ldi	r21, 0x47	; 71
    31e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31ec:	18 16       	cp	r1, r24
    31ee:	0c f0       	brlt	.+2      	; 0x31f2 <LED_Switch+0xd1e>
    31f0:	43 c0       	rjmp	.+134    	; 0x3278 <LED_Switch+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f2:	fe 01       	movw	r30, r28
    31f4:	e3 59       	subi	r30, 0x93	; 147
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	60 81       	ld	r22, Z
    31fa:	71 81       	ldd	r23, Z+1	; 0x01
    31fc:	82 81       	ldd	r24, Z+2	; 0x02
    31fe:	93 81       	ldd	r25, Z+3	; 0x03
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	40 e2       	ldi	r20, 0x20	; 32
    3206:	51 e4       	ldi	r21, 0x41	; 65
    3208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	8e 01       	movw	r16, r28
    3212:	09 59       	subi	r16, 0x99	; 153
    3214:	1f 4f       	sbci	r17, 0xFF	; 255
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	f8 01       	movw	r30, r16
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24
    3228:	1f c0       	rjmp	.+62     	; 0x3268 <LED_Switch+0xd94>
    322a:	fe 01       	movw	r30, r28
    322c:	eb 59       	subi	r30, 0x9B	; 155
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	88 ec       	ldi	r24, 0xC8	; 200
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	91 83       	std	Z+1, r25	; 0x01
    3236:	80 83       	st	Z, r24
    3238:	fe 01       	movw	r30, r28
    323a:	eb 59       	subi	r30, 0x9B	; 155
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	f1 f7       	brne	.-4      	; 0x3242 <LED_Switch+0xd6e>
    3246:	fe 01       	movw	r30, r28
    3248:	eb 59       	subi	r30, 0x9B	; 155
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3250:	de 01       	movw	r26, r28
    3252:	a9 59       	subi	r26, 0x99	; 153
    3254:	bf 4f       	sbci	r27, 0xFF	; 255
    3256:	fe 01       	movw	r30, r28
    3258:	e9 59       	subi	r30, 0x99	; 153
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	80 81       	ld	r24, Z
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	11 96       	adiw	r26, 0x01	; 1
    3264:	9c 93       	st	X, r25
    3266:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3268:	fe 01       	movw	r30, r28
    326a:	e9 59       	subi	r30, 0x99	; 153
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	80 81       	ld	r24, Z
    3270:	91 81       	ldd	r25, Z+1	; 0x01
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	d1 f6       	brne	.-76     	; 0x322a <LED_Switch+0xd56>
    3276:	27 c0       	rjmp	.+78     	; 0x32c6 <LED_Switch+0xdf2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3278:	8e 01       	movw	r16, r28
    327a:	09 59       	subi	r16, 0x99	; 153
    327c:	1f 4f       	sbci	r17, 0xFF	; 255
    327e:	fe 01       	movw	r30, r28
    3280:	e7 59       	subi	r30, 0x97	; 151
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	60 81       	ld	r22, Z
    3286:	71 81       	ldd	r23, Z+1	; 0x01
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	f8 01       	movw	r30, r16
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	80 83       	st	Z, r24
    329a:	de 01       	movw	r26, r28
    329c:	ad 59       	subi	r26, 0x9D	; 157
    329e:	bf 4f       	sbci	r27, 0xFF	; 255
    32a0:	fe 01       	movw	r30, r28
    32a2:	e9 59       	subi	r30, 0x99	; 153
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	8d 93       	st	X+, r24
    32ac:	9c 93       	st	X, r25
    32ae:	fe 01       	movw	r30, r28
    32b0:	ed 59       	subi	r30, 0x9D	; 157
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	80 81       	ld	r24, Z
    32b6:	91 81       	ldd	r25, Z+1	; 0x01
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <LED_Switch+0xde4>
    32bc:	fe 01       	movw	r30, r28
    32be:	ed 59       	subi	r30, 0x9D	; 157
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	91 83       	std	Z+1, r25	; 0x01
    32c4:	80 83       	st	Z, r24
	LED_OFF(PORT, PIN4);
    32c6:	fe 01       	movw	r30, r28
    32c8:	ef 51       	subi	r30, 0x1F	; 31
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	80 81       	ld	r24, Z
    32ce:	64 e0       	ldi	r22, 0x04	; 4
    32d0:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
	_delay_ms(Delay);
    32d4:	fe 01       	movw	r30, r28
    32d6:	ee 51       	subi	r30, 0x1E	; 30
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 81       	ld	r24, Z
    32dc:	88 2f       	mov	r24, r24
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	a0 e0       	ldi	r26, 0x00	; 0
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	fe 01       	movw	r30, r28
    32f2:	e1 5a       	subi	r30, 0xA1	; 161
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	80 83       	st	Z, r24
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	a2 83       	std	Z+2, r26	; 0x02
    32fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fe:	8e 01       	movw	r16, r28
    3300:	05 5a       	subi	r16, 0xA5	; 165
    3302:	1f 4f       	sbci	r17, 0xFF	; 255
    3304:	fe 01       	movw	r30, r28
    3306:	e1 5a       	subi	r30, 0xA1	; 161
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	82 81       	ldd	r24, Z+2	; 0x02
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	4a ef       	ldi	r20, 0xFA	; 250
    3318:	54 e4       	ldi	r21, 0x44	; 68
    331a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	f8 01       	movw	r30, r16
    3324:	80 83       	st	Z, r24
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	a2 83       	std	Z+2, r26	; 0x02
    332a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    332c:	fe 01       	movw	r30, r28
    332e:	e5 5a       	subi	r30, 0xA5	; 165
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	40 e8       	ldi	r20, 0x80	; 128
    3340:	5f e3       	ldi	r21, 0x3F	; 63
    3342:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3346:	88 23       	and	r24, r24
    3348:	44 f4       	brge	.+16     	; 0x335a <LED_Switch+0xe86>
		__ticks = 1;
    334a:	fe 01       	movw	r30, r28
    334c:	e7 5a       	subi	r30, 0xA7	; 167
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	80 83       	st	Z, r24
    3358:	64 c0       	rjmp	.+200    	; 0x3422 <LED_Switch+0xf4e>
	else if (__tmp > 65535)
    335a:	fe 01       	movw	r30, r28
    335c:	e5 5a       	subi	r30, 0xA5	; 165
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	60 81       	ld	r22, Z
    3362:	71 81       	ldd	r23, Z+1	; 0x01
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	3f ef       	ldi	r19, 0xFF	; 255
    336c:	4f e7       	ldi	r20, 0x7F	; 127
    336e:	57 e4       	ldi	r21, 0x47	; 71
    3370:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3374:	18 16       	cp	r1, r24
    3376:	0c f0       	brlt	.+2      	; 0x337a <LED_Switch+0xea6>
    3378:	43 c0       	rjmp	.+134    	; 0x3400 <LED_Switch+0xf2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337a:	fe 01       	movw	r30, r28
    337c:	e1 5a       	subi	r30, 0xA1	; 161
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	82 81       	ldd	r24, Z+2	; 0x02
    3386:	93 81       	ldd	r25, Z+3	; 0x03
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e2       	ldi	r20, 0x20	; 32
    338e:	51 e4       	ldi	r21, 0x41	; 65
    3390:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	8e 01       	movw	r16, r28
    339a:	07 5a       	subi	r16, 0xA7	; 167
    339c:	1f 4f       	sbci	r17, 0xFF	; 255
    339e:	bc 01       	movw	r22, r24
    33a0:	cd 01       	movw	r24, r26
    33a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	f8 01       	movw	r30, r16
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	80 83       	st	Z, r24
    33b0:	1f c0       	rjmp	.+62     	; 0x33f0 <LED_Switch+0xf1c>
    33b2:	fe 01       	movw	r30, r28
    33b4:	e9 5a       	subi	r30, 0xA9	; 169
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	88 ec       	ldi	r24, 0xC8	; 200
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	91 83       	std	Z+1, r25	; 0x01
    33be:	80 83       	st	Z, r24
    33c0:	fe 01       	movw	r30, r28
    33c2:	e9 5a       	subi	r30, 0xA9	; 169
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <LED_Switch+0xef6>
    33ce:	fe 01       	movw	r30, r28
    33d0:	e9 5a       	subi	r30, 0xA9	; 169
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	91 83       	std	Z+1, r25	; 0x01
    33d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	de 01       	movw	r26, r28
    33da:	a7 5a       	subi	r26, 0xA7	; 167
    33dc:	bf 4f       	sbci	r27, 0xFF	; 255
    33de:	fe 01       	movw	r30, r28
    33e0:	e7 5a       	subi	r30, 0xA7	; 167
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	11 96       	adiw	r26, 0x01	; 1
    33ec:	9c 93       	st	X, r25
    33ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f0:	fe 01       	movw	r30, r28
    33f2:	e7 5a       	subi	r30, 0xA7	; 167
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	80 81       	ld	r24, Z
    33f8:	91 81       	ldd	r25, Z+1	; 0x01
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	d1 f6       	brne	.-76     	; 0x33b2 <LED_Switch+0xede>
    33fe:	27 c0       	rjmp	.+78     	; 0x344e <LED_Switch+0xf7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3400:	8e 01       	movw	r16, r28
    3402:	07 5a       	subi	r16, 0xA7	; 167
    3404:	1f 4f       	sbci	r17, 0xFF	; 255
    3406:	fe 01       	movw	r30, r28
    3408:	e5 5a       	subi	r30, 0xA5	; 165
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	60 81       	ld	r22, Z
    340e:	71 81       	ldd	r23, Z+1	; 0x01
    3410:	82 81       	ldd	r24, Z+2	; 0x02
    3412:	93 81       	ldd	r25, Z+3	; 0x03
    3414:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	f8 01       	movw	r30, r16
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	80 83       	st	Z, r24
    3422:	de 01       	movw	r26, r28
    3424:	ab 5a       	subi	r26, 0xAB	; 171
    3426:	bf 4f       	sbci	r27, 0xFF	; 255
    3428:	fe 01       	movw	r30, r28
    342a:	e7 5a       	subi	r30, 0xA7	; 167
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	8d 93       	st	X+, r24
    3434:	9c 93       	st	X, r25
    3436:	fe 01       	movw	r30, r28
    3438:	eb 5a       	subi	r30, 0xAB	; 171
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	80 81       	ld	r24, Z
    343e:	91 81       	ldd	r25, Z+1	; 0x01
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <LED_Switch+0xf6c>
    3444:	fe 01       	movw	r30, r28
    3446:	eb 5a       	subi	r30, 0xAB	; 171
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	80 83       	st	Z, r24

	LED_ON(PORT, PIN5);
    344e:	fe 01       	movw	r30, r28
    3450:	ef 51       	subi	r30, 0x1F	; 31
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	65 e0       	ldi	r22, 0x05	; 5
    3458:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
	_delay_ms(Delay);
    345c:	fe 01       	movw	r30, r28
    345e:	ee 51       	subi	r30, 0x1E	; 30
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 81       	ld	r24, Z
    3464:	88 2f       	mov	r24, r24
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	a0 e0       	ldi	r26, 0x00	; 0
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	bc 01       	movw	r22, r24
    346e:	cd 01       	movw	r24, r26
    3470:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	fe 01       	movw	r30, r28
    347a:	ef 5a       	subi	r30, 0xAF	; 175
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 83       	st	Z, r24
    3480:	91 83       	std	Z+1, r25	; 0x01
    3482:	a2 83       	std	Z+2, r26	; 0x02
    3484:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3486:	8e 01       	movw	r16, r28
    3488:	03 5b       	subi	r16, 0xB3	; 179
    348a:	1f 4f       	sbci	r17, 0xFF	; 255
    348c:	fe 01       	movw	r30, r28
    348e:	ef 5a       	subi	r30, 0xAF	; 175
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	4a ef       	ldi	r20, 0xFA	; 250
    34a0:	54 e4       	ldi	r21, 0x44	; 68
    34a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	f8 01       	movw	r30, r16
    34ac:	80 83       	st	Z, r24
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	a2 83       	std	Z+2, r26	; 0x02
    34b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34b4:	fe 01       	movw	r30, r28
    34b6:	e3 5b       	subi	r30, 0xB3	; 179
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	60 81       	ld	r22, Z
    34bc:	71 81       	ldd	r23, Z+1	; 0x01
    34be:	82 81       	ldd	r24, Z+2	; 0x02
    34c0:	93 81       	ldd	r25, Z+3	; 0x03
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 e8       	ldi	r20, 0x80	; 128
    34c8:	5f e3       	ldi	r21, 0x3F	; 63
    34ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34ce:	88 23       	and	r24, r24
    34d0:	44 f4       	brge	.+16     	; 0x34e2 <LED_Switch+0x100e>
		__ticks = 1;
    34d2:	fe 01       	movw	r30, r28
    34d4:	e5 5b       	subi	r30, 0xB5	; 181
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	91 83       	std	Z+1, r25	; 0x01
    34de:	80 83       	st	Z, r24
    34e0:	64 c0       	rjmp	.+200    	; 0x35aa <LED_Switch+0x10d6>
	else if (__tmp > 65535)
    34e2:	fe 01       	movw	r30, r28
    34e4:	e3 5b       	subi	r30, 0xB3	; 179
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	60 81       	ld	r22, Z
    34ea:	71 81       	ldd	r23, Z+1	; 0x01
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	93 81       	ldd	r25, Z+3	; 0x03
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	3f ef       	ldi	r19, 0xFF	; 255
    34f4:	4f e7       	ldi	r20, 0x7F	; 127
    34f6:	57 e4       	ldi	r21, 0x47	; 71
    34f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34fc:	18 16       	cp	r1, r24
    34fe:	0c f0       	brlt	.+2      	; 0x3502 <LED_Switch+0x102e>
    3500:	43 c0       	rjmp	.+134    	; 0x3588 <LED_Switch+0x10b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3502:	fe 01       	movw	r30, r28
    3504:	ef 5a       	subi	r30, 0xAF	; 175
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	60 81       	ld	r22, Z
    350a:	71 81       	ldd	r23, Z+1	; 0x01
    350c:	82 81       	ldd	r24, Z+2	; 0x02
    350e:	93 81       	ldd	r25, Z+3	; 0x03
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e2       	ldi	r20, 0x20	; 32
    3516:	51 e4       	ldi	r21, 0x41	; 65
    3518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	8e 01       	movw	r16, r28
    3522:	05 5b       	subi	r16, 0xB5	; 181
    3524:	1f 4f       	sbci	r17, 0xFF	; 255
    3526:	bc 01       	movw	r22, r24
    3528:	cd 01       	movw	r24, r26
    352a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	f8 01       	movw	r30, r16
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	80 83       	st	Z, r24
    3538:	1f c0       	rjmp	.+62     	; 0x3578 <LED_Switch+0x10a4>
    353a:	fe 01       	movw	r30, r28
    353c:	e7 5b       	subi	r30, 0xB7	; 183
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	88 ec       	ldi	r24, 0xC8	; 200
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	80 83       	st	Z, r24
    3548:	fe 01       	movw	r30, r28
    354a:	e7 5b       	subi	r30, 0xB7	; 183
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	91 81       	ldd	r25, Z+1	; 0x01
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <LED_Switch+0x107e>
    3556:	fe 01       	movw	r30, r28
    3558:	e7 5b       	subi	r30, 0xB7	; 183
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3560:	de 01       	movw	r26, r28
    3562:	a5 5b       	subi	r26, 0xB5	; 181
    3564:	bf 4f       	sbci	r27, 0xFF	; 255
    3566:	fe 01       	movw	r30, r28
    3568:	e5 5b       	subi	r30, 0xB5	; 181
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	80 81       	ld	r24, Z
    356e:	91 81       	ldd	r25, Z+1	; 0x01
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	11 96       	adiw	r26, 0x01	; 1
    3574:	9c 93       	st	X, r25
    3576:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3578:	fe 01       	movw	r30, r28
    357a:	e5 5b       	subi	r30, 0xB5	; 181
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	80 81       	ld	r24, Z
    3580:	91 81       	ldd	r25, Z+1	; 0x01
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	d1 f6       	brne	.-76     	; 0x353a <LED_Switch+0x1066>
    3586:	27 c0       	rjmp	.+78     	; 0x35d6 <LED_Switch+0x1102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3588:	8e 01       	movw	r16, r28
    358a:	05 5b       	subi	r16, 0xB5	; 181
    358c:	1f 4f       	sbci	r17, 0xFF	; 255
    358e:	fe 01       	movw	r30, r28
    3590:	e3 5b       	subi	r30, 0xB3	; 179
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	60 81       	ld	r22, Z
    3596:	71 81       	ldd	r23, Z+1	; 0x01
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	93 81       	ldd	r25, Z+3	; 0x03
    359c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	f8 01       	movw	r30, r16
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
    35aa:	de 01       	movw	r26, r28
    35ac:	a9 5b       	subi	r26, 0xB9	; 185
    35ae:	bf 4f       	sbci	r27, 0xFF	; 255
    35b0:	fe 01       	movw	r30, r28
    35b2:	e5 5b       	subi	r30, 0xB5	; 181
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	8d 93       	st	X+, r24
    35bc:	9c 93       	st	X, r25
    35be:	fe 01       	movw	r30, r28
    35c0:	e9 5b       	subi	r30, 0xB9	; 185
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <LED_Switch+0x10f4>
    35cc:	fe 01       	movw	r30, r28
    35ce:	e9 5b       	subi	r30, 0xB9	; 185
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	80 83       	st	Z, r24
	LED_OFF(PORT, PIN5);
    35d6:	fe 01       	movw	r30, r28
    35d8:	ef 51       	subi	r30, 0x1F	; 31
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	65 e0       	ldi	r22, 0x05	; 5
    35e0:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
	_delay_ms(Delay);
    35e4:	fe 01       	movw	r30, r28
    35e6:	ee 51       	subi	r30, 0x1E	; 30
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	88 2f       	mov	r24, r24
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a0 e0       	ldi	r26, 0x00	; 0
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	fe 01       	movw	r30, r28
    3602:	ed 5b       	subi	r30, 0xBD	; 189
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 83       	st	Z, r24
    3608:	91 83       	std	Z+1, r25	; 0x01
    360a:	a2 83       	std	Z+2, r26	; 0x02
    360c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	8e 01       	movw	r16, r28
    3610:	01 5c       	subi	r16, 0xC1	; 193
    3612:	1f 4f       	sbci	r17, 0xFF	; 255
    3614:	fe 01       	movw	r30, r28
    3616:	ed 5b       	subi	r30, 0xBD	; 189
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	60 81       	ld	r22, Z
    361c:	71 81       	ldd	r23, Z+1	; 0x01
    361e:	82 81       	ldd	r24, Z+2	; 0x02
    3620:	93 81       	ldd	r25, Z+3	; 0x03
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	4a ef       	ldi	r20, 0xFA	; 250
    3628:	54 e4       	ldi	r21, 0x44	; 68
    362a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	f8 01       	movw	r30, r16
    3634:	80 83       	st	Z, r24
    3636:	91 83       	std	Z+1, r25	; 0x01
    3638:	a2 83       	std	Z+2, r26	; 0x02
    363a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    363c:	fe 01       	movw	r30, r28
    363e:	ff 96       	adiw	r30, 0x3f	; 63
    3640:	60 81       	ld	r22, Z
    3642:	71 81       	ldd	r23, Z+1	; 0x01
    3644:	82 81       	ldd	r24, Z+2	; 0x02
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	40 e8       	ldi	r20, 0x80	; 128
    364e:	5f e3       	ldi	r21, 0x3F	; 63
    3650:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3654:	88 23       	and	r24, r24
    3656:	2c f4       	brge	.+10     	; 0x3662 <LED_Switch+0x118e>
		__ticks = 1;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9e af       	std	Y+62, r25	; 0x3e
    365e:	8d af       	std	Y+61, r24	; 0x3d
    3660:	46 c0       	rjmp	.+140    	; 0x36ee <LED_Switch+0x121a>
	else if (__tmp > 65535)
    3662:	fe 01       	movw	r30, r28
    3664:	ff 96       	adiw	r30, 0x3f	; 63
    3666:	60 81       	ld	r22, Z
    3668:	71 81       	ldd	r23, Z+1	; 0x01
    366a:	82 81       	ldd	r24, Z+2	; 0x02
    366c:	93 81       	ldd	r25, Z+3	; 0x03
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	3f ef       	ldi	r19, 0xFF	; 255
    3672:	4f e7       	ldi	r20, 0x7F	; 127
    3674:	57 e4       	ldi	r21, 0x47	; 71
    3676:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    367a:	18 16       	cp	r1, r24
    367c:	64 f5       	brge	.+88     	; 0x36d6 <LED_Switch+0x1202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367e:	fe 01       	movw	r30, r28
    3680:	ed 5b       	subi	r30, 0xBD	; 189
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	60 81       	ld	r22, Z
    3686:	71 81       	ldd	r23, Z+1	; 0x01
    3688:	82 81       	ldd	r24, Z+2	; 0x02
    368a:	93 81       	ldd	r25, Z+3	; 0x03
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e2       	ldi	r20, 0x20	; 32
    3692:	51 e4       	ldi	r21, 0x41	; 65
    3694:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	bc 01       	movw	r22, r24
    369e:	cd 01       	movw	r24, r26
    36a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9e af       	std	Y+62, r25	; 0x3e
    36aa:	8d af       	std	Y+61, r24	; 0x3d
    36ac:	0f c0       	rjmp	.+30     	; 0x36cc <LED_Switch+0x11f8>
    36ae:	88 ec       	ldi	r24, 0xC8	; 200
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9c af       	std	Y+60, r25	; 0x3c
    36b4:	8b af       	std	Y+59, r24	; 0x3b
    36b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    36b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    36ba:	01 97       	sbiw	r24, 0x01	; 1
    36bc:	f1 f7       	brne	.-4      	; 0x36ba <LED_Switch+0x11e6>
    36be:	9c af       	std	Y+60, r25	; 0x3c
    36c0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    36c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	9e af       	std	Y+62, r25	; 0x3e
    36ca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    36ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	69 f7       	brne	.-38     	; 0x36ae <LED_Switch+0x11da>
    36d4:	16 c0       	rjmp	.+44     	; 0x3702 <LED_Switch+0x122e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d6:	fe 01       	movw	r30, r28
    36d8:	ff 96       	adiw	r30, 0x3f	; 63
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	9e af       	std	Y+62, r25	; 0x3e
    36ec:	8d af       	std	Y+61, r24	; 0x3d
    36ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    36f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    36f2:	9a af       	std	Y+58, r25	; 0x3a
    36f4:	89 af       	std	Y+57, r24	; 0x39
    36f6:	89 ad       	ldd	r24, Y+57	; 0x39
    36f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	f1 f7       	brne	.-4      	; 0x36fa <LED_Switch+0x1226>
    36fe:	9a af       	std	Y+58, r25	; 0x3a
    3700:	89 af       	std	Y+57, r24	; 0x39

	LED_ON(PORT, PIN6);
    3702:	fe 01       	movw	r30, r28
    3704:	ef 51       	subi	r30, 0x1F	; 31
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	80 81       	ld	r24, Z
    370a:	66 e0       	ldi	r22, 0x06	; 6
    370c:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
	_delay_ms(Delay);
    3710:	fe 01       	movw	r30, r28
    3712:	ee 51       	subi	r30, 0x1E	; 30
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	88 2f       	mov	r24, r24
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	a0 e0       	ldi	r26, 0x00	; 0
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	bc 01       	movw	r22, r24
    3722:	cd 01       	movw	r24, r26
    3724:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	8d ab       	std	Y+53, r24	; 0x35
    372e:	9e ab       	std	Y+54, r25	; 0x36
    3730:	af ab       	std	Y+55, r26	; 0x37
    3732:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3734:	6d a9       	ldd	r22, Y+53	; 0x35
    3736:	7e a9       	ldd	r23, Y+54	; 0x36
    3738:	8f a9       	ldd	r24, Y+55	; 0x37
    373a:	98 ad       	ldd	r25, Y+56	; 0x38
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	4a ef       	ldi	r20, 0xFA	; 250
    3742:	54 e4       	ldi	r21, 0x44	; 68
    3744:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	89 ab       	std	Y+49, r24	; 0x31
    374e:	9a ab       	std	Y+50, r25	; 0x32
    3750:	ab ab       	std	Y+51, r26	; 0x33
    3752:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3754:	69 a9       	ldd	r22, Y+49	; 0x31
    3756:	7a a9       	ldd	r23, Y+50	; 0x32
    3758:	8b a9       	ldd	r24, Y+51	; 0x33
    375a:	9c a9       	ldd	r25, Y+52	; 0x34
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e8       	ldi	r20, 0x80	; 128
    3762:	5f e3       	ldi	r21, 0x3F	; 63
    3764:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3768:	88 23       	and	r24, r24
    376a:	2c f4       	brge	.+10     	; 0x3776 <LED_Switch+0x12a2>
		__ticks = 1;
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	98 ab       	std	Y+48, r25	; 0x30
    3772:	8f a7       	std	Y+47, r24	; 0x2f
    3774:	3f c0       	rjmp	.+126    	; 0x37f4 <LED_Switch+0x1320>
	else if (__tmp > 65535)
    3776:	69 a9       	ldd	r22, Y+49	; 0x31
    3778:	7a a9       	ldd	r23, Y+50	; 0x32
    377a:	8b a9       	ldd	r24, Y+51	; 0x33
    377c:	9c a9       	ldd	r25, Y+52	; 0x34
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	3f ef       	ldi	r19, 0xFF	; 255
    3782:	4f e7       	ldi	r20, 0x7F	; 127
    3784:	57 e4       	ldi	r21, 0x47	; 71
    3786:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    378a:	18 16       	cp	r1, r24
    378c:	4c f5       	brge	.+82     	; 0x37e0 <LED_Switch+0x130c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378e:	6d a9       	ldd	r22, Y+53	; 0x35
    3790:	7e a9       	ldd	r23, Y+54	; 0x36
    3792:	8f a9       	ldd	r24, Y+55	; 0x37
    3794:	98 ad       	ldd	r25, Y+56	; 0x38
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	40 e2       	ldi	r20, 0x20	; 32
    379c:	51 e4       	ldi	r21, 0x41	; 65
    379e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	bc 01       	movw	r22, r24
    37a8:	cd 01       	movw	r24, r26
    37aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	98 ab       	std	Y+48, r25	; 0x30
    37b4:	8f a7       	std	Y+47, r24	; 0x2f
    37b6:	0f c0       	rjmp	.+30     	; 0x37d6 <LED_Switch+0x1302>
    37b8:	88 ec       	ldi	r24, 0xC8	; 200
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	9e a7       	std	Y+46, r25	; 0x2e
    37be:	8d a7       	std	Y+45, r24	; 0x2d
    37c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    37c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <LED_Switch+0x12f0>
    37c8:	9e a7       	std	Y+46, r25	; 0x2e
    37ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ce:	98 a9       	ldd	r25, Y+48	; 0x30
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	98 ab       	std	Y+48, r25	; 0x30
    37d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37d8:	98 a9       	ldd	r25, Y+48	; 0x30
    37da:	00 97       	sbiw	r24, 0x00	; 0
    37dc:	69 f7       	brne	.-38     	; 0x37b8 <LED_Switch+0x12e4>
    37de:	14 c0       	rjmp	.+40     	; 0x3808 <LED_Switch+0x1334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e0:	69 a9       	ldd	r22, Y+49	; 0x31
    37e2:	7a a9       	ldd	r23, Y+50	; 0x32
    37e4:	8b a9       	ldd	r24, Y+51	; 0x33
    37e6:	9c a9       	ldd	r25, Y+52	; 0x34
    37e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	98 ab       	std	Y+48, r25	; 0x30
    37f2:	8f a7       	std	Y+47, r24	; 0x2f
    37f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    37f6:	98 a9       	ldd	r25, Y+48	; 0x30
    37f8:	9c a7       	std	Y+44, r25	; 0x2c
    37fa:	8b a7       	std	Y+43, r24	; 0x2b
    37fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    37fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	f1 f7       	brne	.-4      	; 0x3800 <LED_Switch+0x132c>
    3804:	9c a7       	std	Y+44, r25	; 0x2c
    3806:	8b a7       	std	Y+43, r24	; 0x2b
	LED_OFF(PORT, PIN6);
    3808:	fe 01       	movw	r30, r28
    380a:	ef 51       	subi	r30, 0x1F	; 31
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	66 e0       	ldi	r22, 0x06	; 6
    3812:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
	_delay_ms(Delay);
    3816:	fe 01       	movw	r30, r28
    3818:	ee 51       	subi	r30, 0x1E	; 30
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	88 2f       	mov	r24, r24
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	a0 e0       	ldi	r26, 0x00	; 0
    3824:	b0 e0       	ldi	r27, 0x00	; 0
    3826:	bc 01       	movw	r22, r24
    3828:	cd 01       	movw	r24, r26
    382a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	8f a3       	std	Y+39, r24	; 0x27
    3834:	98 a7       	std	Y+40, r25	; 0x28
    3836:	a9 a7       	std	Y+41, r26	; 0x29
    3838:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    383a:	6f a1       	ldd	r22, Y+39	; 0x27
    383c:	78 a5       	ldd	r23, Y+40	; 0x28
    383e:	89 a5       	ldd	r24, Y+41	; 0x29
    3840:	9a a5       	ldd	r25, Y+42	; 0x2a
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	4a ef       	ldi	r20, 0xFA	; 250
    3848:	54 e4       	ldi	r21, 0x44	; 68
    384a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	8b a3       	std	Y+35, r24	; 0x23
    3854:	9c a3       	std	Y+36, r25	; 0x24
    3856:	ad a3       	std	Y+37, r26	; 0x25
    3858:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    385a:	6b a1       	ldd	r22, Y+35	; 0x23
    385c:	7c a1       	ldd	r23, Y+36	; 0x24
    385e:	8d a1       	ldd	r24, Y+37	; 0x25
    3860:	9e a1       	ldd	r25, Y+38	; 0x26
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	40 e8       	ldi	r20, 0x80	; 128
    3868:	5f e3       	ldi	r21, 0x3F	; 63
    386a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    386e:	88 23       	and	r24, r24
    3870:	2c f4       	brge	.+10     	; 0x387c <LED_Switch+0x13a8>
		__ticks = 1;
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	9a a3       	std	Y+34, r25	; 0x22
    3878:	89 a3       	std	Y+33, r24	; 0x21
    387a:	3f c0       	rjmp	.+126    	; 0x38fa <LED_Switch+0x1426>
	else if (__tmp > 65535)
    387c:	6b a1       	ldd	r22, Y+35	; 0x23
    387e:	7c a1       	ldd	r23, Y+36	; 0x24
    3880:	8d a1       	ldd	r24, Y+37	; 0x25
    3882:	9e a1       	ldd	r25, Y+38	; 0x26
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	3f ef       	ldi	r19, 0xFF	; 255
    3888:	4f e7       	ldi	r20, 0x7F	; 127
    388a:	57 e4       	ldi	r21, 0x47	; 71
    388c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3890:	18 16       	cp	r1, r24
    3892:	4c f5       	brge	.+82     	; 0x38e6 <LED_Switch+0x1412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3894:	6f a1       	ldd	r22, Y+39	; 0x27
    3896:	78 a5       	ldd	r23, Y+40	; 0x28
    3898:	89 a5       	ldd	r24, Y+41	; 0x29
    389a:	9a a5       	ldd	r25, Y+42	; 0x2a
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	40 e2       	ldi	r20, 0x20	; 32
    38a2:	51 e4       	ldi	r21, 0x41	; 65
    38a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	bc 01       	movw	r22, r24
    38ae:	cd 01       	movw	r24, r26
    38b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	9a a3       	std	Y+34, r25	; 0x22
    38ba:	89 a3       	std	Y+33, r24	; 0x21
    38bc:	0f c0       	rjmp	.+30     	; 0x38dc <LED_Switch+0x1408>
    38be:	88 ec       	ldi	r24, 0xC8	; 200
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	98 a3       	std	Y+32, r25	; 0x20
    38c4:	8f 8f       	std	Y+31, r24	; 0x1f
    38c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38c8:	98 a1       	ldd	r25, Y+32	; 0x20
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	f1 f7       	brne	.-4      	; 0x38ca <LED_Switch+0x13f6>
    38ce:	98 a3       	std	Y+32, r25	; 0x20
    38d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d2:	89 a1       	ldd	r24, Y+33	; 0x21
    38d4:	9a a1       	ldd	r25, Y+34	; 0x22
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	9a a3       	std	Y+34, r25	; 0x22
    38da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38dc:	89 a1       	ldd	r24, Y+33	; 0x21
    38de:	9a a1       	ldd	r25, Y+34	; 0x22
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	69 f7       	brne	.-38     	; 0x38be <LED_Switch+0x13ea>
    38e4:	14 c0       	rjmp	.+40     	; 0x390e <LED_Switch+0x143a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e6:	6b a1       	ldd	r22, Y+35	; 0x23
    38e8:	7c a1       	ldd	r23, Y+36	; 0x24
    38ea:	8d a1       	ldd	r24, Y+37	; 0x25
    38ec:	9e a1       	ldd	r25, Y+38	; 0x26
    38ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	9a a3       	std	Y+34, r25	; 0x22
    38f8:	89 a3       	std	Y+33, r24	; 0x21
    38fa:	89 a1       	ldd	r24, Y+33	; 0x21
    38fc:	9a a1       	ldd	r25, Y+34	; 0x22
    38fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3900:	8d 8f       	std	Y+29, r24	; 0x1d
    3902:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3904:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	f1 f7       	brne	.-4      	; 0x3906 <LED_Switch+0x1432>
    390a:	9e 8f       	std	Y+30, r25	; 0x1e
    390c:	8d 8f       	std	Y+29, r24	; 0x1d

	LED_ON(PORT, PIN7);
    390e:	fe 01       	movw	r30, r28
    3910:	ef 51       	subi	r30, 0x1F	; 31
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 81       	ld	r24, Z
    3916:	67 e0       	ldi	r22, 0x07	; 7
    3918:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
	_delay_ms(Delay);
    391c:	fe 01       	movw	r30, r28
    391e:	ee 51       	subi	r30, 0x1E	; 30
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	80 81       	ld	r24, Z
    3924:	88 2f       	mov	r24, r24
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	a0 e0       	ldi	r26, 0x00	; 0
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	89 8f       	std	Y+25, r24	; 0x19
    393a:	9a 8f       	std	Y+26, r25	; 0x1a
    393c:	ab 8f       	std	Y+27, r26	; 0x1b
    393e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3940:	69 8d       	ldd	r22, Y+25	; 0x19
    3942:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	4a ef       	ldi	r20, 0xFA	; 250
    394e:	54 e4       	ldi	r21, 0x44	; 68
    3950:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	8d 8b       	std	Y+21, r24	; 0x15
    395a:	9e 8b       	std	Y+22, r25	; 0x16
    395c:	af 8b       	std	Y+23, r26	; 0x17
    395e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3960:	6d 89       	ldd	r22, Y+21	; 0x15
    3962:	7e 89       	ldd	r23, Y+22	; 0x16
    3964:	8f 89       	ldd	r24, Y+23	; 0x17
    3966:	98 8d       	ldd	r25, Y+24	; 0x18
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	40 e8       	ldi	r20, 0x80	; 128
    396e:	5f e3       	ldi	r21, 0x3F	; 63
    3970:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3974:	88 23       	and	r24, r24
    3976:	2c f4       	brge	.+10     	; 0x3982 <LED_Switch+0x14ae>
		__ticks = 1;
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	9c 8b       	std	Y+20, r25	; 0x14
    397e:	8b 8b       	std	Y+19, r24	; 0x13
    3980:	3f c0       	rjmp	.+126    	; 0x3a00 <LED_Switch+0x152c>
	else if (__tmp > 65535)
    3982:	6d 89       	ldd	r22, Y+21	; 0x15
    3984:	7e 89       	ldd	r23, Y+22	; 0x16
    3986:	8f 89       	ldd	r24, Y+23	; 0x17
    3988:	98 8d       	ldd	r25, Y+24	; 0x18
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	3f ef       	ldi	r19, 0xFF	; 255
    398e:	4f e7       	ldi	r20, 0x7F	; 127
    3990:	57 e4       	ldi	r21, 0x47	; 71
    3992:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3996:	18 16       	cp	r1, r24
    3998:	4c f5       	brge	.+82     	; 0x39ec <LED_Switch+0x1518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399a:	69 8d       	ldd	r22, Y+25	; 0x19
    399c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    399e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e2       	ldi	r20, 0x20	; 32
    39a8:	51 e4       	ldi	r21, 0x41	; 65
    39aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	9c 8b       	std	Y+20, r25	; 0x14
    39c0:	8b 8b       	std	Y+19, r24	; 0x13
    39c2:	0f c0       	rjmp	.+30     	; 0x39e2 <LED_Switch+0x150e>
    39c4:	88 ec       	ldi	r24, 0xC8	; 200
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	9a 8b       	std	Y+18, r25	; 0x12
    39ca:	89 8b       	std	Y+17, r24	; 0x11
    39cc:	89 89       	ldd	r24, Y+17	; 0x11
    39ce:	9a 89       	ldd	r25, Y+18	; 0x12
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <LED_Switch+0x14fc>
    39d4:	9a 8b       	std	Y+18, r25	; 0x12
    39d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d8:	8b 89       	ldd	r24, Y+19	; 0x13
    39da:	9c 89       	ldd	r25, Y+20	; 0x14
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	9c 8b       	std	Y+20, r25	; 0x14
    39e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e2:	8b 89       	ldd	r24, Y+19	; 0x13
    39e4:	9c 89       	ldd	r25, Y+20	; 0x14
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	69 f7       	brne	.-38     	; 0x39c4 <LED_Switch+0x14f0>
    39ea:	14 c0       	rjmp	.+40     	; 0x3a14 <LED_Switch+0x1540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ec:	6d 89       	ldd	r22, Y+21	; 0x15
    39ee:	7e 89       	ldd	r23, Y+22	; 0x16
    39f0:	8f 89       	ldd	r24, Y+23	; 0x17
    39f2:	98 8d       	ldd	r25, Y+24	; 0x18
    39f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	9c 8b       	std	Y+20, r25	; 0x14
    39fe:	8b 8b       	std	Y+19, r24	; 0x13
    3a00:	8b 89       	ldd	r24, Y+19	; 0x13
    3a02:	9c 89       	ldd	r25, Y+20	; 0x14
    3a04:	98 8b       	std	Y+16, r25	; 0x10
    3a06:	8f 87       	std	Y+15, r24	; 0x0f
    3a08:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a0a:	98 89       	ldd	r25, Y+16	; 0x10
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	f1 f7       	brne	.-4      	; 0x3a0c <LED_Switch+0x1538>
    3a10:	98 8b       	std	Y+16, r25	; 0x10
    3a12:	8f 87       	std	Y+15, r24	; 0x0f
	LED_OFF(PORT, PIN7);
    3a14:	fe 01       	movw	r30, r28
    3a16:	ef 51       	subi	r30, 0x1F	; 31
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	80 81       	ld	r24, Z
    3a1c:	67 e0       	ldi	r22, 0x07	; 7
    3a1e:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
	_delay_ms(Delay);
    3a22:	fe 01       	movw	r30, r28
    3a24:	ee 51       	subi	r30, 0x1E	; 30
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	80 81       	ld	r24, Z
    3a2a:	88 2f       	mov	r24, r24
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	a0 e0       	ldi	r26, 0x00	; 0
    3a30:	b0 e0       	ldi	r27, 0x00	; 0
    3a32:	bc 01       	movw	r22, r24
    3a34:	cd 01       	movw	r24, r26
    3a36:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	8b 87       	std	Y+11, r24	; 0x0b
    3a40:	9c 87       	std	Y+12, r25	; 0x0c
    3a42:	ad 87       	std	Y+13, r26	; 0x0d
    3a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	4a ef       	ldi	r20, 0xFA	; 250
    3a54:	54 e4       	ldi	r21, 0x44	; 68
    3a56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	8f 83       	std	Y+7, r24	; 0x07
    3a60:	98 87       	std	Y+8, r25	; 0x08
    3a62:	a9 87       	std	Y+9, r26	; 0x09
    3a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a66:	6f 81       	ldd	r22, Y+7	; 0x07
    3a68:	78 85       	ldd	r23, Y+8	; 0x08
    3a6a:	89 85       	ldd	r24, Y+9	; 0x09
    3a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e8       	ldi	r20, 0x80	; 128
    3a74:	5f e3       	ldi	r21, 0x3F	; 63
    3a76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a7a:	88 23       	and	r24, r24
    3a7c:	2c f4       	brge	.+10     	; 0x3a88 <LED_Switch+0x15b4>
		__ticks = 1;
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
    3a86:	3f c0       	rjmp	.+126    	; 0x3b06 <LED_Switch+0x1632>
	else if (__tmp > 65535)
    3a88:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8a:	78 85       	ldd	r23, Y+8	; 0x08
    3a8c:	89 85       	ldd	r24, Y+9	; 0x09
    3a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	3f ef       	ldi	r19, 0xFF	; 255
    3a94:	4f e7       	ldi	r20, 0x7F	; 127
    3a96:	57 e4       	ldi	r21, 0x47	; 71
    3a98:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a9c:	18 16       	cp	r1, r24
    3a9e:	4c f5       	brge	.+82     	; 0x3af2 <LED_Switch+0x161e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e2       	ldi	r20, 0x20	; 32
    3aae:	51 e4       	ldi	r21, 0x41	; 65
    3ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	bc 01       	movw	r22, r24
    3aba:	cd 01       	movw	r24, r26
    3abc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
    3ac8:	0f c0       	rjmp	.+30     	; 0x3ae8 <LED_Switch+0x1614>
    3aca:	88 ec       	ldi	r24, 0xC8	; 200
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	9c 83       	std	Y+4, r25	; 0x04
    3ad0:	8b 83       	std	Y+3, r24	; 0x03
    3ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad6:	01 97       	sbiw	r24, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <LED_Switch+0x1602>
    3ada:	9c 83       	std	Y+4, r25	; 0x04
    3adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ade:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	9e 83       	std	Y+6, r25	; 0x06
    3ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aea:	9e 81       	ldd	r25, Y+6	; 0x06
    3aec:	00 97       	sbiw	r24, 0x00	; 0
    3aee:	69 f7       	brne	.-38     	; 0x3aca <LED_Switch+0x15f6>
    3af0:	14 c0       	rjmp	.+40     	; 0x3b1a <LED_Switch+0x1646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af2:	6f 81       	ldd	r22, Y+7	; 0x07
    3af4:	78 85       	ldd	r23, Y+8	; 0x08
    3af6:	89 85       	ldd	r24, Y+9	; 0x09
    3af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	9e 83       	std	Y+6, r25	; 0x06
    3b04:	8d 83       	std	Y+5, r24	; 0x05
    3b06:	8d 81       	ldd	r24, Y+5	; 0x05
    3b08:	9e 81       	ldd	r25, Y+6	; 0x06
    3b0a:	9a 83       	std	Y+2, r25	; 0x02
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	9a 81       	ldd	r25, Y+2	; 0x02
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	f1 f7       	brne	.-4      	; 0x3b12 <LED_Switch+0x163e>
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	89 83       	std	Y+1, r24	; 0x01


}
    3b1a:	ce 51       	subi	r28, 0x1E	; 30
    3b1c:	df 4f       	sbci	r29, 0xFF	; 255
    3b1e:	0f b6       	in	r0, 0x3f	; 63
    3b20:	f8 94       	cli
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	cf 91       	pop	r28
    3b2a:	df 91       	pop	r29
    3b2c:	1f 91       	pop	r17
    3b2e:	0f 91       	pop	r16
    3b30:	08 95       	ret

00003b32 <LCD_SendData>:
/*Function Print Data from Type Integer
 * Receive PORT_CPIN this Port which Connected with pins RS , RW , EN
 * RS , RW ,EN Attach with PIN0 and PIN1 , PIN2 Respectlly
 *Receive PORT_OUT which connected with Pins form D0 to D7
 */
void LCD_SendData(u8 PORT_CPIN, u8 PORT_OUT, u8 Data_Int) {
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
    3b3a:	61 97       	sbiw	r28, 0x11	; 17
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	f8 94       	cli
    3b40:	de bf       	out	0x3e, r29	; 62
    3b42:	0f be       	out	0x3f, r0	; 63
    3b44:	cd bf       	out	0x3d, r28	; 61
    3b46:	8f 87       	std	Y+15, r24	; 0x0f
    3b48:	68 8b       	std	Y+16, r22	; 0x10
    3b4a:	49 8b       	std	Y+17, r20	; 0x11
	Set_PinValue(PORT_CPIN, PIN0, HIGH);  //RS
    3b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b4e:	60 e0       	ldi	r22, 0x00	; 0
    3b50:	41 e0       	ldi	r20, 0x01	; 1
    3b52:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
	Set_PinValue(PORT_CPIN, PIN1, LOW);  //RW
    3b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b58:	61 e0       	ldi	r22, 0x01	; 1
    3b5a:	40 e0       	ldi	r20, 0x00	; 0
    3b5c:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>

	Set_PortValue(PORT_OUT, Data_Int); //Send Data
    3b60:	88 89       	ldd	r24, Y+16	; 0x10
    3b62:	69 89       	ldd	r22, Y+17	; 0x11
    3b64:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>

	Set_PinValue(PORT_CPIN, PIN2, HIGH);  //Enable
    3b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b6a:	62 e0       	ldi	r22, 0x02	; 2
    3b6c:	41 e0       	ldi	r20, 0x01	; 1
    3b6e:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	a0 e0       	ldi	r26, 0x00	; 0
    3b78:	b0 e4       	ldi	r27, 0x40	; 64
    3b7a:	8b 87       	std	Y+11, r24	; 0x0b
    3b7c:	9c 87       	std	Y+12, r25	; 0x0c
    3b7e:	ad 87       	std	Y+13, r26	; 0x0d
    3b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	4a ef       	ldi	r20, 0xFA	; 250
    3b90:	54 e4       	ldi	r21, 0x44	; 68
    3b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	8f 83       	std	Y+7, r24	; 0x07
    3b9c:	98 87       	std	Y+8, r25	; 0x08
    3b9e:	a9 87       	std	Y+9, r26	; 0x09
    3ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba4:	78 85       	ldd	r23, Y+8	; 0x08
    3ba6:	89 85       	ldd	r24, Y+9	; 0x09
    3ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	40 e8       	ldi	r20, 0x80	; 128
    3bb0:	5f e3       	ldi	r21, 0x3F	; 63
    3bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3bb6:	88 23       	and	r24, r24
    3bb8:	2c f4       	brge	.+10     	; 0x3bc4 <LCD_SendData+0x92>
		__ticks = 1;
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	9e 83       	std	Y+6, r25	; 0x06
    3bc0:	8d 83       	std	Y+5, r24	; 0x05
    3bc2:	3f c0       	rjmp	.+126    	; 0x3c42 <LCD_SendData+0x110>
	else if (__tmp > 65535)
    3bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc6:	78 85       	ldd	r23, Y+8	; 0x08
    3bc8:	89 85       	ldd	r24, Y+9	; 0x09
    3bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	3f ef       	ldi	r19, 0xFF	; 255
    3bd0:	4f e7       	ldi	r20, 0x7F	; 127
    3bd2:	57 e4       	ldi	r21, 0x47	; 71
    3bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3bd8:	18 16       	cp	r1, r24
    3bda:	4c f5       	brge	.+82     	; 0x3c2e <LCD_SendData+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e2       	ldi	r20, 0x20	; 32
    3bea:	51 e4       	ldi	r21, 0x41	; 65
    3bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	bc 01       	movw	r22, r24
    3bf6:	cd 01       	movw	r24, r26
    3bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	9e 83       	std	Y+6, r25	; 0x06
    3c02:	8d 83       	std	Y+5, r24	; 0x05
    3c04:	0f c0       	rjmp	.+30     	; 0x3c24 <LCD_SendData+0xf2>
    3c06:	88 ec       	ldi	r24, 0xC8	; 200
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	9c 83       	std	Y+4, r25	; 0x04
    3c0c:	8b 83       	std	Y+3, r24	; 0x03
    3c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c10:	9c 81       	ldd	r25, Y+4	; 0x04
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	f1 f7       	brne	.-4      	; 0x3c12 <LCD_SendData+0xe0>
    3c16:	9c 83       	std	Y+4, r25	; 0x04
    3c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1e:	01 97       	sbiw	r24, 0x01	; 1
    3c20:	9e 83       	std	Y+6, r25	; 0x06
    3c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c24:	8d 81       	ldd	r24, Y+5	; 0x05
    3c26:	9e 81       	ldd	r25, Y+6	; 0x06
    3c28:	00 97       	sbiw	r24, 0x00	; 0
    3c2a:	69 f7       	brne	.-38     	; 0x3c06 <LCD_SendData+0xd4>
    3c2c:	14 c0       	rjmp	.+40     	; 0x3c56 <LCD_SendData+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c30:	78 85       	ldd	r23, Y+8	; 0x08
    3c32:	89 85       	ldd	r24, Y+9	; 0x09
    3c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	9e 83       	std	Y+6, r25	; 0x06
    3c40:	8d 83       	std	Y+5, r24	; 0x05
    3c42:	8d 81       	ldd	r24, Y+5	; 0x05
    3c44:	9e 81       	ldd	r25, Y+6	; 0x06
    3c46:	9a 83       	std	Y+2, r25	; 0x02
    3c48:	89 83       	std	Y+1, r24	; 0x01
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	f1 f7       	brne	.-4      	; 0x3c4e <LCD_SendData+0x11c>
    3c52:	9a 83       	std	Y+2, r25	; 0x02
    3c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Set_PinValue(PORT_CPIN, PIN2, LOW);  //Disable
    3c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c58:	62 e0       	ldi	r22, 0x02	; 2
    3c5a:	40 e0       	ldi	r20, 0x00	; 0
    3c5c:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>

}
    3c60:	61 96       	adiw	r28, 0x11	; 17
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	cf 91       	pop	r28
    3c6e:	df 91       	pop	r29
    3c70:	08 95       	ret

00003c72 <LCD_SendCommand>:
 * Receive PORT_CPIN this Port which Connected with pins RS , RW , EN
 * RS , RW ,EN Attach with PIN0 and PIN1 , PIN2 Respectlly
 *Receive PORT_OUT which connected with Pins form D0 to D7
 *Receive Data_INT That will send to command
 */
void LCD_SendCommand(u8 PORT_CPIN, u8 PORT_OUT, u8 Data_Int) {
    3c72:	df 93       	push	r29
    3c74:	cf 93       	push	r28
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
    3c7a:	61 97       	sbiw	r28, 0x11	; 17
    3c7c:	0f b6       	in	r0, 0x3f	; 63
    3c7e:	f8 94       	cli
    3c80:	de bf       	out	0x3e, r29	; 62
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	cd bf       	out	0x3d, r28	; 61
    3c86:	8f 87       	std	Y+15, r24	; 0x0f
    3c88:	68 8b       	std	Y+16, r22	; 0x10
    3c8a:	49 8b       	std	Y+17, r20	; 0x11

	Set_PinValue(PORT_CPIN, PIN0, LOW);  //RS
    3c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
	Set_PinValue(PORT_CPIN, PIN1, LOW);  //RW
    3c96:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c98:	61 e0       	ldi	r22, 0x01	; 1
    3c9a:	40 e0       	ldi	r20, 0x00	; 0
    3c9c:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
	Set_PortValue(PORT_OUT, Data_Int);      //Command
    3ca0:	88 89       	ldd	r24, Y+16	; 0x10
    3ca2:	69 89       	ldd	r22, Y+17	; 0x11
    3ca4:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>

	Set_PinValue(PORT_CPIN, PIN2, HIGH);  //Enable
    3ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3caa:	62 e0       	ldi	r22, 0x02	; 2
    3cac:	41 e0       	ldi	r20, 0x01	; 1
    3cae:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	a0 e0       	ldi	r26, 0x00	; 0
    3cb8:	b0 e4       	ldi	r27, 0x40	; 64
    3cba:	8b 87       	std	Y+11, r24	; 0x0b
    3cbc:	9c 87       	std	Y+12, r25	; 0x0c
    3cbe:	ad 87       	std	Y+13, r26	; 0x0d
    3cc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	4a ef       	ldi	r20, 0xFA	; 250
    3cd0:	54 e4       	ldi	r21, 0x44	; 68
    3cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	8f 83       	std	Y+7, r24	; 0x07
    3cdc:	98 87       	std	Y+8, r25	; 0x08
    3cde:	a9 87       	std	Y+9, r26	; 0x09
    3ce0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce4:	78 85       	ldd	r23, Y+8	; 0x08
    3ce6:	89 85       	ldd	r24, Y+9	; 0x09
    3ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e8       	ldi	r20, 0x80	; 128
    3cf0:	5f e3       	ldi	r21, 0x3F	; 63
    3cf2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3cf6:	88 23       	and	r24, r24
    3cf8:	2c f4       	brge	.+10     	; 0x3d04 <LCD_SendCommand+0x92>
		__ticks = 1;
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	9e 83       	std	Y+6, r25	; 0x06
    3d00:	8d 83       	std	Y+5, r24	; 0x05
    3d02:	3f c0       	rjmp	.+126    	; 0x3d82 <LCD_SendCommand+0x110>
	else if (__tmp > 65535)
    3d04:	6f 81       	ldd	r22, Y+7	; 0x07
    3d06:	78 85       	ldd	r23, Y+8	; 0x08
    3d08:	89 85       	ldd	r24, Y+9	; 0x09
    3d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	3f ef       	ldi	r19, 0xFF	; 255
    3d10:	4f e7       	ldi	r20, 0x7F	; 127
    3d12:	57 e4       	ldi	r21, 0x47	; 71
    3d14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d18:	18 16       	cp	r1, r24
    3d1a:	4c f5       	brge	.+82     	; 0x3d6e <LCD_SendCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e2       	ldi	r20, 0x20	; 32
    3d2a:	51 e4       	ldi	r21, 0x41	; 65
    3d2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	bc 01       	movw	r22, r24
    3d36:	cd 01       	movw	r24, r26
    3d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	9e 83       	std	Y+6, r25	; 0x06
    3d42:	8d 83       	std	Y+5, r24	; 0x05
    3d44:	0f c0       	rjmp	.+30     	; 0x3d64 <LCD_SendCommand+0xf2>
    3d46:	88 ec       	ldi	r24, 0xC8	; 200
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	9c 83       	std	Y+4, r25	; 0x04
    3d4c:	8b 83       	std	Y+3, r24	; 0x03
    3d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d50:	9c 81       	ldd	r25, Y+4	; 0x04
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	f1 f7       	brne	.-4      	; 0x3d52 <LCD_SendCommand+0xe0>
    3d56:	9c 83       	std	Y+4, r25	; 0x04
    3d58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	9e 83       	std	Y+6, r25	; 0x06
    3d62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	00 97       	sbiw	r24, 0x00	; 0
    3d6a:	69 f7       	brne	.-38     	; 0x3d46 <LCD_SendCommand+0xd4>
    3d6c:	14 c0       	rjmp	.+40     	; 0x3d96 <LCD_SendCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d70:	78 85       	ldd	r23, Y+8	; 0x08
    3d72:	89 85       	ldd	r24, Y+9	; 0x09
    3d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	9e 83       	std	Y+6, r25	; 0x06
    3d80:	8d 83       	std	Y+5, r24	; 0x05
    3d82:	8d 81       	ldd	r24, Y+5	; 0x05
    3d84:	9e 81       	ldd	r25, Y+6	; 0x06
    3d86:	9a 83       	std	Y+2, r25	; 0x02
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	f1 f7       	brne	.-4      	; 0x3d8e <LCD_SendCommand+0x11c>
    3d92:	9a 83       	std	Y+2, r25	; 0x02
    3d94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Set_PinValue(PORT_CPIN, PIN2, LOW);  //Disable
    3d96:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d98:	62 e0       	ldi	r22, 0x02	; 2
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
}
    3da0:	61 96       	adiw	r28, 0x11	; 17
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <LCD_HWIntial>:
/*Function To Set pins RW and RS and EN and PORT for Data Send
 * Receive PORT_CPIN this port for RS and RW and EN will attached it
 * Receive PORT_OUT this Port for pins from D0 to D7
 *  RS , RW ,EN Attach with PIN0 and PIN1 , PIN2 Respectlly
 */
void LCD_HWIntial(u8 PORT_CPIN, u8 PORT_OUT) {
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	00 d0       	rcall	.+0      	; 0x3db8 <LCD_HWIntial+0x6>
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
    3dbc:	89 83       	std	Y+1, r24	; 0x01
    3dbe:	6a 83       	std	Y+2, r22	; 0x02
	Set_PinDirection(PORT_CPIN, PIN0, OUTPUT);  //RS
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	41 e0       	ldi	r20, 0x01	; 1
    3dc6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
	Set_PinDirection(PORT_CPIN, PIN1, OUTPUT);  //RW
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	61 e0       	ldi	r22, 0x01	; 1
    3dce:	41 e0       	ldi	r20, 0x01	; 1
    3dd0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
	Set_PinDirection(PORT_CPIN, PIN2, OUTPUT);  //E
    3dd4:	89 81       	ldd	r24, Y+1	; 0x01
    3dd6:	62 e0       	ldi	r22, 0x02	; 2
    3dd8:	41 e0       	ldi	r20, 0x01	; 1
    3dda:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>

	Set_PortDirection(PORT_OUT, OUTPUT);
    3dde:	8a 81       	ldd	r24, Y+2	; 0x02
    3de0:	61 e0       	ldi	r22, 0x01	; 1
    3de2:	0e 94 92 09 	call	0x1324	; 0x1324 <Set_PortDirection>
}
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	cf 91       	pop	r28
    3dec:	df 91       	pop	r29
    3dee:	08 95       	ret

00003df0 <LCD_SWIntial>:
/*Function To INtialaztion LCD To Set it for Work
 * Receive PORT_CPIN this port for RS and RW and EN will attached it
 * Receive PORT_OUT this Port for pins from D0 to D7
 *  RS , RW ,EN Attach with PIN0 and PIN1 , PIN2 Respectlly
 */
void LCD_SWIntial(u8 PORT_CPIN, u8 PORT_OUT) {
    3df0:	df 93       	push	r29
    3df2:	cf 93       	push	r28
    3df4:	cd b7       	in	r28, 0x3d	; 61
    3df6:	de b7       	in	r29, 0x3e	; 62
    3df8:	ac 97       	sbiw	r28, 0x2c	; 44
    3dfa:	0f b6       	in	r0, 0x3f	; 63
    3dfc:	f8 94       	cli
    3dfe:	de bf       	out	0x3e, r29	; 62
    3e00:	0f be       	out	0x3f, r0	; 63
    3e02:	cd bf       	out	0x3d, r28	; 61
    3e04:	8b a7       	std	Y+43, r24	; 0x2b
    3e06:	6c a7       	std	Y+44, r22	; 0x2c
    3e08:	80 e0       	ldi	r24, 0x00	; 0
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	a0 e2       	ldi	r26, 0x20	; 32
    3e0e:	b2 e4       	ldi	r27, 0x42	; 66
    3e10:	8f a3       	std	Y+39, r24	; 0x27
    3e12:	98 a7       	std	Y+40, r25	; 0x28
    3e14:	a9 a7       	std	Y+41, r26	; 0x29
    3e16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e18:	6f a1       	ldd	r22, Y+39	; 0x27
    3e1a:	78 a5       	ldd	r23, Y+40	; 0x28
    3e1c:	89 a5       	ldd	r24, Y+41	; 0x29
    3e1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	4a ef       	ldi	r20, 0xFA	; 250
    3e26:	54 e4       	ldi	r21, 0x44	; 68
    3e28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	8b a3       	std	Y+35, r24	; 0x23
    3e32:	9c a3       	std	Y+36, r25	; 0x24
    3e34:	ad a3       	std	Y+37, r26	; 0x25
    3e36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e38:	6b a1       	ldd	r22, Y+35	; 0x23
    3e3a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e3c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e3e:	9e a1       	ldd	r25, Y+38	; 0x26
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e8       	ldi	r20, 0x80	; 128
    3e46:	5f e3       	ldi	r21, 0x3F	; 63
    3e48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e4c:	88 23       	and	r24, r24
    3e4e:	2c f4       	brge	.+10     	; 0x3e5a <LCD_SWIntial+0x6a>
		__ticks = 1;
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	9a a3       	std	Y+34, r25	; 0x22
    3e56:	89 a3       	std	Y+33, r24	; 0x21
    3e58:	3f c0       	rjmp	.+126    	; 0x3ed8 <LCD_SWIntial+0xe8>
	else if (__tmp > 65535)
    3e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    3e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    3e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    3e60:	9e a1       	ldd	r25, Y+38	; 0x26
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	3f ef       	ldi	r19, 0xFF	; 255
    3e66:	4f e7       	ldi	r20, 0x7F	; 127
    3e68:	57 e4       	ldi	r21, 0x47	; 71
    3e6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3e6e:	18 16       	cp	r1, r24
    3e70:	4c f5       	brge	.+82     	; 0x3ec4 <LCD_SWIntial+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e72:	6f a1       	ldd	r22, Y+39	; 0x27
    3e74:	78 a5       	ldd	r23, Y+40	; 0x28
    3e76:	89 a5       	ldd	r24, Y+41	; 0x29
    3e78:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	40 e2       	ldi	r20, 0x20	; 32
    3e80:	51 e4       	ldi	r21, 0x41	; 65
    3e82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	bc 01       	movw	r22, r24
    3e8c:	cd 01       	movw	r24, r26
    3e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	9a a3       	std	Y+34, r25	; 0x22
    3e98:	89 a3       	std	Y+33, r24	; 0x21
    3e9a:	0f c0       	rjmp	.+30     	; 0x3eba <LCD_SWIntial+0xca>
    3e9c:	88 ec       	ldi	r24, 0xC8	; 200
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	98 a3       	std	Y+32, r25	; 0x20
    3ea2:	8f 8f       	std	Y+31, r24	; 0x1f
    3ea4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ea6:	98 a1       	ldd	r25, Y+32	; 0x20
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	f1 f7       	brne	.-4      	; 0x3ea8 <LCD_SWIntial+0xb8>
    3eac:	98 a3       	std	Y+32, r25	; 0x20
    3eae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb0:	89 a1       	ldd	r24, Y+33	; 0x21
    3eb2:	9a a1       	ldd	r25, Y+34	; 0x22
    3eb4:	01 97       	sbiw	r24, 0x01	; 1
    3eb6:	9a a3       	std	Y+34, r25	; 0x22
    3eb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eba:	89 a1       	ldd	r24, Y+33	; 0x21
    3ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    3ebe:	00 97       	sbiw	r24, 0x00	; 0
    3ec0:	69 f7       	brne	.-38     	; 0x3e9c <LCD_SWIntial+0xac>
    3ec2:	14 c0       	rjmp	.+40     	; 0x3eec <LCD_SWIntial+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ec6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ec8:	8d a1       	ldd	r24, Y+37	; 0x25
    3eca:	9e a1       	ldd	r25, Y+38	; 0x26
    3ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	9a a3       	std	Y+34, r25	; 0x22
    3ed6:	89 a3       	std	Y+33, r24	; 0x21
    3ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    3eda:	9a a1       	ldd	r25, Y+34	; 0x22
    3edc:	9e 8f       	std	Y+30, r25	; 0x1e
    3ede:	8d 8f       	std	Y+29, r24	; 0x1d
    3ee0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ee2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ee4:	01 97       	sbiw	r24, 0x01	; 1
    3ee6:	f1 f7       	brne	.-4      	; 0x3ee4 <LCD_SWIntial+0xf4>
    3ee8:	9e 8f       	std	Y+30, r25	; 0x1e
    3eea:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);
	LCD_SendCommand(PORT_CPIN, PORT_OUT, LINE_2_8BIT);   //Command
    3eec:	8b a5       	ldd	r24, Y+43	; 0x2b
    3eee:	6c a5       	ldd	r22, Y+44	; 0x2c
    3ef0:	48 e3       	ldi	r20, 0x38	; 56
    3ef2:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	a0 e2       	ldi	r26, 0x20	; 32
    3efc:	b2 e4       	ldi	r27, 0x42	; 66
    3efe:	89 8f       	std	Y+25, r24	; 0x19
    3f00:	9a 8f       	std	Y+26, r25	; 0x1a
    3f02:	ab 8f       	std	Y+27, r26	; 0x1b
    3f04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f06:	69 8d       	ldd	r22, Y+25	; 0x19
    3f08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	4a ef       	ldi	r20, 0xFA	; 250
    3f14:	54 e4       	ldi	r21, 0x44	; 68
    3f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	8d 8b       	std	Y+21, r24	; 0x15
    3f20:	9e 8b       	std	Y+22, r25	; 0x16
    3f22:	af 8b       	std	Y+23, r26	; 0x17
    3f24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f26:	6d 89       	ldd	r22, Y+21	; 0x15
    3f28:	7e 89       	ldd	r23, Y+22	; 0x16
    3f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	40 e8       	ldi	r20, 0x80	; 128
    3f34:	5f e3       	ldi	r21, 0x3F	; 63
    3f36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3f3a:	88 23       	and	r24, r24
    3f3c:	2c f4       	brge	.+10     	; 0x3f48 <LCD_SWIntial+0x158>
		__ticks = 1;
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	9c 8b       	std	Y+20, r25	; 0x14
    3f44:	8b 8b       	std	Y+19, r24	; 0x13
    3f46:	3f c0       	rjmp	.+126    	; 0x3fc6 <LCD_SWIntial+0x1d6>
	else if (__tmp > 65535)
    3f48:	6d 89       	ldd	r22, Y+21	; 0x15
    3f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	3f ef       	ldi	r19, 0xFF	; 255
    3f54:	4f e7       	ldi	r20, 0x7F	; 127
    3f56:	57 e4       	ldi	r21, 0x47	; 71
    3f58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3f5c:	18 16       	cp	r1, r24
    3f5e:	4c f5       	brge	.+82     	; 0x3fb2 <LCD_SWIntial+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f60:	69 8d       	ldd	r22, Y+25	; 0x19
    3f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e2       	ldi	r20, 0x20	; 32
    3f6e:	51 e4       	ldi	r21, 0x41	; 65
    3f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f74:	dc 01       	movw	r26, r24
    3f76:	cb 01       	movw	r24, r22
    3f78:	bc 01       	movw	r22, r24
    3f7a:	cd 01       	movw	r24, r26
    3f7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	9c 8b       	std	Y+20, r25	; 0x14
    3f86:	8b 8b       	std	Y+19, r24	; 0x13
    3f88:	0f c0       	rjmp	.+30     	; 0x3fa8 <LCD_SWIntial+0x1b8>
    3f8a:	88 ec       	ldi	r24, 0xC8	; 200
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	9a 8b       	std	Y+18, r25	; 0x12
    3f90:	89 8b       	std	Y+17, r24	; 0x11
    3f92:	89 89       	ldd	r24, Y+17	; 0x11
    3f94:	9a 89       	ldd	r25, Y+18	; 0x12
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	f1 f7       	brne	.-4      	; 0x3f96 <LCD_SWIntial+0x1a6>
    3f9a:	9a 8b       	std	Y+18, r25	; 0x12
    3f9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	9c 8b       	std	Y+20, r25	; 0x14
    3fa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3faa:	9c 89       	ldd	r25, Y+20	; 0x14
    3fac:	00 97       	sbiw	r24, 0x00	; 0
    3fae:	69 f7       	brne	.-38     	; 0x3f8a <LCD_SWIntial+0x19a>
    3fb0:	14 c0       	rjmp	.+40     	; 0x3fda <LCD_SWIntial+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    3fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    3fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    3fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	cb 01       	movw	r24, r22
    3fc2:	9c 8b       	std	Y+20, r25	; 0x14
    3fc4:	8b 8b       	std	Y+19, r24	; 0x13
    3fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    3fca:	98 8b       	std	Y+16, r25	; 0x10
    3fcc:	8f 87       	std	Y+15, r24	; 0x0f
    3fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd0:	98 89       	ldd	r25, Y+16	; 0x10
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	f1 f7       	brne	.-4      	; 0x3fd2 <LCD_SWIntial+0x1e2>
    3fd6:	98 8b       	std	Y+16, r25	; 0x10
    3fd8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);
	LCD_SendCommand(PORT_CPIN, PORT_OUT, CLEAR);   //Display Clear
    3fda:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fdc:	6c a5       	ldd	r22, Y+44	; 0x2c
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	a0 e2       	ldi	r26, 0x20	; 32
    3fea:	b2 e4       	ldi	r27, 0x42	; 66
    3fec:	8b 87       	std	Y+11, r24	; 0x0b
    3fee:	9c 87       	std	Y+12, r25	; 0x0c
    3ff0:	ad 87       	std	Y+13, r26	; 0x0d
    3ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	4a ef       	ldi	r20, 0xFA	; 250
    4002:	54 e4       	ldi	r21, 0x44	; 68
    4004:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	8f 83       	std	Y+7, r24	; 0x07
    400e:	98 87       	std	Y+8, r25	; 0x08
    4010:	a9 87       	std	Y+9, r26	; 0x09
    4012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4014:	6f 81       	ldd	r22, Y+7	; 0x07
    4016:	78 85       	ldd	r23, Y+8	; 0x08
    4018:	89 85       	ldd	r24, Y+9	; 0x09
    401a:	9a 85       	ldd	r25, Y+10	; 0x0a
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e8       	ldi	r20, 0x80	; 128
    4022:	5f e3       	ldi	r21, 0x3F	; 63
    4024:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4028:	88 23       	and	r24, r24
    402a:	2c f4       	brge	.+10     	; 0x4036 <LCD_SWIntial+0x246>
		__ticks = 1;
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	9e 83       	std	Y+6, r25	; 0x06
    4032:	8d 83       	std	Y+5, r24	; 0x05
    4034:	3f c0       	rjmp	.+126    	; 0x40b4 <LCD_SWIntial+0x2c4>
	else if (__tmp > 65535)
    4036:	6f 81       	ldd	r22, Y+7	; 0x07
    4038:	78 85       	ldd	r23, Y+8	; 0x08
    403a:	89 85       	ldd	r24, Y+9	; 0x09
    403c:	9a 85       	ldd	r25, Y+10	; 0x0a
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	3f ef       	ldi	r19, 0xFF	; 255
    4042:	4f e7       	ldi	r20, 0x7F	; 127
    4044:	57 e4       	ldi	r21, 0x47	; 71
    4046:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    404a:	18 16       	cp	r1, r24
    404c:	4c f5       	brge	.+82     	; 0x40a0 <LCD_SWIntial+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4050:	7c 85       	ldd	r23, Y+12	; 0x0c
    4052:	8d 85       	ldd	r24, Y+13	; 0x0d
    4054:	9e 85       	ldd	r25, Y+14	; 0x0e
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	40 e2       	ldi	r20, 0x20	; 32
    405c:	51 e4       	ldi	r21, 0x41	; 65
    405e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	bc 01       	movw	r22, r24
    4068:	cd 01       	movw	r24, r26
    406a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	9e 83       	std	Y+6, r25	; 0x06
    4074:	8d 83       	std	Y+5, r24	; 0x05
    4076:	0f c0       	rjmp	.+30     	; 0x4096 <LCD_SWIntial+0x2a6>
    4078:	88 ec       	ldi	r24, 0xC8	; 200
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	9c 83       	std	Y+4, r25	; 0x04
    407e:	8b 83       	std	Y+3, r24	; 0x03
    4080:	8b 81       	ldd	r24, Y+3	; 0x03
    4082:	9c 81       	ldd	r25, Y+4	; 0x04
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <LCD_SWIntial+0x294>
    4088:	9c 83       	std	Y+4, r25	; 0x04
    408a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408c:	8d 81       	ldd	r24, Y+5	; 0x05
    408e:	9e 81       	ldd	r25, Y+6	; 0x06
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	9e 83       	std	Y+6, r25	; 0x06
    4094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4096:	8d 81       	ldd	r24, Y+5	; 0x05
    4098:	9e 81       	ldd	r25, Y+6	; 0x06
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	69 f7       	brne	.-38     	; 0x4078 <LCD_SWIntial+0x288>
    409e:	14 c0       	rjmp	.+40     	; 0x40c8 <LCD_SWIntial+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a0:	6f 81       	ldd	r22, Y+7	; 0x07
    40a2:	78 85       	ldd	r23, Y+8	; 0x08
    40a4:	89 85       	ldd	r24, Y+9	; 0x09
    40a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9e 83       	std	Y+6, r25	; 0x06
    40b2:	8d 83       	std	Y+5, r24	; 0x05
    40b4:	8d 81       	ldd	r24, Y+5	; 0x05
    40b6:	9e 81       	ldd	r25, Y+6	; 0x06
    40b8:	9a 83       	std	Y+2, r25	; 0x02
    40ba:	89 83       	std	Y+1, r24	; 0x01
    40bc:	89 81       	ldd	r24, Y+1	; 0x01
    40be:	9a 81       	ldd	r25, Y+2	; 0x02
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <LCD_SWIntial+0x2d0>
    40c4:	9a 83       	std	Y+2, r25	; 0x02
    40c6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);
	LCD_SendCommand(PORT_CPIN, PORT_OUT, CURSOR_OFF);   //Display OFF
    40c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    40ca:	6c a5       	ldd	r22, Y+44	; 0x2c
    40cc:	4c e0       	ldi	r20, 0x0C	; 12
    40ce:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
}
    40d2:	ac 96       	adiw	r28, 0x2c	; 44
    40d4:	0f b6       	in	r0, 0x3f	; 63
    40d6:	f8 94       	cli
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	cd bf       	out	0x3d, r28	; 61
    40de:	cf 91       	pop	r28
    40e0:	df 91       	pop	r29
    40e2:	08 95       	ret

000040e4 <LCD_SendString>:



void LCD_SendString(u8 PORT_CPIN, u8 PORT_OUT, u8 *String) {
    40e4:	df 93       	push	r29
    40e6:	cf 93       	push	r28
    40e8:	00 d0       	rcall	.+0      	; 0x40ea <LCD_SendString+0x6>
    40ea:	00 d0       	rcall	.+0      	; 0x40ec <LCD_SendString+0x8>
    40ec:	0f 92       	push	r0
    40ee:	cd b7       	in	r28, 0x3d	; 61
    40f0:	de b7       	in	r29, 0x3e	; 62
    40f2:	8a 83       	std	Y+2, r24	; 0x02
    40f4:	6b 83       	std	Y+3, r22	; 0x03
    40f6:	5d 83       	std	Y+5, r21	; 0x05
    40f8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Counter = 0;
    40fa:	19 82       	std	Y+1, r1	; 0x01
    40fc:	11 c0       	rjmp	.+34     	; 0x4120 <LCD_SendString+0x3c>
	while (String[Counter] != '\0') {
		LCD_SendData(PORT_CPIN, PORT_OUT, String[Counter]);
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	28 2f       	mov	r18, r24
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	8c 81       	ldd	r24, Y+4	; 0x04
    4106:	9d 81       	ldd	r25, Y+5	; 0x05
    4108:	fc 01       	movw	r30, r24
    410a:	e2 0f       	add	r30, r18
    410c:	f3 1f       	adc	r31, r19
    410e:	90 81       	ld	r25, Z
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	6b 81       	ldd	r22, Y+3	; 0x03
    4114:	49 2f       	mov	r20, r25
    4116:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <LCD_SendData>
		Counter++;
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	8f 5f       	subi	r24, 0xFF	; 255
    411e:	89 83       	std	Y+1, r24	; 0x01



void LCD_SendString(u8 PORT_CPIN, u8 PORT_OUT, u8 *String) {
	u8 Counter = 0;
	while (String[Counter] != '\0') {
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	28 2f       	mov	r18, r24
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	8c 81       	ldd	r24, Y+4	; 0x04
    4128:	9d 81       	ldd	r25, Y+5	; 0x05
    412a:	fc 01       	movw	r30, r24
    412c:	e2 0f       	add	r30, r18
    412e:	f3 1f       	adc	r31, r19
    4130:	80 81       	ld	r24, Z
    4132:	88 23       	and	r24, r24
    4134:	21 f7       	brne	.-56     	; 0x40fe <LCD_SendString+0x1a>
		LCD_SendData(PORT_CPIN, PORT_OUT, String[Counter]);
		Counter++;
	}

}
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	0f 90       	pop	r0
    413c:	0f 90       	pop	r0
    413e:	0f 90       	pop	r0
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	08 95       	ret

00004146 <LCD_Number>:

void LCD_Number(u8 Number_Int) {
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	0f 92       	push	r0
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	89 83       	std	Y+1, r24	; 0x01

}
    4152:	0f 90       	pop	r0
    4154:	cf 91       	pop	r28
    4156:	df 91       	pop	r29
    4158:	08 95       	ret

0000415a <LCD_SendSpicialCharacter>:

void LCD_SendSpicialCharacter() {
    415a:	df 93       	push	r29
    415c:	cf 93       	push	r28
    415e:	cd b7       	in	r28, 0x3d	; 61
    4160:	de b7       	in	r29, 0x3e	; 62

}
    4162:	cf 91       	pop	r28
    4164:	df 91       	pop	r29
    4166:	08 95       	ret

00004168 <Keybad_HWIntial>:
/*Function to Set Intialization for PORt Whcich will used with Keybad
 * Make First Four Pins as OUTPUT to Columes
 * And Make Last Four Pins As INPUT to Rows
 *Receive Name of PORT only like  (PORTA)
 */
void Keybad_HWIntial(u8 PORT) {
    4168:	df 93       	push	r29
    416a:	cf 93       	push	r28
    416c:	0f 92       	push	r0
    416e:	cd b7       	in	r28, 0x3d	; 61
    4170:	de b7       	in	r29, 0x3e	; 62
    4172:	89 83       	std	Y+1, r24	; 0x01
	Set_PortDirection(PORT, 0x0F);
    4174:	89 81       	ldd	r24, Y+1	; 0x01
    4176:	6f e0       	ldi	r22, 0x0F	; 15
    4178:	0e 94 92 09 	call	0x1324	; 0x1324 <Set_PortDirection>
	Set_PortValue(PORT, 0xF0);
    417c:	89 81       	ldd	r24, Y+1	; 0x01
    417e:	60 ef       	ldi	r22, 0xF0	; 240
    4180:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>
}
    4184:	0f 90       	pop	r0
    4186:	cf 91       	pop	r28
    4188:	df 91       	pop	r29
    418a:	08 95       	ret

0000418c <Keybad_SWIntial>:
 *Set Part Which Make Keybad Work and Return Values Which Wanted
 *Be careful if you use Port Expected PORTA  you must go to function and Edit it
 */


u8 Keybad_SWIntial() {
    418c:	df 93       	push	r29
    418e:	cf 93       	push	r28
    4190:	cd b7       	in	r28, 0x3d	; 61
    4192:	de b7       	in	r29, 0x3e	; 62
    4194:	a8 97       	sbiw	r28, 0x28	; 40
    4196:	0f b6       	in	r0, 0x3f	; 63
    4198:	f8 94       	cli
    419a:	de bf       	out	0x3e, r29	; 62
    419c:	0f be       	out	0x3f, r0	; 63
    419e:	cd bf       	out	0x3d, r28	; 61

	char keys[4][4] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' }, { '7',
			'8', '9', 'C' }, { '*', '0', '#', 'D' } };
    41a0:	ce 01       	movw	r24, r28
    41a2:	43 96       	adiw	r24, 0x13	; 19
    41a4:	9d a3       	std	Y+37, r25	; 0x25
    41a6:	8c a3       	std	Y+36, r24	; 0x24
    41a8:	ef e8       	ldi	r30, 0x8F	; 143
    41aa:	f1 e0       	ldi	r31, 0x01	; 1
    41ac:	ff a3       	std	Y+39, r31	; 0x27
    41ae:	ee a3       	std	Y+38, r30	; 0x26
    41b0:	f0 e1       	ldi	r31, 0x10	; 16
    41b2:	f8 a7       	std	Y+40, r31	; 0x28
    41b4:	ee a1       	ldd	r30, Y+38	; 0x26
    41b6:	ff a1       	ldd	r31, Y+39	; 0x27
    41b8:	00 80       	ld	r0, Z
    41ba:	8e a1       	ldd	r24, Y+38	; 0x26
    41bc:	9f a1       	ldd	r25, Y+39	; 0x27
    41be:	01 96       	adiw	r24, 0x01	; 1
    41c0:	9f a3       	std	Y+39, r25	; 0x27
    41c2:	8e a3       	std	Y+38, r24	; 0x26
    41c4:	ec a1       	ldd	r30, Y+36	; 0x24
    41c6:	fd a1       	ldd	r31, Y+37	; 0x25
    41c8:	00 82       	st	Z, r0
    41ca:	8c a1       	ldd	r24, Y+36	; 0x24
    41cc:	9d a1       	ldd	r25, Y+37	; 0x25
    41ce:	01 96       	adiw	r24, 0x01	; 1
    41d0:	9d a3       	std	Y+37, r25	; 0x25
    41d2:	8c a3       	std	Y+36, r24	; 0x24
    41d4:	98 a5       	ldd	r25, Y+40	; 0x28
    41d6:	91 50       	subi	r25, 0x01	; 1
    41d8:	98 a7       	std	Y+40, r25	; 0x28
    41da:	e8 a5       	ldd	r30, Y+40	; 0x28
    41dc:	ee 23       	and	r30, r30
    41de:	51 f7       	brne	.-44     	; 0x41b4 <Keybad_SWIntial+0x28>

	for (int col = 0; col < 4; col++) {
    41e0:	1a 8a       	std	Y+18, r1	; 0x12
    41e2:	19 8a       	std	Y+17, r1	; 0x11
    41e4:	ae c0       	rjmp	.+348    	; 0x4342 <Keybad_SWIntial+0x1b6>
		Set_PinValue(PORTB, col + 4, HIGH); // Enable one row at a time
    41e6:	89 89       	ldd	r24, Y+17	; 0x11
    41e8:	98 2f       	mov	r25, r24
    41ea:	9c 5f       	subi	r25, 0xFC	; 252
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	69 2f       	mov	r22, r25
    41f0:	41 e0       	ldi	r20, 0x01	; 1
    41f2:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	a8 e4       	ldi	r26, 0x48	; 72
    41fc:	b2 e4       	ldi	r27, 0x42	; 66
    41fe:	8b 87       	std	Y+11, r24	; 0x0b
    4200:	9c 87       	std	Y+12, r25	; 0x0c
    4202:	ad 87       	std	Y+13, r26	; 0x0d
    4204:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4206:	6b 85       	ldd	r22, Y+11	; 0x0b
    4208:	7c 85       	ldd	r23, Y+12	; 0x0c
    420a:	8d 85       	ldd	r24, Y+13	; 0x0d
    420c:	9e 85       	ldd	r25, Y+14	; 0x0e
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	4a ef       	ldi	r20, 0xFA	; 250
    4214:	54 e4       	ldi	r21, 0x44	; 68
    4216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	8f 83       	std	Y+7, r24	; 0x07
    4220:	98 87       	std	Y+8, r25	; 0x08
    4222:	a9 87       	std	Y+9, r26	; 0x09
    4224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4226:	6f 81       	ldd	r22, Y+7	; 0x07
    4228:	78 85       	ldd	r23, Y+8	; 0x08
    422a:	89 85       	ldd	r24, Y+9	; 0x09
    422c:	9a 85       	ldd	r25, Y+10	; 0x0a
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	40 e8       	ldi	r20, 0x80	; 128
    4234:	5f e3       	ldi	r21, 0x3F	; 63
    4236:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    423a:	88 23       	and	r24, r24
    423c:	2c f4       	brge	.+10     	; 0x4248 <Keybad_SWIntial+0xbc>
		__ticks = 1;
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	9e 83       	std	Y+6, r25	; 0x06
    4244:	8d 83       	std	Y+5, r24	; 0x05
    4246:	3f c0       	rjmp	.+126    	; 0x42c6 <Keybad_SWIntial+0x13a>
	else if (__tmp > 65535)
    4248:	6f 81       	ldd	r22, Y+7	; 0x07
    424a:	78 85       	ldd	r23, Y+8	; 0x08
    424c:	89 85       	ldd	r24, Y+9	; 0x09
    424e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	3f ef       	ldi	r19, 0xFF	; 255
    4254:	4f e7       	ldi	r20, 0x7F	; 127
    4256:	57 e4       	ldi	r21, 0x47	; 71
    4258:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    425c:	18 16       	cp	r1, r24
    425e:	4c f5       	brge	.+82     	; 0x42b2 <Keybad_SWIntial+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4260:	6b 85       	ldd	r22, Y+11	; 0x0b
    4262:	7c 85       	ldd	r23, Y+12	; 0x0c
    4264:	8d 85       	ldd	r24, Y+13	; 0x0d
    4266:	9e 85       	ldd	r25, Y+14	; 0x0e
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	40 e2       	ldi	r20, 0x20	; 32
    426e:	51 e4       	ldi	r21, 0x41	; 65
    4270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	bc 01       	movw	r22, r24
    427a:	cd 01       	movw	r24, r26
    427c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	9e 83       	std	Y+6, r25	; 0x06
    4286:	8d 83       	std	Y+5, r24	; 0x05
    4288:	0f c0       	rjmp	.+30     	; 0x42a8 <Keybad_SWIntial+0x11c>
    428a:	88 ec       	ldi	r24, 0xC8	; 200
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	9c 83       	std	Y+4, r25	; 0x04
    4290:	8b 83       	std	Y+3, r24	; 0x03
    4292:	8b 81       	ldd	r24, Y+3	; 0x03
    4294:	9c 81       	ldd	r25, Y+4	; 0x04
    4296:	01 97       	sbiw	r24, 0x01	; 1
    4298:	f1 f7       	brne	.-4      	; 0x4296 <Keybad_SWIntial+0x10a>
    429a:	9c 83       	std	Y+4, r25	; 0x04
    429c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    429e:	8d 81       	ldd	r24, Y+5	; 0x05
    42a0:	9e 81       	ldd	r25, Y+6	; 0x06
    42a2:	01 97       	sbiw	r24, 0x01	; 1
    42a4:	9e 83       	std	Y+6, r25	; 0x06
    42a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a8:	8d 81       	ldd	r24, Y+5	; 0x05
    42aa:	9e 81       	ldd	r25, Y+6	; 0x06
    42ac:	00 97       	sbiw	r24, 0x00	; 0
    42ae:	69 f7       	brne	.-38     	; 0x428a <Keybad_SWIntial+0xfe>
    42b0:	14 c0       	rjmp	.+40     	; 0x42da <Keybad_SWIntial+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b2:	6f 81       	ldd	r22, Y+7	; 0x07
    42b4:	78 85       	ldd	r23, Y+8	; 0x08
    42b6:	89 85       	ldd	r24, Y+9	; 0x09
    42b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42be:	dc 01       	movw	r26, r24
    42c0:	cb 01       	movw	r24, r22
    42c2:	9e 83       	std	Y+6, r25	; 0x06
    42c4:	8d 83       	std	Y+5, r24	; 0x05
    42c6:	8d 81       	ldd	r24, Y+5	; 0x05
    42c8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ca:	9a 83       	std	Y+2, r25	; 0x02
    42cc:	89 83       	std	Y+1, r24	; 0x01
    42ce:	89 81       	ldd	r24, Y+1	; 0x01
    42d0:	9a 81       	ldd	r25, Y+2	; 0x02
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	f1 f7       	brne	.-4      	; 0x42d2 <Keybad_SWIntial+0x146>
    42d6:	9a 83       	std	Y+2, r25	; 0x02
    42d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50); // Delay for stability

		for (int row = 4; row < 8; row++) {
    42da:	84 e0       	ldi	r24, 0x04	; 4
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	98 8b       	std	Y+16, r25	; 0x10
    42e0:	8f 87       	std	Y+15, r24	; 0x0f
    42e2:	25 c0       	rjmp	.+74     	; 0x432e <Keybad_SWIntial+0x1a2>
			if (!Get_PinValue(PINb, col)) {
    42e4:	e6 e3       	ldi	r30, 0x36	; 54
    42e6:	f0 e0       	ldi	r31, 0x00	; 0
    42e8:	80 81       	ld	r24, Z
    42ea:	99 89       	ldd	r25, Y+17	; 0x11
    42ec:	69 2f       	mov	r22, r25
    42ee:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Get_PinValue>
    42f2:	88 23       	and	r24, r24
    42f4:	b9 f4       	brne	.+46     	; 0x4324 <Keybad_SWIntial+0x198>
				return keys[col][row - 4];
    42f6:	29 89       	ldd	r18, Y+17	; 0x11
    42f8:	3a 89       	ldd	r19, Y+18	; 0x12
    42fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    42fc:	98 89       	ldd	r25, Y+16	; 0x10
    42fe:	ac 01       	movw	r20, r24
    4300:	44 50       	subi	r20, 0x04	; 4
    4302:	50 40       	sbci	r21, 0x00	; 0
    4304:	22 0f       	add	r18, r18
    4306:	33 1f       	adc	r19, r19
    4308:	22 0f       	add	r18, r18
    430a:	33 1f       	adc	r19, r19
    430c:	ce 01       	movw	r24, r28
    430e:	01 96       	adiw	r24, 0x01	; 1
    4310:	82 0f       	add	r24, r18
    4312:	93 1f       	adc	r25, r19
    4314:	84 0f       	add	r24, r20
    4316:	95 1f       	adc	r25, r21
    4318:	fc 01       	movw	r30, r24
    431a:	72 96       	adiw	r30, 0x12	; 18
    431c:	80 81       	ld	r24, Z
    431e:	8b a3       	std	Y+35, r24	; 0x23
	}



	//return '\0'; // No key pressed
}
    4320:	8b a1       	ldd	r24, Y+35	; 0x23
    4322:	15 c0       	rjmp	.+42     	; 0x434e <Keybad_SWIntial+0x1c2>

	for (int col = 0; col < 4; col++) {
		Set_PinValue(PORTB, col + 4, HIGH); // Enable one row at a time
		_delay_ms(50); // Delay for stability

		for (int row = 4; row < 8; row++) {
    4324:	8f 85       	ldd	r24, Y+15	; 0x0f
    4326:	98 89       	ldd	r25, Y+16	; 0x10
    4328:	01 96       	adiw	r24, 0x01	; 1
    432a:	98 8b       	std	Y+16, r25	; 0x10
    432c:	8f 87       	std	Y+15, r24	; 0x0f
    432e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4330:	98 89       	ldd	r25, Y+16	; 0x10
    4332:	88 30       	cpi	r24, 0x08	; 8
    4334:	91 05       	cpc	r25, r1
    4336:	b4 f2       	brlt	.-84     	; 0x42e4 <Keybad_SWIntial+0x158>
u8 Keybad_SWIntial() {

	char keys[4][4] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' }, { '7',
			'8', '9', 'C' }, { '*', '0', '#', 'D' } };

	for (int col = 0; col < 4; col++) {
    4338:	89 89       	ldd	r24, Y+17	; 0x11
    433a:	9a 89       	ldd	r25, Y+18	; 0x12
    433c:	01 96       	adiw	r24, 0x01	; 1
    433e:	9a 8b       	std	Y+18, r25	; 0x12
    4340:	89 8b       	std	Y+17, r24	; 0x11
    4342:	89 89       	ldd	r24, Y+17	; 0x11
    4344:	9a 89       	ldd	r25, Y+18	; 0x12
    4346:	84 30       	cpi	r24, 0x04	; 4
    4348:	91 05       	cpc	r25, r1
    434a:	0c f4       	brge	.+2      	; 0x434e <Keybad_SWIntial+0x1c2>
    434c:	4c cf       	rjmp	.-360    	; 0x41e6 <Keybad_SWIntial+0x5a>
	}



	//return '\0'; // No key pressed
}
    434e:	a8 96       	adiw	r28, 0x28	; 40
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	cf 91       	pop	r28
    435c:	df 91       	pop	r29
    435e:	08 95       	ret

00004360 <Keybad_Value>:

/*Special Function to Set Values Which Keybad Will Returned it
 * Made Every Value Build it place in keybad
 *Receive value from function of Keybad_SWIntial()
 */
static u8 Keybad_Value(u8 Number) {
    4360:	df 93       	push	r29
    4362:	cf 93       	push	r28
    4364:	00 d0       	rcall	.+0      	; 0x4366 <Keybad_Value+0x6>
    4366:	00 d0       	rcall	.+0      	; 0x4368 <Keybad_Value+0x8>
    4368:	0f 92       	push	r0
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
    436e:	89 83       	std	Y+1, r24	; 0x01

	switch (Number) {
    4370:	89 81       	ldd	r24, Y+1	; 0x01
    4372:	28 2f       	mov	r18, r24
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	3c 83       	std	Y+4, r19	; 0x04
    4378:	2b 83       	std	Y+3, r18	; 0x03
    437a:	8b 81       	ldd	r24, Y+3	; 0x03
    437c:	9c 81       	ldd	r25, Y+4	; 0x04
    437e:	88 30       	cpi	r24, 0x08	; 8
    4380:	91 05       	cpc	r25, r1
    4382:	09 f4       	brne	.+2      	; 0x4386 <Keybad_Value+0x26>
    4384:	70 c0       	rjmp	.+224    	; 0x4466 <Keybad_Value+0x106>
    4386:	2b 81       	ldd	r18, Y+3	; 0x03
    4388:	3c 81       	ldd	r19, Y+4	; 0x04
    438a:	29 30       	cpi	r18, 0x09	; 9
    438c:	31 05       	cpc	r19, r1
    438e:	5c f5       	brge	.+86     	; 0x43e6 <Keybad_Value+0x86>
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	9c 81       	ldd	r25, Y+4	; 0x04
    4394:	84 30       	cpi	r24, 0x04	; 4
    4396:	91 05       	cpc	r25, r1
    4398:	09 f4       	brne	.+2      	; 0x439c <Keybad_Value+0x3c>
    439a:	59 c0       	rjmp	.+178    	; 0x444e <Keybad_Value+0xee>
    439c:	2b 81       	ldd	r18, Y+3	; 0x03
    439e:	3c 81       	ldd	r19, Y+4	; 0x04
    43a0:	25 30       	cpi	r18, 0x05	; 5
    43a2:	31 05       	cpc	r19, r1
    43a4:	9c f4       	brge	.+38     	; 0x43cc <Keybad_Value+0x6c>
    43a6:	8b 81       	ldd	r24, Y+3	; 0x03
    43a8:	9c 81       	ldd	r25, Y+4	; 0x04
    43aa:	82 30       	cpi	r24, 0x02	; 2
    43ac:	91 05       	cpc	r25, r1
    43ae:	09 f4       	brne	.+2      	; 0x43b2 <Keybad_Value+0x52>
    43b0:	48 c0       	rjmp	.+144    	; 0x4442 <Keybad_Value+0xe2>
    43b2:	2b 81       	ldd	r18, Y+3	; 0x03
    43b4:	3c 81       	ldd	r19, Y+4	; 0x04
    43b6:	23 30       	cpi	r18, 0x03	; 3
    43b8:	31 05       	cpc	r19, r1
    43ba:	0c f0       	brlt	.+2      	; 0x43be <Keybad_Value+0x5e>
    43bc:	45 c0       	rjmp	.+138    	; 0x4448 <Keybad_Value+0xe8>
    43be:	8b 81       	ldd	r24, Y+3	; 0x03
    43c0:	9c 81       	ldd	r25, Y+4	; 0x04
    43c2:	81 30       	cpi	r24, 0x01	; 1
    43c4:	91 05       	cpc	r25, r1
    43c6:	09 f4       	brne	.+2      	; 0x43ca <Keybad_Value+0x6a>
    43c8:	39 c0       	rjmp	.+114    	; 0x443c <Keybad_Value+0xdc>
    43ca:	68 c0       	rjmp	.+208    	; 0x449c <Keybad_Value+0x13c>
    43cc:	2b 81       	ldd	r18, Y+3	; 0x03
    43ce:	3c 81       	ldd	r19, Y+4	; 0x04
    43d0:	26 30       	cpi	r18, 0x06	; 6
    43d2:	31 05       	cpc	r19, r1
    43d4:	09 f4       	brne	.+2      	; 0x43d8 <Keybad_Value+0x78>
    43d6:	41 c0       	rjmp	.+130    	; 0x445a <Keybad_Value+0xfa>
    43d8:	8b 81       	ldd	r24, Y+3	; 0x03
    43da:	9c 81       	ldd	r25, Y+4	; 0x04
    43dc:	87 30       	cpi	r24, 0x07	; 7
    43de:	91 05       	cpc	r25, r1
    43e0:	0c f0       	brlt	.+2      	; 0x43e4 <Keybad_Value+0x84>
    43e2:	3e c0       	rjmp	.+124    	; 0x4460 <Keybad_Value+0x100>
    43e4:	37 c0       	rjmp	.+110    	; 0x4454 <Keybad_Value+0xf4>
    43e6:	2b 81       	ldd	r18, Y+3	; 0x03
    43e8:	3c 81       	ldd	r19, Y+4	; 0x04
    43ea:	2c 30       	cpi	r18, 0x0C	; 12
    43ec:	31 05       	cpc	r19, r1
    43ee:	09 f4       	brne	.+2      	; 0x43f2 <Keybad_Value+0x92>
    43f0:	46 c0       	rjmp	.+140    	; 0x447e <Keybad_Value+0x11e>
    43f2:	8b 81       	ldd	r24, Y+3	; 0x03
    43f4:	9c 81       	ldd	r25, Y+4	; 0x04
    43f6:	8d 30       	cpi	r24, 0x0D	; 13
    43f8:	91 05       	cpc	r25, r1
    43fa:	5c f4       	brge	.+22     	; 0x4412 <Keybad_Value+0xb2>
    43fc:	2b 81       	ldd	r18, Y+3	; 0x03
    43fe:	3c 81       	ldd	r19, Y+4	; 0x04
    4400:	2a 30       	cpi	r18, 0x0A	; 10
    4402:	31 05       	cpc	r19, r1
    4404:	b1 f1       	breq	.+108    	; 0x4472 <Keybad_Value+0x112>
    4406:	8b 81       	ldd	r24, Y+3	; 0x03
    4408:	9c 81       	ldd	r25, Y+4	; 0x04
    440a:	8b 30       	cpi	r24, 0x0B	; 11
    440c:	91 05       	cpc	r25, r1
    440e:	a4 f5       	brge	.+104    	; 0x4478 <Keybad_Value+0x118>
    4410:	2d c0       	rjmp	.+90     	; 0x446c <Keybad_Value+0x10c>
    4412:	2b 81       	ldd	r18, Y+3	; 0x03
    4414:	3c 81       	ldd	r19, Y+4	; 0x04
    4416:	2e 30       	cpi	r18, 0x0E	; 14
    4418:	31 05       	cpc	r19, r1
    441a:	b9 f1       	breq	.+110    	; 0x448a <Keybad_Value+0x12a>
    441c:	8b 81       	ldd	r24, Y+3	; 0x03
    441e:	9c 81       	ldd	r25, Y+4	; 0x04
    4420:	8e 30       	cpi	r24, 0x0E	; 14
    4422:	91 05       	cpc	r25, r1
    4424:	7c f1       	brlt	.+94     	; 0x4484 <Keybad_Value+0x124>
    4426:	2b 81       	ldd	r18, Y+3	; 0x03
    4428:	3c 81       	ldd	r19, Y+4	; 0x04
    442a:	2f 30       	cpi	r18, 0x0F	; 15
    442c:	31 05       	cpc	r19, r1
    442e:	81 f1       	breq	.+96     	; 0x4490 <Keybad_Value+0x130>
    4430:	8b 81       	ldd	r24, Y+3	; 0x03
    4432:	9c 81       	ldd	r25, Y+4	; 0x04
    4434:	80 31       	cpi	r24, 0x10	; 16
    4436:	91 05       	cpc	r25, r1
    4438:	71 f1       	breq	.+92     	; 0x4496 <Keybad_Value+0x136>
    443a:	30 c0       	rjmp	.+96     	; 0x449c <Keybad_Value+0x13c>
	case 1:
		return '1';
    443c:	91 e3       	ldi	r25, 0x31	; 49
    443e:	9a 83       	std	Y+2, r25	; 0x02
    4440:	2e c0       	rjmp	.+92     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 2:
		return '2';
    4442:	22 e3       	ldi	r18, 0x32	; 50
    4444:	2a 83       	std	Y+2, r18	; 0x02
    4446:	2b c0       	rjmp	.+86     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 3:
		return '3';
    4448:	33 e3       	ldi	r19, 0x33	; 51
    444a:	3a 83       	std	Y+2, r19	; 0x02
    444c:	28 c0       	rjmp	.+80     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 4:
		return 'A';
    444e:	81 e4       	ldi	r24, 0x41	; 65
    4450:	8a 83       	std	Y+2, r24	; 0x02
    4452:	25 c0       	rjmp	.+74     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 5:
		return '4';
    4454:	94 e3       	ldi	r25, 0x34	; 52
    4456:	9a 83       	std	Y+2, r25	; 0x02
    4458:	22 c0       	rjmp	.+68     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 6:
		return '5';
    445a:	25 e3       	ldi	r18, 0x35	; 53
    445c:	2a 83       	std	Y+2, r18	; 0x02
    445e:	1f c0       	rjmp	.+62     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 7:
		return '6';
    4460:	36 e3       	ldi	r19, 0x36	; 54
    4462:	3a 83       	std	Y+2, r19	; 0x02
    4464:	1c c0       	rjmp	.+56     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 8:
		return 'B';
    4466:	82 e4       	ldi	r24, 0x42	; 66
    4468:	8a 83       	std	Y+2, r24	; 0x02
    446a:	19 c0       	rjmp	.+50     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 9:
		return '7';
    446c:	97 e3       	ldi	r25, 0x37	; 55
    446e:	9a 83       	std	Y+2, r25	; 0x02
    4470:	16 c0       	rjmp	.+44     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 10:
		return '8';
    4472:	28 e3       	ldi	r18, 0x38	; 56
    4474:	2a 83       	std	Y+2, r18	; 0x02
    4476:	13 c0       	rjmp	.+38     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 11:
		return '9';
    4478:	39 e3       	ldi	r19, 0x39	; 57
    447a:	3a 83       	std	Y+2, r19	; 0x02
    447c:	10 c0       	rjmp	.+32     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 12:
		return 'C';
    447e:	83 e4       	ldi	r24, 0x43	; 67
    4480:	8a 83       	std	Y+2, r24	; 0x02
    4482:	0d c0       	rjmp	.+26     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 13:
		return '*';
    4484:	9a e2       	ldi	r25, 0x2A	; 42
    4486:	9a 83       	std	Y+2, r25	; 0x02
    4488:	0a c0       	rjmp	.+20     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 14:
		return '0';
    448a:	20 e3       	ldi	r18, 0x30	; 48
    448c:	2a 83       	std	Y+2, r18	; 0x02
    448e:	07 c0       	rjmp	.+14     	; 0x449e <Keybad_Value+0x13e>
		break;
	case 15:
		return '#';
    4490:	33 e2       	ldi	r19, 0x23	; 35
    4492:	3a 83       	std	Y+2, r19	; 0x02
    4494:	04 c0       	rjmp	.+8      	; 0x449e <Keybad_Value+0x13e>
		break;
	case 16:
		return 'D';
    4496:	84 e4       	ldi	r24, 0x44	; 68
    4498:	8a 83       	std	Y+2, r24	; 0x02
    449a:	01 c0       	rjmp	.+2      	; 0x449e <Keybad_Value+0x13e>
    449c:	02 c0       	rjmp	.+4      	; 0x44a2 <Keybad_Value+0x142>
		break;
		//default:
		//return '%';
		//break;
	}
}
    449e:	9a 81       	ldd	r25, Y+2	; 0x02
    44a0:	9d 83       	std	Y+5, r25	; 0x05
    44a2:	8d 81       	ldd	r24, Y+5	; 0x05
    44a4:	0f 90       	pop	r0
    44a6:	0f 90       	pop	r0
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	cf 91       	pop	r28
    44b0:	df 91       	pop	r29
    44b2:	08 95       	ret

000044b4 <Button_InitPullup>:
#include"Button_Interface.h"
/*Function to Define Pin As INPUT PULLUP
 * Receive Name Port like (PORTA)
 * Receive Name Pin like (PIN_N)
 */
void Button_InitPullup(u8 PORT, u8 PIN) {
    44b4:	df 93       	push	r29
    44b6:	cf 93       	push	r28
    44b8:	00 d0       	rcall	.+0      	; 0x44ba <Button_InitPullup+0x6>
    44ba:	cd b7       	in	r28, 0x3d	; 61
    44bc:	de b7       	in	r29, 0x3e	; 62
    44be:	89 83       	std	Y+1, r24	; 0x01
    44c0:	6a 83       	std	Y+2, r22	; 0x02
	Set_PinDirection(PORT, PIN, INPUT);
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	6a 81       	ldd	r22, Y+2	; 0x02
    44c6:	40 e0       	ldi	r20, 0x00	; 0
    44c8:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
	Set_PinValue(PORT, PIN, HIGH);
    44cc:	89 81       	ldd	r24, Y+1	; 0x01
    44ce:	6a 81       	ldd	r22, Y+2	; 0x02
    44d0:	41 e0       	ldi	r20, 0x01	; 1
    44d2:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
}
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	cf 91       	pop	r28
    44dc:	df 91       	pop	r29
    44de:	08 95       	ret

000044e0 <Button_GetValue>:
/*Function to get Pin Value
 *Receive PIN Name like (PINA)
 *Receive Pin Name like (PIN1)
 *Note that you must be Intialzation pin by Button_InitPullup or Button_InitPullDown
 */
u8 Button_GetValue(u8 PIN, u8 PIN_N) {
    44e0:	df 93       	push	r29
    44e2:	cf 93       	push	r28
    44e4:	00 d0       	rcall	.+0      	; 0x44e6 <Button_GetValue+0x6>
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	89 83       	std	Y+1, r24	; 0x01
    44ec:	6a 83       	std	Y+2, r22	; 0x02

	return Get_PinValue(PIN, PIN_N);
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	6a 81       	ldd	r22, Y+2	; 0x02
    44f2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Get_PinValue>
}
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	cf 91       	pop	r28
    44fc:	df 91       	pop	r29
    44fe:	08 95       	ret

00004500 <Button_InitPullDown>:
/*Function to Define Pin As INPUT PULLDOWN
 * Receive Name Port like (PORTA)
 * Receive Name Pin like (PIN0)
 */
void Button_InitPullDown(u8 PORT, u8 PIN) {
    4500:	df 93       	push	r29
    4502:	cf 93       	push	r28
    4504:	00 d0       	rcall	.+0      	; 0x4506 <Button_InitPullDown+0x6>
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	89 83       	std	Y+1, r24	; 0x01
    450c:	6a 83       	std	Y+2, r22	; 0x02
	Set_PinDirection(PORT, PIN, INPUT);
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	6a 81       	ldd	r22, Y+2	; 0x02
    4512:	40 e0       	ldi	r20, 0x00	; 0
    4514:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Set_PinDirection>
	Set_PinValue(PORT, PIN, LOW);
    4518:	89 81       	ldd	r24, Y+1	; 0x01
    451a:	6a 81       	ldd	r22, Y+2	; 0x02
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
}
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	cf 91       	pop	r28
    4528:	df 91       	pop	r29
    452a:	08 95       	ret

0000452c <_7Segment_Init>:
#include"7_Segment_Config.h"

/*function to  Set PORT As OUTPUT  to Use it with 7_Segment
 *Receive PORT Name
 */
void _7Segment_Init(u8 PORT) {
    452c:	df 93       	push	r29
    452e:	cf 93       	push	r28
    4530:	0f 92       	push	r0
    4532:	cd b7       	in	r28, 0x3d	; 61
    4534:	de b7       	in	r29, 0x3e	; 62
    4536:	89 83       	std	Y+1, r24	; 0x01

	Set_PortDirection(PORT, OUTPUT);
    4538:	89 81       	ldd	r24, Y+1	; 0x01
    453a:	61 e0       	ldi	r22, 0x01	; 1
    453c:	0e 94 92 09 	call	0x1324	; 0x1324 <Set_PortDirection>

}
    4540:	0f 90       	pop	r0
    4542:	cf 91       	pop	r28
    4544:	df 91       	pop	r29
    4546:	08 95       	ret

00004548 <_7Segment_Status>:
/*Function To Make 7_Segment ON
 *Receive PORT Name Like (PORTA)
 *Receive _7_SegmentType like (COMMAN_CATHOD or COMMAN_AHOD)
 *Receive Status like (ON or OFF )
 */
void _7Segment_Status(u8 PORT, u8 _7SegmentType, u8 Status) {
    4548:	df 93       	push	r29
    454a:	cf 93       	push	r28
    454c:	00 d0       	rcall	.+0      	; 0x454e <_7Segment_Status+0x6>
    454e:	0f 92       	push	r0
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
    4554:	89 83       	std	Y+1, r24	; 0x01
    4556:	6a 83       	std	Y+2, r22	; 0x02
    4558:	4b 83       	std	Y+3, r20	; 0x03
	if (_7SegmentType == COMMAN_ANOD) {
    455a:	8a 81       	ldd	r24, Y+2	; 0x02
    455c:	81 30       	cpi	r24, 0x01	; 1
    455e:	91 f4       	brne	.+36     	; 0x4584 <_7Segment_Status+0x3c>
		if (Status == ON) {
    4560:	8b 81       	ldd	r24, Y+3	; 0x03
    4562:	81 30       	cpi	r24, 0x01	; 1
    4564:	31 f4       	brne	.+12     	; 0x4572 <_7Segment_Status+0x2a>
			Set_PinValue(PORT, PIN7, HIGH);
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	67 e0       	ldi	r22, 0x07	; 7
    456a:	41 e0       	ldi	r20, 0x01	; 1
    456c:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
    4570:	1d c0       	rjmp	.+58     	; 0x45ac <_7Segment_Status+0x64>
		} else if (Status == OFF) {
    4572:	8b 81       	ldd	r24, Y+3	; 0x03
    4574:	88 23       	and	r24, r24
    4576:	d1 f4       	brne	.+52     	; 0x45ac <_7Segment_Status+0x64>
			Set_PinValue(PORT, PIN7, LOW);
    4578:	89 81       	ldd	r24, Y+1	; 0x01
    457a:	67 e0       	ldi	r22, 0x07	; 7
    457c:	40 e0       	ldi	r20, 0x00	; 0
    457e:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
    4582:	14 c0       	rjmp	.+40     	; 0x45ac <_7Segment_Status+0x64>
		}

	}

	else if (_7SegmentType == COMMAN_CATHOD) {
    4584:	8a 81       	ldd	r24, Y+2	; 0x02
    4586:	82 30       	cpi	r24, 0x02	; 2
    4588:	89 f4       	brne	.+34     	; 0x45ac <_7Segment_Status+0x64>
		if (Status == ON) {
    458a:	8b 81       	ldd	r24, Y+3	; 0x03
    458c:	81 30       	cpi	r24, 0x01	; 1
    458e:	31 f4       	brne	.+12     	; 0x459c <_7Segment_Status+0x54>
			Set_PinValue(PORT, PIN7, LOW);
    4590:	89 81       	ldd	r24, Y+1	; 0x01
    4592:	67 e0       	ldi	r22, 0x07	; 7
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
    459a:	08 c0       	rjmp	.+16     	; 0x45ac <_7Segment_Status+0x64>
		} else if (Status == OFF) {
    459c:	8b 81       	ldd	r24, Y+3	; 0x03
    459e:	88 23       	and	r24, r24
    45a0:	29 f4       	brne	.+10     	; 0x45ac <_7Segment_Status+0x64>
			Set_PinValue(PORT, PIN7, HIGH);
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	67 e0       	ldi	r22, 0x07	; 7
    45a6:	41 e0       	ldi	r20, 0x01	; 1
    45a8:	0e 94 8e 08 	call	0x111c	; 0x111c <Set_PinValue>
		}

}

}
    45ac:	0f 90       	pop	r0
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	cf 91       	pop	r28
    45b4:	df 91       	pop	r29
    45b6:	08 95       	ret

000045b8 <_7Segment_SpecificNumber>:
/*Function to Print Any Number from 0 to 9
 *Receive PORT Name Like (PORTA)
 *Receive Status like (COMMAN_CATHOD or  COMMAN_ANOD)
 *Receive Number lik (0 or 1 ..)
 */
void _7Segment_SpecificNumber(u8 PORT, u8 Status, u8 Number) {
    45b8:	df 93       	push	r29
    45ba:	cf 93       	push	r28
    45bc:	cd b7       	in	r28, 0x3d	; 61
    45be:	de b7       	in	r29, 0x3e	; 62
    45c0:	a1 97       	sbiw	r28, 0x21	; 33
    45c2:	0f b6       	in	r0, 0x3f	; 63
    45c4:	f8 94       	cli
    45c6:	de bf       	out	0x3e, r29	; 62
    45c8:	0f be       	out	0x3f, r0	; 63
    45ca:	cd bf       	out	0x3d, r28	; 61
    45cc:	8d 8b       	std	Y+21, r24	; 0x15
    45ce:	6e 8b       	std	Y+22, r22	; 0x16
    45d0:	4f 8b       	std	Y+23, r20	; 0x17
	u8 _7Segment_Cathode[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
			0x7F, 0x6F };
    45d2:	ce 01       	movw	r24, r28
    45d4:	01 96       	adiw	r24, 0x01	; 1
    45d6:	99 8f       	std	Y+25, r25	; 0x19
    45d8:	88 8f       	std	Y+24, r24	; 0x18
    45da:	e9 ea       	ldi	r30, 0xA9	; 169
    45dc:	f1 e0       	ldi	r31, 0x01	; 1
    45de:	fb 8f       	std	Y+27, r31	; 0x1b
    45e0:	ea 8f       	std	Y+26, r30	; 0x1a
    45e2:	fa e0       	ldi	r31, 0x0A	; 10
    45e4:	fc 8f       	std	Y+28, r31	; 0x1c
    45e6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    45e8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    45ea:	00 80       	ld	r0, Z
    45ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    45ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    45f0:	01 96       	adiw	r24, 0x01	; 1
    45f2:	9b 8f       	std	Y+27, r25	; 0x1b
    45f4:	8a 8f       	std	Y+26, r24	; 0x1a
    45f6:	e8 8d       	ldd	r30, Y+24	; 0x18
    45f8:	f9 8d       	ldd	r31, Y+25	; 0x19
    45fa:	00 82       	st	Z, r0
    45fc:	88 8d       	ldd	r24, Y+24	; 0x18
    45fe:	99 8d       	ldd	r25, Y+25	; 0x19
    4600:	01 96       	adiw	r24, 0x01	; 1
    4602:	99 8f       	std	Y+25, r25	; 0x19
    4604:	88 8f       	std	Y+24, r24	; 0x18
    4606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4608:	91 50       	subi	r25, 0x01	; 1
    460a:	9c 8f       	std	Y+28, r25	; 0x1c
    460c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    460e:	ee 23       	and	r30, r30
    4610:	51 f7       	brne	.-44     	; 0x45e6 <_7Segment_SpecificNumber+0x2e>
	u8 _7Segment_Anod[10] = { ~0x3F, ~0x06, ~0x5B, ~0x4F, ~0x66, ~0x6D, ~0x7D,
			~0x07, ~0x7F, ~0x6F };
    4612:	ce 01       	movw	r24, r28
    4614:	0b 96       	adiw	r24, 0x0b	; 11
    4616:	9e 8f       	std	Y+30, r25	; 0x1e
    4618:	8d 8f       	std	Y+29, r24	; 0x1d
    461a:	ef e9       	ldi	r30, 0x9F	; 159
    461c:	f1 e0       	ldi	r31, 0x01	; 1
    461e:	f8 a3       	std	Y+32, r31	; 0x20
    4620:	ef 8f       	std	Y+31, r30	; 0x1f
    4622:	fa e0       	ldi	r31, 0x0A	; 10
    4624:	f9 a3       	std	Y+33, r31	; 0x21
    4626:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4628:	f8 a1       	ldd	r31, Y+32	; 0x20
    462a:	00 80       	ld	r0, Z
    462c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    462e:	98 a1       	ldd	r25, Y+32	; 0x20
    4630:	01 96       	adiw	r24, 0x01	; 1
    4632:	98 a3       	std	Y+32, r25	; 0x20
    4634:	8f 8f       	std	Y+31, r24	; 0x1f
    4636:	ed 8d       	ldd	r30, Y+29	; 0x1d
    4638:	fe 8d       	ldd	r31, Y+30	; 0x1e
    463a:	00 82       	st	Z, r0
    463c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    463e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4640:	01 96       	adiw	r24, 0x01	; 1
    4642:	9e 8f       	std	Y+30, r25	; 0x1e
    4644:	8d 8f       	std	Y+29, r24	; 0x1d
    4646:	99 a1       	ldd	r25, Y+33	; 0x21
    4648:	91 50       	subi	r25, 0x01	; 1
    464a:	99 a3       	std	Y+33, r25	; 0x21
    464c:	e9 a1       	ldd	r30, Y+33	; 0x21
    464e:	ee 23       	and	r30, r30
    4650:	51 f7       	brne	.-44     	; 0x4626 <_7Segment_SpecificNumber+0x6e>
	if (Status == COMMAN_CATHOD) {
    4652:	8e 89       	ldd	r24, Y+22	; 0x16
    4654:	82 30       	cpi	r24, 0x02	; 2
    4656:	69 f4       	brne	.+26     	; 0x4672 <_7Segment_SpecificNumber+0xba>
		Set_PortValue(PORT, _7Segment_Cathode[Number]);
    4658:	8f 89       	ldd	r24, Y+23	; 0x17
    465a:	28 2f       	mov	r18, r24
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	ce 01       	movw	r24, r28
    4660:	01 96       	adiw	r24, 0x01	; 1
    4662:	fc 01       	movw	r30, r24
    4664:	e2 0f       	add	r30, r18
    4666:	f3 1f       	adc	r31, r19
    4668:	90 81       	ld	r25, Z
    466a:	8d 89       	ldd	r24, Y+21	; 0x15
    466c:	69 2f       	mov	r22, r25
    466e:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>
	}
	if (Status == COMMAN_ANOD) {
    4672:	8e 89       	ldd	r24, Y+22	; 0x16
    4674:	81 30       	cpi	r24, 0x01	; 1
    4676:	69 f4       	brne	.+26     	; 0x4692 <_7Segment_SpecificNumber+0xda>
		Set_PortValue(PORT, _7Segment_Anod[Number]);
    4678:	8f 89       	ldd	r24, Y+23	; 0x17
    467a:	28 2f       	mov	r18, r24
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	ce 01       	movw	r24, r28
    4680:	0b 96       	adiw	r24, 0x0b	; 11
    4682:	fc 01       	movw	r30, r24
    4684:	e2 0f       	add	r30, r18
    4686:	f3 1f       	adc	r31, r19
    4688:	90 81       	ld	r25, Z
    468a:	8d 89       	ldd	r24, Y+21	; 0x15
    468c:	69 2f       	mov	r22, r25
    468e:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>
	}
}
    4692:	a1 96       	adiw	r28, 0x21	; 33
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	f8 94       	cli
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	cd bf       	out	0x3d, r28	; 61
    469e:	cf 91       	pop	r28
    46a0:	df 91       	pop	r29
    46a2:	08 95       	ret

000046a4 <_7Segment0To9>:
/*Function to Print Number from 0 to 9
 * Receive PORT Name Like (PORTA)
 * Receive Status like (COMMAN_CATHOD, COMMAN_ANOD)
 *
 */
void _7Segment0To9(u8 PORT, u8 Status) {
    46a4:	df 93       	push	r29
    46a6:	cf 93       	push	r28
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	e2 97       	sbiw	r28, 0x32	; 50
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	de bf       	out	0x3e, r29	; 62
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	cd bf       	out	0x3d, r28	; 61
    46b8:	8f a3       	std	Y+39, r24	; 0x27
    46ba:	68 a7       	std	Y+40, r22	; 0x28
	u8 _7Segment_Cathode[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
			0x7F, 0x6F };
    46bc:	ce 01       	movw	r24, r28
    46be:	43 96       	adiw	r24, 0x13	; 19
    46c0:	9a a7       	std	Y+42, r25	; 0x2a
    46c2:	89 a7       	std	Y+41, r24	; 0x29
    46c4:	ed eb       	ldi	r30, 0xBD	; 189
    46c6:	f1 e0       	ldi	r31, 0x01	; 1
    46c8:	fc a7       	std	Y+44, r31	; 0x2c
    46ca:	eb a7       	std	Y+43, r30	; 0x2b
    46cc:	fa e0       	ldi	r31, 0x0A	; 10
    46ce:	fd a7       	std	Y+45, r31	; 0x2d
    46d0:	eb a5       	ldd	r30, Y+43	; 0x2b
    46d2:	fc a5       	ldd	r31, Y+44	; 0x2c
    46d4:	00 80       	ld	r0, Z
    46d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    46d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    46da:	01 96       	adiw	r24, 0x01	; 1
    46dc:	9c a7       	std	Y+44, r25	; 0x2c
    46de:	8b a7       	std	Y+43, r24	; 0x2b
    46e0:	e9 a5       	ldd	r30, Y+41	; 0x29
    46e2:	fa a5       	ldd	r31, Y+42	; 0x2a
    46e4:	00 82       	st	Z, r0
    46e6:	89 a5       	ldd	r24, Y+41	; 0x29
    46e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    46ea:	01 96       	adiw	r24, 0x01	; 1
    46ec:	9a a7       	std	Y+42, r25	; 0x2a
    46ee:	89 a7       	std	Y+41, r24	; 0x29
    46f0:	9d a5       	ldd	r25, Y+45	; 0x2d
    46f2:	91 50       	subi	r25, 0x01	; 1
    46f4:	9d a7       	std	Y+45, r25	; 0x2d
    46f6:	ed a5       	ldd	r30, Y+45	; 0x2d
    46f8:	ee 23       	and	r30, r30
    46fa:	51 f7       	brne	.-44     	; 0x46d0 <_7Segment0To9+0x2c>
	u8 _7Segment_Anod[10] = { ~0x3F, ~0x06, ~0x5B, ~0x4F, ~0x66, ~0x6D, ~0x7D,
			~0x07, ~0x7F, ~0x6F };
    46fc:	ce 01       	movw	r24, r28
    46fe:	4d 96       	adiw	r24, 0x1d	; 29
    4700:	9f a7       	std	Y+47, r25	; 0x2f
    4702:	8e a7       	std	Y+46, r24	; 0x2e
    4704:	e3 eb       	ldi	r30, 0xB3	; 179
    4706:	f1 e0       	ldi	r31, 0x01	; 1
    4708:	f9 ab       	std	Y+49, r31	; 0x31
    470a:	e8 ab       	std	Y+48, r30	; 0x30
    470c:	fa e0       	ldi	r31, 0x0A	; 10
    470e:	fa ab       	std	Y+50, r31	; 0x32
    4710:	e8 a9       	ldd	r30, Y+48	; 0x30
    4712:	f9 a9       	ldd	r31, Y+49	; 0x31
    4714:	00 80       	ld	r0, Z
    4716:	88 a9       	ldd	r24, Y+48	; 0x30
    4718:	99 a9       	ldd	r25, Y+49	; 0x31
    471a:	01 96       	adiw	r24, 0x01	; 1
    471c:	99 ab       	std	Y+49, r25	; 0x31
    471e:	88 ab       	std	Y+48, r24	; 0x30
    4720:	ee a5       	ldd	r30, Y+46	; 0x2e
    4722:	ff a5       	ldd	r31, Y+47	; 0x2f
    4724:	00 82       	st	Z, r0
    4726:	8e a5       	ldd	r24, Y+46	; 0x2e
    4728:	9f a5       	ldd	r25, Y+47	; 0x2f
    472a:	01 96       	adiw	r24, 0x01	; 1
    472c:	9f a7       	std	Y+47, r25	; 0x2f
    472e:	8e a7       	std	Y+46, r24	; 0x2e
    4730:	9a a9       	ldd	r25, Y+50	; 0x32
    4732:	91 50       	subi	r25, 0x01	; 1
    4734:	9a ab       	std	Y+50, r25	; 0x32
    4736:	ea a9       	ldd	r30, Y+50	; 0x32
    4738:	ee 23       	and	r30, r30
    473a:	51 f7       	brne	.-44     	; 0x4710 <_7Segment0To9+0x6c>
	if (Status == COMMAN_CATHOD) {
    473c:	88 a5       	ldd	r24, Y+40	; 0x28
    473e:	82 30       	cpi	r24, 0x02	; 2
    4740:	09 f0       	breq	.+2      	; 0x4744 <_7Segment0To9+0xa0>
    4742:	8c c0       	rjmp	.+280    	; 0x485c <_7Segment0To9+0x1b8>
		for (int i = 0; i < 10; i++) {
    4744:	1a 8a       	std	Y+18, r1	; 0x12
    4746:	19 8a       	std	Y+17, r1	; 0x11
    4748:	83 c0       	rjmp	.+262    	; 0x4850 <_7Segment0To9+0x1ac>
			Set_PortValue(PORT, _7Segment_Cathode[i]);
    474a:	29 89       	ldd	r18, Y+17	; 0x11
    474c:	3a 89       	ldd	r19, Y+18	; 0x12
    474e:	ce 01       	movw	r24, r28
    4750:	43 96       	adiw	r24, 0x13	; 19
    4752:	fc 01       	movw	r30, r24
    4754:	e2 0f       	add	r30, r18
    4756:	f3 1f       	adc	r31, r19
    4758:	90 81       	ld	r25, Z
    475a:	8f a1       	ldd	r24, Y+39	; 0x27
    475c:	69 2f       	mov	r22, r25
    475e:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	aa e7       	ldi	r26, 0x7A	; 122
    4768:	b4 e4       	ldi	r27, 0x44	; 68
    476a:	8b 87       	std	Y+11, r24	; 0x0b
    476c:	9c 87       	std	Y+12, r25	; 0x0c
    476e:	ad 87       	std	Y+13, r26	; 0x0d
    4770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4772:	6b 85       	ldd	r22, Y+11	; 0x0b
    4774:	7c 85       	ldd	r23, Y+12	; 0x0c
    4776:	8d 85       	ldd	r24, Y+13	; 0x0d
    4778:	9e 85       	ldd	r25, Y+14	; 0x0e
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	4a ef       	ldi	r20, 0xFA	; 250
    4780:	54 e4       	ldi	r21, 0x44	; 68
    4782:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4786:	dc 01       	movw	r26, r24
    4788:	cb 01       	movw	r24, r22
    478a:	8f 83       	std	Y+7, r24	; 0x07
    478c:	98 87       	std	Y+8, r25	; 0x08
    478e:	a9 87       	std	Y+9, r26	; 0x09
    4790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4792:	6f 81       	ldd	r22, Y+7	; 0x07
    4794:	78 85       	ldd	r23, Y+8	; 0x08
    4796:	89 85       	ldd	r24, Y+9	; 0x09
    4798:	9a 85       	ldd	r25, Y+10	; 0x0a
    479a:	20 e0       	ldi	r18, 0x00	; 0
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	40 e8       	ldi	r20, 0x80	; 128
    47a0:	5f e3       	ldi	r21, 0x3F	; 63
    47a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    47a6:	88 23       	and	r24, r24
    47a8:	2c f4       	brge	.+10     	; 0x47b4 <_7Segment0To9+0x110>
		__ticks = 1;
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	9e 83       	std	Y+6, r25	; 0x06
    47b0:	8d 83       	std	Y+5, r24	; 0x05
    47b2:	3f c0       	rjmp	.+126    	; 0x4832 <_7Segment0To9+0x18e>
	else if (__tmp > 65535)
    47b4:	6f 81       	ldd	r22, Y+7	; 0x07
    47b6:	78 85       	ldd	r23, Y+8	; 0x08
    47b8:	89 85       	ldd	r24, Y+9	; 0x09
    47ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	3f ef       	ldi	r19, 0xFF	; 255
    47c0:	4f e7       	ldi	r20, 0x7F	; 127
    47c2:	57 e4       	ldi	r21, 0x47	; 71
    47c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    47c8:	18 16       	cp	r1, r24
    47ca:	4c f5       	brge	.+82     	; 0x481e <_7Segment0To9+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    47d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47d4:	20 e0       	ldi	r18, 0x00	; 0
    47d6:	30 e0       	ldi	r19, 0x00	; 0
    47d8:	40 e2       	ldi	r20, 0x20	; 32
    47da:	51 e4       	ldi	r21, 0x41	; 65
    47dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47e0:	dc 01       	movw	r26, r24
    47e2:	cb 01       	movw	r24, r22
    47e4:	bc 01       	movw	r22, r24
    47e6:	cd 01       	movw	r24, r26
    47e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47ec:	dc 01       	movw	r26, r24
    47ee:	cb 01       	movw	r24, r22
    47f0:	9e 83       	std	Y+6, r25	; 0x06
    47f2:	8d 83       	std	Y+5, r24	; 0x05
    47f4:	0f c0       	rjmp	.+30     	; 0x4814 <_7Segment0To9+0x170>
    47f6:	88 ec       	ldi	r24, 0xC8	; 200
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	9c 83       	std	Y+4, r25	; 0x04
    47fc:	8b 83       	std	Y+3, r24	; 0x03
    47fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4800:	9c 81       	ldd	r25, Y+4	; 0x04
    4802:	01 97       	sbiw	r24, 0x01	; 1
    4804:	f1 f7       	brne	.-4      	; 0x4802 <_7Segment0To9+0x15e>
    4806:	9c 83       	std	Y+4, r25	; 0x04
    4808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    480a:	8d 81       	ldd	r24, Y+5	; 0x05
    480c:	9e 81       	ldd	r25, Y+6	; 0x06
    480e:	01 97       	sbiw	r24, 0x01	; 1
    4810:	9e 83       	std	Y+6, r25	; 0x06
    4812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4814:	8d 81       	ldd	r24, Y+5	; 0x05
    4816:	9e 81       	ldd	r25, Y+6	; 0x06
    4818:	00 97       	sbiw	r24, 0x00	; 0
    481a:	69 f7       	brne	.-38     	; 0x47f6 <_7Segment0To9+0x152>
    481c:	14 c0       	rjmp	.+40     	; 0x4846 <_7Segment0To9+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    481e:	6f 81       	ldd	r22, Y+7	; 0x07
    4820:	78 85       	ldd	r23, Y+8	; 0x08
    4822:	89 85       	ldd	r24, Y+9	; 0x09
    4824:	9a 85       	ldd	r25, Y+10	; 0x0a
    4826:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    482a:	dc 01       	movw	r26, r24
    482c:	cb 01       	movw	r24, r22
    482e:	9e 83       	std	Y+6, r25	; 0x06
    4830:	8d 83       	std	Y+5, r24	; 0x05
    4832:	8d 81       	ldd	r24, Y+5	; 0x05
    4834:	9e 81       	ldd	r25, Y+6	; 0x06
    4836:	9a 83       	std	Y+2, r25	; 0x02
    4838:	89 83       	std	Y+1, r24	; 0x01
    483a:	89 81       	ldd	r24, Y+1	; 0x01
    483c:	9a 81       	ldd	r25, Y+2	; 0x02
    483e:	01 97       	sbiw	r24, 0x01	; 1
    4840:	f1 f7       	brne	.-4      	; 0x483e <_7Segment0To9+0x19a>
    4842:	9a 83       	std	Y+2, r25	; 0x02
    4844:	89 83       	std	Y+1, r24	; 0x01
	u8 _7Segment_Cathode[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
			0x7F, 0x6F };
	u8 _7Segment_Anod[10] = { ~0x3F, ~0x06, ~0x5B, ~0x4F, ~0x66, ~0x6D, ~0x7D,
			~0x07, ~0x7F, ~0x6F };
	if (Status == COMMAN_CATHOD) {
		for (int i = 0; i < 10; i++) {
    4846:	89 89       	ldd	r24, Y+17	; 0x11
    4848:	9a 89       	ldd	r25, Y+18	; 0x12
    484a:	01 96       	adiw	r24, 0x01	; 1
    484c:	9a 8b       	std	Y+18, r25	; 0x12
    484e:	89 8b       	std	Y+17, r24	; 0x11
    4850:	89 89       	ldd	r24, Y+17	; 0x11
    4852:	9a 89       	ldd	r25, Y+18	; 0x12
    4854:	8a 30       	cpi	r24, 0x0A	; 10
    4856:	91 05       	cpc	r25, r1
    4858:	0c f4       	brge	.+2      	; 0x485c <_7Segment0To9+0x1b8>
    485a:	77 cf       	rjmp	.-274    	; 0x474a <_7Segment0To9+0xa6>
			Set_PortValue(PORT, _7Segment_Cathode[i]);
			_delay_ms(1000);
		}
	}
	if (Status == COMMAN_ANOD) {
    485c:	88 a5       	ldd	r24, Y+40	; 0x28
    485e:	81 30       	cpi	r24, 0x01	; 1
    4860:	c9 f4       	brne	.+50     	; 0x4894 <_7Segment0To9+0x1f0>
		for (int i = 0; i < 10; i++) {
    4862:	18 8a       	std	Y+16, r1	; 0x10
    4864:	1f 86       	std	Y+15, r1	; 0x0f
    4866:	11 c0       	rjmp	.+34     	; 0x488a <_7Segment0To9+0x1e6>
			Set_PortValue(PORT, _7Segment_Anod[i]);
    4868:	2f 85       	ldd	r18, Y+15	; 0x0f
    486a:	38 89       	ldd	r19, Y+16	; 0x10
    486c:	ce 01       	movw	r24, r28
    486e:	4d 96       	adiw	r24, 0x1d	; 29
    4870:	fc 01       	movw	r30, r24
    4872:	e2 0f       	add	r30, r18
    4874:	f3 1f       	adc	r31, r19
    4876:	90 81       	ld	r25, Z
    4878:	8f a1       	ldd	r24, Y+39	; 0x27
    487a:	69 2f       	mov	r22, r25
    487c:	0e 94 41 0a 	call	0x1482	; 0x1482 <Set_PortValue>
			Set_PortValue(PORT, _7Segment_Cathode[i]);
			_delay_ms(1000);
		}
	}
	if (Status == COMMAN_ANOD) {
		for (int i = 0; i < 10; i++) {
    4880:	8f 85       	ldd	r24, Y+15	; 0x0f
    4882:	98 89       	ldd	r25, Y+16	; 0x10
    4884:	01 96       	adiw	r24, 0x01	; 1
    4886:	98 8b       	std	Y+16, r25	; 0x10
    4888:	8f 87       	std	Y+15, r24	; 0x0f
    488a:	8f 85       	ldd	r24, Y+15	; 0x0f
    488c:	98 89       	ldd	r25, Y+16	; 0x10
    488e:	8a 30       	cpi	r24, 0x0A	; 10
    4890:	91 05       	cpc	r25, r1
    4892:	54 f3       	brlt	.-44     	; 0x4868 <_7Segment0To9+0x1c4>
			Set_PortValue(PORT, _7Segment_Anod[i]);
		}
	}
}
    4894:	e2 96       	adiw	r28, 0x32	; 50
    4896:	0f b6       	in	r0, 0x3f	; 63
    4898:	f8 94       	cli
    489a:	de bf       	out	0x3e, r29	; 62
    489c:	0f be       	out	0x3f, r0	; 63
    489e:	cd bf       	out	0x3d, r28	; 61
    48a0:	cf 91       	pop	r28
    48a2:	df 91       	pop	r29
    48a4:	08 95       	ret

000048a6 <LM35_APP_1>:
 *  Created on: Aug 24, 2024
 *      Author: Eslam
 */
#include "../../HAL/LM35/LM35_Interface.h"
#include "../../HAL/LCD/LCD_Interface.h"
void LM35_APP_1(void) {
    48a6:	df 93       	push	r29
    48a8:	cf 93       	push	r28
    48aa:	cd b7       	in	r28, 0x3d	; 61
    48ac:	de b7       	in	r29, 0x3e	; 62
    48ae:	2e 97       	sbiw	r28, 0x0e	; 14
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	f8 94       	cli
    48b4:	de bf       	out	0x3e, r29	; 62
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	cd bf       	out	0x3d, r28	; 61

	LCD_HWIntial(PORTC, PORTD);
    48ba:	82 e0       	ldi	r24, 0x02	; 2
    48bc:	63 e0       	ldi	r22, 0x03	; 3
    48be:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <LCD_HWIntial>

	while (1) {
		LCD_SWIntial(PORTC, PORTD);
    48c2:	82 e0       	ldi	r24, 0x02	; 2
    48c4:	63 e0       	ldi	r22, 0x03	; 3
    48c6:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <LCD_SWIntial>
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
    48ca:	82 e0       	ldi	r24, 0x02	; 2
    48cc:	63 e0       	ldi	r22, 0x03	; 3
    48ce:	40 e8       	ldi	r20, 0x80	; 128
    48d0:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		LCD_SendString(PORTC, PORTD, "  Value ::  ");
    48d4:	20 e6       	ldi	r18, 0x60	; 96
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	82 e0       	ldi	r24, 0x02	; 2
    48da:	63 e0       	ldi	r22, 0x03	; 3
    48dc:	a9 01       	movw	r20, r18
    48de:	0e 94 72 20 	call	0x40e4	; 0x40e4 <LCD_SendString>
		LCD_SendData(PORTC, PORTD, SensorLM35(ADC0));
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <SensorLM35>
    48e8:	98 2f       	mov	r25, r24
    48ea:	82 e0       	ldi	r24, 0x02	; 2
    48ec:	63 e0       	ldi	r22, 0x03	; 3
    48ee:	49 2f       	mov	r20, r25
    48f0:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <LCD_SendData>
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	a8 ec       	ldi	r26, 0xC8	; 200
    48fa:	b2 e4       	ldi	r27, 0x42	; 66
    48fc:	8b 87       	std	Y+11, r24	; 0x0b
    48fe:	9c 87       	std	Y+12, r25	; 0x0c
    4900:	ad 87       	std	Y+13, r26	; 0x0d
    4902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4904:	6b 85       	ldd	r22, Y+11	; 0x0b
    4906:	7c 85       	ldd	r23, Y+12	; 0x0c
    4908:	8d 85       	ldd	r24, Y+13	; 0x0d
    490a:	9e 85       	ldd	r25, Y+14	; 0x0e
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	4a ef       	ldi	r20, 0xFA	; 250
    4912:	54 e4       	ldi	r21, 0x44	; 68
    4914:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4918:	dc 01       	movw	r26, r24
    491a:	cb 01       	movw	r24, r22
    491c:	8f 83       	std	Y+7, r24	; 0x07
    491e:	98 87       	std	Y+8, r25	; 0x08
    4920:	a9 87       	std	Y+9, r26	; 0x09
    4922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4924:	6f 81       	ldd	r22, Y+7	; 0x07
    4926:	78 85       	ldd	r23, Y+8	; 0x08
    4928:	89 85       	ldd	r24, Y+9	; 0x09
    492a:	9a 85       	ldd	r25, Y+10	; 0x0a
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	40 e8       	ldi	r20, 0x80	; 128
    4932:	5f e3       	ldi	r21, 0x3F	; 63
    4934:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4938:	88 23       	and	r24, r24
    493a:	2c f4       	brge	.+10     	; 0x4946 <LM35_APP_1+0xa0>
		__ticks = 1;
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	9e 83       	std	Y+6, r25	; 0x06
    4942:	8d 83       	std	Y+5, r24	; 0x05
    4944:	3f c0       	rjmp	.+126    	; 0x49c4 <LM35_APP_1+0x11e>
	else if (__tmp > 65535)
    4946:	6f 81       	ldd	r22, Y+7	; 0x07
    4948:	78 85       	ldd	r23, Y+8	; 0x08
    494a:	89 85       	ldd	r24, Y+9	; 0x09
    494c:	9a 85       	ldd	r25, Y+10	; 0x0a
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	3f ef       	ldi	r19, 0xFF	; 255
    4952:	4f e7       	ldi	r20, 0x7F	; 127
    4954:	57 e4       	ldi	r21, 0x47	; 71
    4956:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    495a:	18 16       	cp	r1, r24
    495c:	4c f5       	brge	.+82     	; 0x49b0 <LM35_APP_1+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    495e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4960:	7c 85       	ldd	r23, Y+12	; 0x0c
    4962:	8d 85       	ldd	r24, Y+13	; 0x0d
    4964:	9e 85       	ldd	r25, Y+14	; 0x0e
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	40 e2       	ldi	r20, 0x20	; 32
    496c:	51 e4       	ldi	r21, 0x41	; 65
    496e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4972:	dc 01       	movw	r26, r24
    4974:	cb 01       	movw	r24, r22
    4976:	bc 01       	movw	r22, r24
    4978:	cd 01       	movw	r24, r26
    497a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	9e 83       	std	Y+6, r25	; 0x06
    4984:	8d 83       	std	Y+5, r24	; 0x05
    4986:	0f c0       	rjmp	.+30     	; 0x49a6 <LM35_APP_1+0x100>
    4988:	88 ec       	ldi	r24, 0xC8	; 200
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	9c 83       	std	Y+4, r25	; 0x04
    498e:	8b 83       	std	Y+3, r24	; 0x03
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	9c 81       	ldd	r25, Y+4	; 0x04
    4994:	01 97       	sbiw	r24, 0x01	; 1
    4996:	f1 f7       	brne	.-4      	; 0x4994 <LM35_APP_1+0xee>
    4998:	9c 83       	std	Y+4, r25	; 0x04
    499a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    499c:	8d 81       	ldd	r24, Y+5	; 0x05
    499e:	9e 81       	ldd	r25, Y+6	; 0x06
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	9e 83       	std	Y+6, r25	; 0x06
    49a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a6:	8d 81       	ldd	r24, Y+5	; 0x05
    49a8:	9e 81       	ldd	r25, Y+6	; 0x06
    49aa:	00 97       	sbiw	r24, 0x00	; 0
    49ac:	69 f7       	brne	.-38     	; 0x4988 <LM35_APP_1+0xe2>
    49ae:	14 c0       	rjmp	.+40     	; 0x49d8 <LM35_APP_1+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b0:	6f 81       	ldd	r22, Y+7	; 0x07
    49b2:	78 85       	ldd	r23, Y+8	; 0x08
    49b4:	89 85       	ldd	r24, Y+9	; 0x09
    49b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    49b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	9e 83       	std	Y+6, r25	; 0x06
    49c2:	8d 83       	std	Y+5, r24	; 0x05
    49c4:	8d 81       	ldd	r24, Y+5	; 0x05
    49c6:	9e 81       	ldd	r25, Y+6	; 0x06
    49c8:	9a 83       	std	Y+2, r25	; 0x02
    49ca:	89 83       	std	Y+1, r24	; 0x01
    49cc:	89 81       	ldd	r24, Y+1	; 0x01
    49ce:	9a 81       	ldd	r25, Y+2	; 0x02
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	f1 f7       	brne	.-4      	; 0x49d0 <LM35_APP_1+0x12a>
    49d4:	9a 83       	std	Y+2, r25	; 0x02
    49d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_SendCommand(PORTC, PORTD, CLEAR);
    49d8:	82 e0       	ldi	r24, 0x02	; 2
    49da:	63 e0       	ldi	r22, 0x03	; 3
    49dc:	41 e0       	ldi	r20, 0x01	; 1
    49de:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    49e2:	6f cf       	rjmp	.-290    	; 0x48c2 <LM35_APP_1+0x1c>

000049e4 <LED_APP_1>:
#include"../../HAL/Button/Button_Interface.h"
#include <avr/delay.h>

/*Function to Set Pin HIGH and LOW with Delay 1 second
 */
void LED_APP_1(void) {
    49e4:	df 93       	push	r29
    49e6:	cf 93       	push	r28
    49e8:	cd b7       	in	r28, 0x3d	; 61
    49ea:	de b7       	in	r29, 0x3e	; 62

	while (1) {
		LED_Delay(PORTC, PIN0, 1000);
    49ec:	82 e0       	ldi	r24, 0x02	; 2
    49ee:	60 e0       	ldi	r22, 0x00	; 0
    49f0:	48 ee       	ldi	r20, 0xE8	; 232
    49f2:	0e 94 2c 10 	call	0x2058	; 0x2058 <LED_Delay>
    49f6:	fa cf       	rjmp	.-12     	; 0x49ec <LED_APP_1+0x8>

000049f8 <LED_APP_2>:
	}

}
/*Function to Set FULL PORT HIGH and LOW with Delay 1.5 second
 */
void LED_APP_2(void) {
    49f8:	df 93       	push	r29
    49fa:	cf 93       	push	r28
    49fc:	cd b7       	in	r28, 0x3d	; 61
    49fe:	de b7       	in	r29, 0x3e	; 62
    4a00:	6c 97       	sbiw	r28, 0x1c	; 28
    4a02:	0f b6       	in	r0, 0x3f	; 63
    4a04:	f8 94       	cli
    4a06:	de bf       	out	0x3e, r29	; 62
    4a08:	0f be       	out	0x3f, r0	; 63
    4a0a:	cd bf       	out	0x3d, r28	; 61

	while (1) {
		LED_Port(PORTB, HIGH);
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	61 e0       	ldi	r22, 0x01	; 1
    4a10:	0e 94 43 11 	call	0x2286	; 0x2286 <LED_Port>
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	90 e8       	ldi	r25, 0x80	; 128
    4a18:	ab eb       	ldi	r26, 0xBB	; 187
    4a1a:	b4 e4       	ldi	r27, 0x44	; 68
    4a1c:	89 8f       	std	Y+25, r24	; 0x19
    4a1e:	9a 8f       	std	Y+26, r25	; 0x1a
    4a20:	ab 8f       	std	Y+27, r26	; 0x1b
    4a22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a24:	69 8d       	ldd	r22, Y+25	; 0x19
    4a26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	4a ef       	ldi	r20, 0xFA	; 250
    4a32:	54 e4       	ldi	r21, 0x44	; 68
    4a34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	8d 8b       	std	Y+21, r24	; 0x15
    4a3e:	9e 8b       	std	Y+22, r25	; 0x16
    4a40:	af 8b       	std	Y+23, r26	; 0x17
    4a42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a44:	6d 89       	ldd	r22, Y+21	; 0x15
    4a46:	7e 89       	ldd	r23, Y+22	; 0x16
    4a48:	8f 89       	ldd	r24, Y+23	; 0x17
    4a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	40 e8       	ldi	r20, 0x80	; 128
    4a52:	5f e3       	ldi	r21, 0x3F	; 63
    4a54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4a58:	88 23       	and	r24, r24
    4a5a:	2c f4       	brge	.+10     	; 0x4a66 <LED_APP_2+0x6e>
		__ticks = 1;
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	9c 8b       	std	Y+20, r25	; 0x14
    4a62:	8b 8b       	std	Y+19, r24	; 0x13
    4a64:	3f c0       	rjmp	.+126    	; 0x4ae4 <LED_APP_2+0xec>
	else if (__tmp > 65535)
    4a66:	6d 89       	ldd	r22, Y+21	; 0x15
    4a68:	7e 89       	ldd	r23, Y+22	; 0x16
    4a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	3f ef       	ldi	r19, 0xFF	; 255
    4a72:	4f e7       	ldi	r20, 0x7F	; 127
    4a74:	57 e4       	ldi	r21, 0x47	; 71
    4a76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4a7a:	18 16       	cp	r1, r24
    4a7c:	4c f5       	brge	.+82     	; 0x4ad0 <LED_APP_2+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    4a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	40 e2       	ldi	r20, 0x20	; 32
    4a8c:	51 e4       	ldi	r21, 0x41	; 65
    4a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	bc 01       	movw	r22, r24
    4a98:	cd 01       	movw	r24, r26
    4a9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	9c 8b       	std	Y+20, r25	; 0x14
    4aa4:	8b 8b       	std	Y+19, r24	; 0x13
    4aa6:	0f c0       	rjmp	.+30     	; 0x4ac6 <LED_APP_2+0xce>
    4aa8:	88 ec       	ldi	r24, 0xC8	; 200
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	9a 8b       	std	Y+18, r25	; 0x12
    4aae:	89 8b       	std	Y+17, r24	; 0x11
    4ab0:	89 89       	ldd	r24, Y+17	; 0x11
    4ab2:	9a 89       	ldd	r25, Y+18	; 0x12
    4ab4:	01 97       	sbiw	r24, 0x01	; 1
    4ab6:	f1 f7       	brne	.-4      	; 0x4ab4 <LED_APP_2+0xbc>
    4ab8:	9a 8b       	std	Y+18, r25	; 0x12
    4aba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4abc:	8b 89       	ldd	r24, Y+19	; 0x13
    4abe:	9c 89       	ldd	r25, Y+20	; 0x14
    4ac0:	01 97       	sbiw	r24, 0x01	; 1
    4ac2:	9c 8b       	std	Y+20, r25	; 0x14
    4ac4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    4aca:	00 97       	sbiw	r24, 0x00	; 0
    4acc:	69 f7       	brne	.-38     	; 0x4aa8 <LED_APP_2+0xb0>
    4ace:	14 c0       	rjmp	.+40     	; 0x4af8 <LED_APP_2+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ad8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4adc:	dc 01       	movw	r26, r24
    4ade:	cb 01       	movw	r24, r22
    4ae0:	9c 8b       	std	Y+20, r25	; 0x14
    4ae2:	8b 8b       	std	Y+19, r24	; 0x13
    4ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ae8:	98 8b       	std	Y+16, r25	; 0x10
    4aea:	8f 87       	std	Y+15, r24	; 0x0f
    4aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    4aee:	98 89       	ldd	r25, Y+16	; 0x10
    4af0:	01 97       	sbiw	r24, 0x01	; 1
    4af2:	f1 f7       	brne	.-4      	; 0x4af0 <LED_APP_2+0xf8>
    4af4:	98 8b       	std	Y+16, r25	; 0x10
    4af6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1500);
		LED_Port(PORTB, LOW);
    4af8:	81 e0       	ldi	r24, 0x01	; 1
    4afa:	60 e0       	ldi	r22, 0x00	; 0
    4afc:	0e 94 43 11 	call	0x2286	; 0x2286 <LED_Port>
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	90 e8       	ldi	r25, 0x80	; 128
    4b04:	ab eb       	ldi	r26, 0xBB	; 187
    4b06:	b4 e4       	ldi	r27, 0x44	; 68
    4b08:	8b 87       	std	Y+11, r24	; 0x0b
    4b0a:	9c 87       	std	Y+12, r25	; 0x0c
    4b0c:	ad 87       	std	Y+13, r26	; 0x0d
    4b0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b18:	20 e0       	ldi	r18, 0x00	; 0
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	4a ef       	ldi	r20, 0xFA	; 250
    4b1e:	54 e4       	ldi	r21, 0x44	; 68
    4b20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b24:	dc 01       	movw	r26, r24
    4b26:	cb 01       	movw	r24, r22
    4b28:	8f 83       	std	Y+7, r24	; 0x07
    4b2a:	98 87       	std	Y+8, r25	; 0x08
    4b2c:	a9 87       	std	Y+9, r26	; 0x09
    4b2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b30:	6f 81       	ldd	r22, Y+7	; 0x07
    4b32:	78 85       	ldd	r23, Y+8	; 0x08
    4b34:	89 85       	ldd	r24, Y+9	; 0x09
    4b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	40 e8       	ldi	r20, 0x80	; 128
    4b3e:	5f e3       	ldi	r21, 0x3F	; 63
    4b40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4b44:	88 23       	and	r24, r24
    4b46:	2c f4       	brge	.+10     	; 0x4b52 <LED_APP_2+0x15a>
		__ticks = 1;
    4b48:	81 e0       	ldi	r24, 0x01	; 1
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	9e 83       	std	Y+6, r25	; 0x06
    4b4e:	8d 83       	std	Y+5, r24	; 0x05
    4b50:	3f c0       	rjmp	.+126    	; 0x4bd0 <LED_APP_2+0x1d8>
	else if (__tmp > 65535)
    4b52:	6f 81       	ldd	r22, Y+7	; 0x07
    4b54:	78 85       	ldd	r23, Y+8	; 0x08
    4b56:	89 85       	ldd	r24, Y+9	; 0x09
    4b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	3f ef       	ldi	r19, 0xFF	; 255
    4b5e:	4f e7       	ldi	r20, 0x7F	; 127
    4b60:	57 e4       	ldi	r21, 0x47	; 71
    4b62:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4b66:	18 16       	cp	r1, r24
    4b68:	4c f5       	brge	.+82     	; 0x4bbc <LED_APP_2+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b70:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	40 e2       	ldi	r20, 0x20	; 32
    4b78:	51 e4       	ldi	r21, 0x41	; 65
    4b7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	bc 01       	movw	r22, r24
    4b84:	cd 01       	movw	r24, r26
    4b86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b8a:	dc 01       	movw	r26, r24
    4b8c:	cb 01       	movw	r24, r22
    4b8e:	9e 83       	std	Y+6, r25	; 0x06
    4b90:	8d 83       	std	Y+5, r24	; 0x05
    4b92:	0f c0       	rjmp	.+30     	; 0x4bb2 <LED_APP_2+0x1ba>
    4b94:	88 ec       	ldi	r24, 0xC8	; 200
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	9c 83       	std	Y+4, r25	; 0x04
    4b9a:	8b 83       	std	Y+3, r24	; 0x03
    4b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba0:	01 97       	sbiw	r24, 0x01	; 1
    4ba2:	f1 f7       	brne	.-4      	; 0x4ba0 <LED_APP_2+0x1a8>
    4ba4:	9c 83       	std	Y+4, r25	; 0x04
    4ba6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    4baa:	9e 81       	ldd	r25, Y+6	; 0x06
    4bac:	01 97       	sbiw	r24, 0x01	; 1
    4bae:	9e 83       	std	Y+6, r25	; 0x06
    4bb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb6:	00 97       	sbiw	r24, 0x00	; 0
    4bb8:	69 f7       	brne	.-38     	; 0x4b94 <LED_APP_2+0x19c>
    4bba:	28 cf       	rjmp	.-432    	; 0x4a0c <LED_APP_2+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    4bbe:	78 85       	ldd	r23, Y+8	; 0x08
    4bc0:	89 85       	ldd	r24, Y+9	; 0x09
    4bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	9e 83       	std	Y+6, r25	; 0x06
    4bce:	8d 83       	std	Y+5, r24	; 0x05
    4bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd4:	9a 83       	std	Y+2, r25	; 0x02
    4bd6:	89 83       	std	Y+1, r24	; 0x01
    4bd8:	89 81       	ldd	r24, Y+1	; 0x01
    4bda:	9a 81       	ldd	r25, Y+2	; 0x02
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	f1 f7       	brne	.-4      	; 0x4bdc <LED_APP_2+0x1e4>
    4be0:	9a 83       	std	Y+2, r25	; 0x02
    4be2:	89 83       	std	Y+1, r24	; 0x01
    4be4:	13 cf       	rjmp	.-474    	; 0x4a0c <LED_APP_2+0x14>

00004be6 <LED_APP_3>:

}
/*Function to Set Pin HIGH when pushbutton press
 * and LOW when pushbutton not press
 */
void LED_APP_3(void) {
    4be6:	df 93       	push	r29
    4be8:	cf 93       	push	r28
    4bea:	0f 92       	push	r0
    4bec:	cd b7       	in	r28, 0x3d	; 61
    4bee:	de b7       	in	r29, 0x3e	; 62
	Button_InitPullup(PORTC, PIN0);
    4bf0:	82 e0       	ldi	r24, 0x02	; 2
    4bf2:	60 e0       	ldi	r22, 0x00	; 0
    4bf4:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <Button_InitPullup>
	while (1) {
		u8 Value = Button_GetValue(PORTB, PIN0);
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	60 e0       	ldi	r22, 0x00	; 0
    4bfc:	0e 94 70 22 	call	0x44e0	; 0x44e0 <Button_GetValue>
    4c00:	89 83       	std	Y+1, r24	; 0x01
		if (Button_GetValue(PINC, PIN0) == LOW) {
    4c02:	86 e0       	ldi	r24, 0x06	; 6
    4c04:	60 e0       	ldi	r22, 0x00	; 0
    4c06:	0e 94 70 22 	call	0x44e0	; 0x44e0 <Button_GetValue>
    4c0a:	88 23       	and	r24, r24
    4c0c:	29 f4       	brne	.+10     	; 0x4c18 <LED_APP_3+0x32>

			LED_ON(PORTD, PIN0);
    4c0e:	83 e0       	ldi	r24, 0x03	; 3
    4c10:	60 e0       	ldi	r22, 0x00	; 0
    4c12:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
    4c16:	f0 cf       	rjmp	.-32     	; 0x4bf8 <LED_APP_3+0x12>

		}
		else {
			LED_OFF(PORTD, PIN0);
    4c18:	83 e0       	ldi	r24, 0x03	; 3
    4c1a:	60 e0       	ldi	r22, 0x00	; 0
    4c1c:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
    4c20:	eb cf       	rjmp	.-42     	; 0x4bf8 <LED_APP_3+0x12>

00004c22 <LED_APP_4>:
	}

}
/*Function to Set Pins for Full Port  HIGH and LOW
 */
void LED_APP_4(void) {
    4c22:	df 93       	push	r29
    4c24:	cf 93       	push	r28
    4c26:	cd b7       	in	r28, 0x3d	; 61
    4c28:	de b7       	in	r29, 0x3e	; 62

	while (1) {
		LED_Switch(PORTB, 700);
    4c2a:	81 e0       	ldi	r24, 0x01	; 1
    4c2c:	6c eb       	ldi	r22, 0xBC	; 188
    4c2e:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <LED_Switch>
    4c32:	fb cf       	rjmp	.-10     	; 0x4c2a <LED_APP_4+0x8>

00004c34 <LED_APP_5>:

}
/*
 * 
 */
void LED_APP_5(void) {
    4c34:	0f 93       	push	r16
    4c36:	1f 93       	push	r17
    4c38:	df 93       	push	r29
    4c3a:	cf 93       	push	r28
    4c3c:	cd b7       	in	r28, 0x3d	; 61
    4c3e:	de b7       	in	r29, 0x3e	; 62
    4c40:	c9 54       	subi	r28, 0x49	; 73
    4c42:	d0 40       	sbci	r29, 0x00	; 0
    4c44:	0f b6       	in	r0, 0x3f	; 63
    4c46:	f8 94       	cli
    4c48:	de bf       	out	0x3e, r29	; 62
    4c4a:	0f be       	out	0x3f, r0	; 63
    4c4c:	cd bf       	out	0x3d, r28	; 61

	Button_InitPullDown(PORTA, PIN0);
    4c4e:	80 e0       	ldi	r24, 0x00	; 0
    4c50:	60 e0       	ldi	r22, 0x00	; 0
    4c52:	0e 94 80 22 	call	0x4500	; 0x4500 <Button_InitPullDown>
	Button_InitPullDown(PORTA, PIN1);
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	61 e0       	ldi	r22, 0x01	; 1
    4c5a:	0e 94 80 22 	call	0x4500	; 0x4500 <Button_InitPullDown>
	Button_InitPullDown(PORTA, PIN2);
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	62 e0       	ldi	r22, 0x02	; 2
    4c62:	0e 94 80 22 	call	0x4500	; 0x4500 <Button_InitPullDown>
	while (1) {
		u8 Value_1 = Button_GetValue(PINA, PIN0);
    4c66:	84 e0       	ldi	r24, 0x04	; 4
    4c68:	60 e0       	ldi	r22, 0x00	; 0
    4c6a:	0e 94 70 22 	call	0x44e0	; 0x44e0 <Button_GetValue>
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e7 5b       	subi	r30, 0xB7	; 183
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	80 83       	st	Z, r24
    4c76:	fe 01       	movw	r30, r28
    4c78:	ed 5b       	subi	r30, 0xBD	; 189
    4c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7c:	80 e0       	ldi	r24, 0x00	; 0
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	a8 e4       	ldi	r26, 0x48	; 72
    4c82:	b2 e4       	ldi	r27, 0x42	; 66
    4c84:	80 83       	st	Z, r24
    4c86:	91 83       	std	Z+1, r25	; 0x01
    4c88:	a2 83       	std	Z+2, r26	; 0x02
    4c8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c8c:	8e 01       	movw	r16, r28
    4c8e:	01 5c       	subi	r16, 0xC1	; 193
    4c90:	1f 4f       	sbci	r17, 0xFF	; 255
    4c92:	fe 01       	movw	r30, r28
    4c94:	ed 5b       	subi	r30, 0xBD	; 189
    4c96:	ff 4f       	sbci	r31, 0xFF	; 255
    4c98:	60 81       	ld	r22, Z
    4c9a:	71 81       	ldd	r23, Z+1	; 0x01
    4c9c:	82 81       	ldd	r24, Z+2	; 0x02
    4c9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ca0:	20 e0       	ldi	r18, 0x00	; 0
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	4a ef       	ldi	r20, 0xFA	; 250
    4ca6:	54 e4       	ldi	r21, 0x44	; 68
    4ca8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	f8 01       	movw	r30, r16
    4cb2:	80 83       	st	Z, r24
    4cb4:	91 83       	std	Z+1, r25	; 0x01
    4cb6:	a2 83       	std	Z+2, r26	; 0x02
    4cb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cba:	fe 01       	movw	r30, r28
    4cbc:	ff 96       	adiw	r30, 0x3f	; 63
    4cbe:	60 81       	ld	r22, Z
    4cc0:	71 81       	ldd	r23, Z+1	; 0x01
    4cc2:	82 81       	ldd	r24, Z+2	; 0x02
    4cc4:	93 81       	ldd	r25, Z+3	; 0x03
    4cc6:	20 e0       	ldi	r18, 0x00	; 0
    4cc8:	30 e0       	ldi	r19, 0x00	; 0
    4cca:	40 e8       	ldi	r20, 0x80	; 128
    4ccc:	5f e3       	ldi	r21, 0x3F	; 63
    4cce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4cd2:	88 23       	and	r24, r24
    4cd4:	2c f4       	brge	.+10     	; 0x4ce0 <LED_APP_5+0xac>
		__ticks = 1;
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	9e af       	std	Y+62, r25	; 0x3e
    4cdc:	8d af       	std	Y+61, r24	; 0x3d
    4cde:	46 c0       	rjmp	.+140    	; 0x4d6c <LED_APP_5+0x138>
	else if (__tmp > 65535)
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	ff 96       	adiw	r30, 0x3f	; 63
    4ce4:	60 81       	ld	r22, Z
    4ce6:	71 81       	ldd	r23, Z+1	; 0x01
    4ce8:	82 81       	ldd	r24, Z+2	; 0x02
    4cea:	93 81       	ldd	r25, Z+3	; 0x03
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	3f ef       	ldi	r19, 0xFF	; 255
    4cf0:	4f e7       	ldi	r20, 0x7F	; 127
    4cf2:	57 e4       	ldi	r21, 0x47	; 71
    4cf4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4cf8:	18 16       	cp	r1, r24
    4cfa:	64 f5       	brge	.+88     	; 0x4d54 <LED_APP_5+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	ed 5b       	subi	r30, 0xBD	; 189
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	60 81       	ld	r22, Z
    4d04:	71 81       	ldd	r23, Z+1	; 0x01
    4d06:	82 81       	ldd	r24, Z+2	; 0x02
    4d08:	93 81       	ldd	r25, Z+3	; 0x03
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	40 e2       	ldi	r20, 0x20	; 32
    4d10:	51 e4       	ldi	r21, 0x41	; 65
    4d12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d16:	dc 01       	movw	r26, r24
    4d18:	cb 01       	movw	r24, r22
    4d1a:	bc 01       	movw	r22, r24
    4d1c:	cd 01       	movw	r24, r26
    4d1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d22:	dc 01       	movw	r26, r24
    4d24:	cb 01       	movw	r24, r22
    4d26:	9e af       	std	Y+62, r25	; 0x3e
    4d28:	8d af       	std	Y+61, r24	; 0x3d
    4d2a:	0f c0       	rjmp	.+30     	; 0x4d4a <LED_APP_5+0x116>
    4d2c:	88 ec       	ldi	r24, 0xC8	; 200
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	9c af       	std	Y+60, r25	; 0x3c
    4d32:	8b af       	std	Y+59, r24	; 0x3b
    4d34:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d36:	9c ad       	ldd	r25, Y+60	; 0x3c
    4d38:	01 97       	sbiw	r24, 0x01	; 1
    4d3a:	f1 f7       	brne	.-4      	; 0x4d38 <LED_APP_5+0x104>
    4d3c:	9c af       	std	Y+60, r25	; 0x3c
    4d3e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d40:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d42:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	9e af       	std	Y+62, r25	; 0x3e
    4d48:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d4e:	00 97       	sbiw	r24, 0x00	; 0
    4d50:	69 f7       	brne	.-38     	; 0x4d2c <LED_APP_5+0xf8>
    4d52:	16 c0       	rjmp	.+44     	; 0x4d80 <LED_APP_5+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d54:	fe 01       	movw	r30, r28
    4d56:	ff 96       	adiw	r30, 0x3f	; 63
    4d58:	60 81       	ld	r22, Z
    4d5a:	71 81       	ldd	r23, Z+1	; 0x01
    4d5c:	82 81       	ldd	r24, Z+2	; 0x02
    4d5e:	93 81       	ldd	r25, Z+3	; 0x03
    4d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	9e af       	std	Y+62, r25	; 0x3e
    4d6a:	8d af       	std	Y+61, r24	; 0x3d
    4d6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d70:	9a af       	std	Y+58, r25	; 0x3a
    4d72:	89 af       	std	Y+57, r24	; 0x39
    4d74:	89 ad       	ldd	r24, Y+57	; 0x39
    4d76:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d78:	01 97       	sbiw	r24, 0x01	; 1
    4d7a:	f1 f7       	brne	.-4      	; 0x4d78 <LED_APP_5+0x144>
    4d7c:	9a af       	std	Y+58, r25	; 0x3a
    4d7e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		u8 Value_2 = Button_GetValue(PINA, PIN1);
    4d80:	84 e0       	ldi	r24, 0x04	; 4
    4d82:	61 e0       	ldi	r22, 0x01	; 1
    4d84:	0e 94 70 22 	call	0x44e0	; 0x44e0 <Button_GetValue>
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e8 5b       	subi	r30, 0xB8	; 184
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 83       	st	Z, r24
    4d90:	80 e0       	ldi	r24, 0x00	; 0
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	a8 e4       	ldi	r26, 0x48	; 72
    4d96:	b2 e4       	ldi	r27, 0x42	; 66
    4d98:	8d ab       	std	Y+53, r24	; 0x35
    4d9a:	9e ab       	std	Y+54, r25	; 0x36
    4d9c:	af ab       	std	Y+55, r26	; 0x37
    4d9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4da0:	6d a9       	ldd	r22, Y+53	; 0x35
    4da2:	7e a9       	ldd	r23, Y+54	; 0x36
    4da4:	8f a9       	ldd	r24, Y+55	; 0x37
    4da6:	98 ad       	ldd	r25, Y+56	; 0x38
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	4a ef       	ldi	r20, 0xFA	; 250
    4dae:	54 e4       	ldi	r21, 0x44	; 68
    4db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4db4:	dc 01       	movw	r26, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	89 ab       	std	Y+49, r24	; 0x31
    4dba:	9a ab       	std	Y+50, r25	; 0x32
    4dbc:	ab ab       	std	Y+51, r26	; 0x33
    4dbe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4dc0:	69 a9       	ldd	r22, Y+49	; 0x31
    4dc2:	7a a9       	ldd	r23, Y+50	; 0x32
    4dc4:	8b a9       	ldd	r24, Y+51	; 0x33
    4dc6:	9c a9       	ldd	r25, Y+52	; 0x34
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	40 e8       	ldi	r20, 0x80	; 128
    4dce:	5f e3       	ldi	r21, 0x3F	; 63
    4dd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4dd4:	88 23       	and	r24, r24
    4dd6:	2c f4       	brge	.+10     	; 0x4de2 <LED_APP_5+0x1ae>
		__ticks = 1;
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	98 ab       	std	Y+48, r25	; 0x30
    4dde:	8f a7       	std	Y+47, r24	; 0x2f
    4de0:	3f c0       	rjmp	.+126    	; 0x4e60 <LED_APP_5+0x22c>
	else if (__tmp > 65535)
    4de2:	69 a9       	ldd	r22, Y+49	; 0x31
    4de4:	7a a9       	ldd	r23, Y+50	; 0x32
    4de6:	8b a9       	ldd	r24, Y+51	; 0x33
    4de8:	9c a9       	ldd	r25, Y+52	; 0x34
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	3f ef       	ldi	r19, 0xFF	; 255
    4dee:	4f e7       	ldi	r20, 0x7F	; 127
    4df0:	57 e4       	ldi	r21, 0x47	; 71
    4df2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4df6:	18 16       	cp	r1, r24
    4df8:	4c f5       	brge	.+82     	; 0x4e4c <LED_APP_5+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dfa:	6d a9       	ldd	r22, Y+53	; 0x35
    4dfc:	7e a9       	ldd	r23, Y+54	; 0x36
    4dfe:	8f a9       	ldd	r24, Y+55	; 0x37
    4e00:	98 ad       	ldd	r25, Y+56	; 0x38
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	40 e2       	ldi	r20, 0x20	; 32
    4e08:	51 e4       	ldi	r21, 0x41	; 65
    4e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	bc 01       	movw	r22, r24
    4e14:	cd 01       	movw	r24, r26
    4e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	98 ab       	std	Y+48, r25	; 0x30
    4e20:	8f a7       	std	Y+47, r24	; 0x2f
    4e22:	0f c0       	rjmp	.+30     	; 0x4e42 <LED_APP_5+0x20e>
    4e24:	88 ec       	ldi	r24, 0xC8	; 200
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	9e a7       	std	Y+46, r25	; 0x2e
    4e2a:	8d a7       	std	Y+45, r24	; 0x2d
    4e2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e30:	01 97       	sbiw	r24, 0x01	; 1
    4e32:	f1 f7       	brne	.-4      	; 0x4e30 <LED_APP_5+0x1fc>
    4e34:	9e a7       	std	Y+46, r25	; 0x2e
    4e36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e38:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e3a:	98 a9       	ldd	r25, Y+48	; 0x30
    4e3c:	01 97       	sbiw	r24, 0x01	; 1
    4e3e:	98 ab       	std	Y+48, r25	; 0x30
    4e40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e44:	98 a9       	ldd	r25, Y+48	; 0x30
    4e46:	00 97       	sbiw	r24, 0x00	; 0
    4e48:	69 f7       	brne	.-38     	; 0x4e24 <LED_APP_5+0x1f0>
    4e4a:	14 c0       	rjmp	.+40     	; 0x4e74 <LED_APP_5+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e4c:	69 a9       	ldd	r22, Y+49	; 0x31
    4e4e:	7a a9       	ldd	r23, Y+50	; 0x32
    4e50:	8b a9       	ldd	r24, Y+51	; 0x33
    4e52:	9c a9       	ldd	r25, Y+52	; 0x34
    4e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e58:	dc 01       	movw	r26, r24
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	98 ab       	std	Y+48, r25	; 0x30
    4e5e:	8f a7       	std	Y+47, r24	; 0x2f
    4e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e62:	98 a9       	ldd	r25, Y+48	; 0x30
    4e64:	9c a7       	std	Y+44, r25	; 0x2c
    4e66:	8b a7       	std	Y+43, r24	; 0x2b
    4e68:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e6c:	01 97       	sbiw	r24, 0x01	; 1
    4e6e:	f1 f7       	brne	.-4      	; 0x4e6c <LED_APP_5+0x238>
    4e70:	9c a7       	std	Y+44, r25	; 0x2c
    4e72:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		u8 Value_3 = Button_GetValue(PINA, PIN2);
    4e74:	84 e0       	ldi	r24, 0x04	; 4
    4e76:	62 e0       	ldi	r22, 0x02	; 2
    4e78:	0e 94 70 22 	call	0x44e0	; 0x44e0 <Button_GetValue>
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	e9 5b       	subi	r30, 0xB9	; 185
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	80 83       	st	Z, r24
    4e84:	80 e0       	ldi	r24, 0x00	; 0
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	a8 e4       	ldi	r26, 0x48	; 72
    4e8a:	b2 e4       	ldi	r27, 0x42	; 66
    4e8c:	8f a3       	std	Y+39, r24	; 0x27
    4e8e:	98 a7       	std	Y+40, r25	; 0x28
    4e90:	a9 a7       	std	Y+41, r26	; 0x29
    4e92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e94:	6f a1       	ldd	r22, Y+39	; 0x27
    4e96:	78 a5       	ldd	r23, Y+40	; 0x28
    4e98:	89 a5       	ldd	r24, Y+41	; 0x29
    4e9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e9c:	20 e0       	ldi	r18, 0x00	; 0
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	4a ef       	ldi	r20, 0xFA	; 250
    4ea2:	54 e4       	ldi	r21, 0x44	; 68
    4ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	cb 01       	movw	r24, r22
    4eac:	8b a3       	std	Y+35, r24	; 0x23
    4eae:	9c a3       	std	Y+36, r25	; 0x24
    4eb0:	ad a3       	std	Y+37, r26	; 0x25
    4eb2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    4eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    4eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    4eba:	9e a1       	ldd	r25, Y+38	; 0x26
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	40 e8       	ldi	r20, 0x80	; 128
    4ec2:	5f e3       	ldi	r21, 0x3F	; 63
    4ec4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4ec8:	88 23       	and	r24, r24
    4eca:	2c f4       	brge	.+10     	; 0x4ed6 <LED_APP_5+0x2a2>
		__ticks = 1;
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	9a a3       	std	Y+34, r25	; 0x22
    4ed2:	89 a3       	std	Y+33, r24	; 0x21
    4ed4:	3f c0       	rjmp	.+126    	; 0x4f54 <LED_APP_5+0x320>
	else if (__tmp > 65535)
    4ed6:	6b a1       	ldd	r22, Y+35	; 0x23
    4ed8:	7c a1       	ldd	r23, Y+36	; 0x24
    4eda:	8d a1       	ldd	r24, Y+37	; 0x25
    4edc:	9e a1       	ldd	r25, Y+38	; 0x26
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	3f ef       	ldi	r19, 0xFF	; 255
    4ee2:	4f e7       	ldi	r20, 0x7F	; 127
    4ee4:	57 e4       	ldi	r21, 0x47	; 71
    4ee6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4eea:	18 16       	cp	r1, r24
    4eec:	4c f5       	brge	.+82     	; 0x4f40 <LED_APP_5+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eee:	6f a1       	ldd	r22, Y+39	; 0x27
    4ef0:	78 a5       	ldd	r23, Y+40	; 0x28
    4ef2:	89 a5       	ldd	r24, Y+41	; 0x29
    4ef4:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e2       	ldi	r20, 0x20	; 32
    4efc:	51 e4       	ldi	r21, 0x41	; 65
    4efe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f02:	dc 01       	movw	r26, r24
    4f04:	cb 01       	movw	r24, r22
    4f06:	bc 01       	movw	r22, r24
    4f08:	cd 01       	movw	r24, r26
    4f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	9a a3       	std	Y+34, r25	; 0x22
    4f14:	89 a3       	std	Y+33, r24	; 0x21
    4f16:	0f c0       	rjmp	.+30     	; 0x4f36 <LED_APP_5+0x302>
    4f18:	88 ec       	ldi	r24, 0xC8	; 200
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	98 a3       	std	Y+32, r25	; 0x20
    4f1e:	8f 8f       	std	Y+31, r24	; 0x1f
    4f20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f22:	98 a1       	ldd	r25, Y+32	; 0x20
    4f24:	01 97       	sbiw	r24, 0x01	; 1
    4f26:	f1 f7       	brne	.-4      	; 0x4f24 <LED_APP_5+0x2f0>
    4f28:	98 a3       	std	Y+32, r25	; 0x20
    4f2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    4f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	9a a3       	std	Y+34, r25	; 0x22
    4f34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f36:	89 a1       	ldd	r24, Y+33	; 0x21
    4f38:	9a a1       	ldd	r25, Y+34	; 0x22
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	69 f7       	brne	.-38     	; 0x4f18 <LED_APP_5+0x2e4>
    4f3e:	14 c0       	rjmp	.+40     	; 0x4f68 <LED_APP_5+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f40:	6b a1       	ldd	r22, Y+35	; 0x23
    4f42:	7c a1       	ldd	r23, Y+36	; 0x24
    4f44:	8d a1       	ldd	r24, Y+37	; 0x25
    4f46:	9e a1       	ldd	r25, Y+38	; 0x26
    4f48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	9a a3       	std	Y+34, r25	; 0x22
    4f52:	89 a3       	std	Y+33, r24	; 0x21
    4f54:	89 a1       	ldd	r24, Y+33	; 0x21
    4f56:	9a a1       	ldd	r25, Y+34	; 0x22
    4f58:	9e 8f       	std	Y+30, r25	; 0x1e
    4f5a:	8d 8f       	std	Y+29, r24	; 0x1d
    4f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f60:	01 97       	sbiw	r24, 0x01	; 1
    4f62:	f1 f7       	brne	.-4      	; 0x4f60 <LED_APP_5+0x32c>
    4f64:	9e 8f       	std	Y+30, r25	; 0x1e
    4f66:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		if (Value_1 == HIGH) {
    4f68:	fe 01       	movw	r30, r28
    4f6a:	e7 5b       	subi	r30, 0xB7	; 183
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	80 81       	ld	r24, Z
    4f70:	81 30       	cpi	r24, 0x01	; 1
    4f72:	29 f4       	brne	.+10     	; 0x4f7e <LED_APP_5+0x34a>

			LED_ON(PORTB, PIN0);
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	60 e0       	ldi	r22, 0x00	; 0
    4f78:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
    4f7c:	04 c0       	rjmp	.+8      	; 0x4f86 <LED_APP_5+0x352>
			//_delay_ms(500);
		}
		else {
			LED_OFF(PORTB, PIN0);
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	60 e0       	ldi	r22, 0x00	; 0
    4f82:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
		}
		if (Value_2 == HIGH) {
    4f86:	fe 01       	movw	r30, r28
    4f88:	e8 5b       	subi	r30, 0xB8	; 184
    4f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8c:	80 81       	ld	r24, Z
    4f8e:	81 30       	cpi	r24, 0x01	; 1
    4f90:	09 f0       	breq	.+2      	; 0x4f94 <LED_APP_5+0x360>
    4f92:	77 c0       	rjmp	.+238    	; 0x5082 <LED_APP_5+0x44e>

			LED_ON(PORTB, PIN1);
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	61 e0       	ldi	r22, 0x01	; 1
    4f98:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	aa ef       	ldi	r26, 0xFA	; 250
    4fa2:	b3 e4       	ldi	r27, 0x43	; 67
    4fa4:	89 8f       	std	Y+25, r24	; 0x19
    4fa6:	9a 8f       	std	Y+26, r25	; 0x1a
    4fa8:	ab 8f       	std	Y+27, r26	; 0x1b
    4faa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fac:	69 8d       	ldd	r22, Y+25	; 0x19
    4fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	4a ef       	ldi	r20, 0xFA	; 250
    4fba:	54 e4       	ldi	r21, 0x44	; 68
    4fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	8d 8b       	std	Y+21, r24	; 0x15
    4fc6:	9e 8b       	std	Y+22, r25	; 0x16
    4fc8:	af 8b       	std	Y+23, r26	; 0x17
    4fca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    4fce:	7e 89       	ldd	r23, Y+22	; 0x16
    4fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    4fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	40 e8       	ldi	r20, 0x80	; 128
    4fda:	5f e3       	ldi	r21, 0x3F	; 63
    4fdc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4fe0:	88 23       	and	r24, r24
    4fe2:	2c f4       	brge	.+10     	; 0x4fee <LED_APP_5+0x3ba>
		__ticks = 1;
    4fe4:	81 e0       	ldi	r24, 0x01	; 1
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	9c 8b       	std	Y+20, r25	; 0x14
    4fea:	8b 8b       	std	Y+19, r24	; 0x13
    4fec:	3f c0       	rjmp	.+126    	; 0x506c <LED_APP_5+0x438>
	else if (__tmp > 65535)
    4fee:	6d 89       	ldd	r22, Y+21	; 0x15
    4ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ff6:	20 e0       	ldi	r18, 0x00	; 0
    4ff8:	3f ef       	ldi	r19, 0xFF	; 255
    4ffa:	4f e7       	ldi	r20, 0x7F	; 127
    4ffc:	57 e4       	ldi	r21, 0x47	; 71
    4ffe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5002:	18 16       	cp	r1, r24
    5004:	4c f5       	brge	.+82     	; 0x5058 <LED_APP_5+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5006:	69 8d       	ldd	r22, Y+25	; 0x19
    5008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    500a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    500c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	40 e2       	ldi	r20, 0x20	; 32
    5014:	51 e4       	ldi	r21, 0x41	; 65
    5016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	bc 01       	movw	r22, r24
    5020:	cd 01       	movw	r24, r26
    5022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5026:	dc 01       	movw	r26, r24
    5028:	cb 01       	movw	r24, r22
    502a:	9c 8b       	std	Y+20, r25	; 0x14
    502c:	8b 8b       	std	Y+19, r24	; 0x13
    502e:	0f c0       	rjmp	.+30     	; 0x504e <LED_APP_5+0x41a>
    5030:	88 ec       	ldi	r24, 0xC8	; 200
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	9a 8b       	std	Y+18, r25	; 0x12
    5036:	89 8b       	std	Y+17, r24	; 0x11
    5038:	89 89       	ldd	r24, Y+17	; 0x11
    503a:	9a 89       	ldd	r25, Y+18	; 0x12
    503c:	01 97       	sbiw	r24, 0x01	; 1
    503e:	f1 f7       	brne	.-4      	; 0x503c <LED_APP_5+0x408>
    5040:	9a 8b       	std	Y+18, r25	; 0x12
    5042:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5044:	8b 89       	ldd	r24, Y+19	; 0x13
    5046:	9c 89       	ldd	r25, Y+20	; 0x14
    5048:	01 97       	sbiw	r24, 0x01	; 1
    504a:	9c 8b       	std	Y+20, r25	; 0x14
    504c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    504e:	8b 89       	ldd	r24, Y+19	; 0x13
    5050:	9c 89       	ldd	r25, Y+20	; 0x14
    5052:	00 97       	sbiw	r24, 0x00	; 0
    5054:	69 f7       	brne	.-38     	; 0x5030 <LED_APP_5+0x3fc>
    5056:	19 c0       	rjmp	.+50     	; 0x508a <LED_APP_5+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5058:	6d 89       	ldd	r22, Y+21	; 0x15
    505a:	7e 89       	ldd	r23, Y+22	; 0x16
    505c:	8f 89       	ldd	r24, Y+23	; 0x17
    505e:	98 8d       	ldd	r25, Y+24	; 0x18
    5060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5064:	dc 01       	movw	r26, r24
    5066:	cb 01       	movw	r24, r22
    5068:	9c 8b       	std	Y+20, r25	; 0x14
    506a:	8b 8b       	std	Y+19, r24	; 0x13
    506c:	8b 89       	ldd	r24, Y+19	; 0x13
    506e:	9c 89       	ldd	r25, Y+20	; 0x14
    5070:	98 8b       	std	Y+16, r25	; 0x10
    5072:	8f 87       	std	Y+15, r24	; 0x0f
    5074:	8f 85       	ldd	r24, Y+15	; 0x0f
    5076:	98 89       	ldd	r25, Y+16	; 0x10
    5078:	01 97       	sbiw	r24, 0x01	; 1
    507a:	f1 f7       	brne	.-4      	; 0x5078 <LED_APP_5+0x444>
    507c:	98 8b       	std	Y+16, r25	; 0x10
    507e:	8f 87       	std	Y+15, r24	; 0x0f
    5080:	04 c0       	rjmp	.+8      	; 0x508a <LED_APP_5+0x456>
			_delay_ms(500);
		}
		else {
			LED_OFF(PORTB, PIN1);
    5082:	81 e0       	ldi	r24, 0x01	; 1
    5084:	61 e0       	ldi	r22, 0x01	; 1
    5086:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
		}
		if (Value_3 == HIGH) {
    508a:	fe 01       	movw	r30, r28
    508c:	e9 5b       	subi	r30, 0xB9	; 185
    508e:	ff 4f       	sbci	r31, 0xFF	; 255
    5090:	80 81       	ld	r24, Z
    5092:	81 30       	cpi	r24, 0x01	; 1
    5094:	09 f0       	breq	.+2      	; 0x5098 <LED_APP_5+0x464>
    5096:	77 c0       	rjmp	.+238    	; 0x5186 <LED_APP_5+0x552>

			LED_ON(PORTB, PIN2);
    5098:	81 e0       	ldi	r24, 0x01	; 1
    509a:	62 e0       	ldi	r22, 0x02	; 2
    509c:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	aa ef       	ldi	r26, 0xFA	; 250
    50a6:	b3 e4       	ldi	r27, 0x43	; 67
    50a8:	8b 87       	std	Y+11, r24	; 0x0b
    50aa:	9c 87       	std	Y+12, r25	; 0x0c
    50ac:	ad 87       	std	Y+13, r26	; 0x0d
    50ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    50b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    50b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    50b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    50b8:	20 e0       	ldi	r18, 0x00	; 0
    50ba:	30 e0       	ldi	r19, 0x00	; 0
    50bc:	4a ef       	ldi	r20, 0xFA	; 250
    50be:	54 e4       	ldi	r21, 0x44	; 68
    50c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22
    50c8:	8f 83       	std	Y+7, r24	; 0x07
    50ca:	98 87       	std	Y+8, r25	; 0x08
    50cc:	a9 87       	std	Y+9, r26	; 0x09
    50ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50d0:	6f 81       	ldd	r22, Y+7	; 0x07
    50d2:	78 85       	ldd	r23, Y+8	; 0x08
    50d4:	89 85       	ldd	r24, Y+9	; 0x09
    50d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	40 e8       	ldi	r20, 0x80	; 128
    50de:	5f e3       	ldi	r21, 0x3F	; 63
    50e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    50e4:	88 23       	and	r24, r24
    50e6:	2c f4       	brge	.+10     	; 0x50f2 <LED_APP_5+0x4be>
		__ticks = 1;
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	9e 83       	std	Y+6, r25	; 0x06
    50ee:	8d 83       	std	Y+5, r24	; 0x05
    50f0:	3f c0       	rjmp	.+126    	; 0x5170 <LED_APP_5+0x53c>
	else if (__tmp > 65535)
    50f2:	6f 81       	ldd	r22, Y+7	; 0x07
    50f4:	78 85       	ldd	r23, Y+8	; 0x08
    50f6:	89 85       	ldd	r24, Y+9	; 0x09
    50f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50fa:	20 e0       	ldi	r18, 0x00	; 0
    50fc:	3f ef       	ldi	r19, 0xFF	; 255
    50fe:	4f e7       	ldi	r20, 0x7F	; 127
    5100:	57 e4       	ldi	r21, 0x47	; 71
    5102:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5106:	18 16       	cp	r1, r24
    5108:	4c f5       	brge	.+82     	; 0x515c <LED_APP_5+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    510a:	6b 85       	ldd	r22, Y+11	; 0x0b
    510c:	7c 85       	ldd	r23, Y+12	; 0x0c
    510e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5110:	9e 85       	ldd	r25, Y+14	; 0x0e
    5112:	20 e0       	ldi	r18, 0x00	; 0
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	40 e2       	ldi	r20, 0x20	; 32
    5118:	51 e4       	ldi	r21, 0x41	; 65
    511a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    511e:	dc 01       	movw	r26, r24
    5120:	cb 01       	movw	r24, r22
    5122:	bc 01       	movw	r22, r24
    5124:	cd 01       	movw	r24, r26
    5126:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    512a:	dc 01       	movw	r26, r24
    512c:	cb 01       	movw	r24, r22
    512e:	9e 83       	std	Y+6, r25	; 0x06
    5130:	8d 83       	std	Y+5, r24	; 0x05
    5132:	0f c0       	rjmp	.+30     	; 0x5152 <LED_APP_5+0x51e>
    5134:	88 ec       	ldi	r24, 0xC8	; 200
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	9c 83       	std	Y+4, r25	; 0x04
    513a:	8b 83       	std	Y+3, r24	; 0x03
    513c:	8b 81       	ldd	r24, Y+3	; 0x03
    513e:	9c 81       	ldd	r25, Y+4	; 0x04
    5140:	01 97       	sbiw	r24, 0x01	; 1
    5142:	f1 f7       	brne	.-4      	; 0x5140 <LED_APP_5+0x50c>
    5144:	9c 83       	std	Y+4, r25	; 0x04
    5146:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5148:	8d 81       	ldd	r24, Y+5	; 0x05
    514a:	9e 81       	ldd	r25, Y+6	; 0x06
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	9e 83       	std	Y+6, r25	; 0x06
    5150:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5152:	8d 81       	ldd	r24, Y+5	; 0x05
    5154:	9e 81       	ldd	r25, Y+6	; 0x06
    5156:	00 97       	sbiw	r24, 0x00	; 0
    5158:	69 f7       	brne	.-38     	; 0x5134 <LED_APP_5+0x500>
    515a:	85 cd       	rjmp	.-1270   	; 0x4c66 <LED_APP_5+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    515c:	6f 81       	ldd	r22, Y+7	; 0x07
    515e:	78 85       	ldd	r23, Y+8	; 0x08
    5160:	89 85       	ldd	r24, Y+9	; 0x09
    5162:	9a 85       	ldd	r25, Y+10	; 0x0a
    5164:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5168:	dc 01       	movw	r26, r24
    516a:	cb 01       	movw	r24, r22
    516c:	9e 83       	std	Y+6, r25	; 0x06
    516e:	8d 83       	std	Y+5, r24	; 0x05
    5170:	8d 81       	ldd	r24, Y+5	; 0x05
    5172:	9e 81       	ldd	r25, Y+6	; 0x06
    5174:	9a 83       	std	Y+2, r25	; 0x02
    5176:	89 83       	std	Y+1, r24	; 0x01
    5178:	89 81       	ldd	r24, Y+1	; 0x01
    517a:	9a 81       	ldd	r25, Y+2	; 0x02
    517c:	01 97       	sbiw	r24, 0x01	; 1
    517e:	f1 f7       	brne	.-4      	; 0x517c <LED_APP_5+0x548>
    5180:	9a 83       	std	Y+2, r25	; 0x02
    5182:	89 83       	std	Y+1, r24	; 0x01
    5184:	70 cd       	rjmp	.-1312   	; 0x4c66 <LED_APP_5+0x32>
			_delay_ms(500);
		}
		else {
			LED_OFF(PORTB, PIN2);
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	62 e0       	ldi	r22, 0x02	; 2
    518a:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
    518e:	6b cd       	rjmp	.-1322   	; 0x4c66 <LED_APP_5+0x32>

00005190 <LCD_APP_1>:
#include "../../HAL/LCD/LCD_Interface.h"
/*Function to Print Data from type Integer On Screen LCD on Row One
 *Receive Data That you want To Print in This fromt 'Data'
 */

void LCD_APP_1(u8 Data) {
    5190:	df 93       	push	r29
    5192:	cf 93       	push	r28
    5194:	0f 92       	push	r0
    5196:	cd b7       	in	r28, 0x3d	; 61
    5198:	de b7       	in	r29, 0x3e	; 62
    519a:	89 83       	std	Y+1, r24	; 0x01

	LCD_HWIntial(PORTC, PORTD);
    519c:	82 e0       	ldi	r24, 0x02	; 2
    519e:	63 e0       	ldi	r22, 0x03	; 3
    51a0:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <LCD_HWIntial>

	while (1) {
		LCD_SWIntial(PORTC, PORTD);
    51a4:	82 e0       	ldi	r24, 0x02	; 2
    51a6:	63 e0       	ldi	r22, 0x03	; 3
    51a8:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <LCD_SWIntial>
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
    51ac:	82 e0       	ldi	r24, 0x02	; 2
    51ae:	63 e0       	ldi	r22, 0x03	; 3
    51b0:	40 e8       	ldi	r20, 0x80	; 128
    51b2:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		LCD_SendData(PORTC, PORTD, 'D');
    51b6:	82 e0       	ldi	r24, 0x02	; 2
    51b8:	63 e0       	ldi	r22, 0x03	; 3
    51ba:	44 e4       	ldi	r20, 0x44	; 68
    51bc:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <LCD_SendData>
		LCD_SendCommand(PORTC, PORTD, CLEAR);
    51c0:	82 e0       	ldi	r24, 0x02	; 2
    51c2:	63 e0       	ldi	r22, 0x03	; 3
    51c4:	41 e0       	ldi	r20, 0x01	; 1
    51c6:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    51ca:	ec cf       	rjmp	.-40     	; 0x51a4 <LCD_APP_1+0x14>

000051cc <LCD_APP_2>:

/*Function To Print String word That You Want
 *Receive String in this Format "String"
 */

void LCD_APP_2(u8 String) {
    51cc:	df 93       	push	r29
    51ce:	cf 93       	push	r28
    51d0:	0f 92       	push	r0
    51d2:	cd b7       	in	r28, 0x3d	; 61
    51d4:	de b7       	in	r29, 0x3e	; 62
    51d6:	89 83       	std	Y+1, r24	; 0x01
	LCD_HWIntial(PORTC, PORTD);
    51d8:	82 e0       	ldi	r24, 0x02	; 2
    51da:	63 e0       	ldi	r22, 0x03	; 3
    51dc:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <LCD_HWIntial>
	while (1) {
		LCD_SWIntial(PORTC, PORTD);
    51e0:	82 e0       	ldi	r24, 0x02	; 2
    51e2:	63 e0       	ldi	r22, 0x03	; 3
    51e4:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <LCD_SWIntial>
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
    51e8:	82 e0       	ldi	r24, 0x02	; 2
    51ea:	63 e0       	ldi	r22, 0x03	; 3
    51ec:	40 e8       	ldi	r20, 0x80	; 128
    51ee:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		LCD_SendString(PORTC, PORTD, String);
    51f2:	89 81       	ldd	r24, Y+1	; 0x01
    51f4:	88 2f       	mov	r24, r24
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	9c 01       	movw	r18, r24
    51fa:	82 e0       	ldi	r24, 0x02	; 2
    51fc:	63 e0       	ldi	r22, 0x03	; 3
    51fe:	a9 01       	movw	r20, r18
    5200:	0e 94 72 20 	call	0x40e4	; 0x40e4 <LCD_SendString>

		LCD_SendCommand(PORTC, PORTD, CLEAR);
    5204:	82 e0       	ldi	r24, 0x02	; 2
    5206:	63 e0       	ldi	r22, 0x03	; 3
    5208:	41 e0       	ldi	r20, 0x01	; 1
    520a:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    520e:	e8 cf       	rjmp	.-48     	; 0x51e0 <LCD_APP_2+0x14>

00005210 <num>:
	}
}
u8 num(u8 i) {
    5210:	df 93       	push	r29
    5212:	cf 93       	push	r28
    5214:	00 d0       	rcall	.+0      	; 0x5216 <num+0x6>
    5216:	00 d0       	rcall	.+0      	; 0x5218 <num+0x8>
    5218:	0f 92       	push	r0
    521a:	cd b7       	in	r28, 0x3d	; 61
    521c:	de b7       	in	r29, 0x3e	; 62
    521e:	89 83       	std	Y+1, r24	; 0x01
	switch (i) {
    5220:	89 81       	ldd	r24, Y+1	; 0x01
    5222:	28 2f       	mov	r18, r24
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	3c 83       	std	Y+4, r19	; 0x04
    5228:	2b 83       	std	Y+3, r18	; 0x03
    522a:	8b 81       	ldd	r24, Y+3	; 0x03
    522c:	9c 81       	ldd	r25, Y+4	; 0x04
    522e:	85 30       	cpi	r24, 0x05	; 5
    5230:	91 05       	cpc	r25, r1
    5232:	09 f4       	brne	.+2      	; 0x5236 <num+0x26>
    5234:	59 c0       	rjmp	.+178    	; 0x52e8 <num+0xd8>
    5236:	2b 81       	ldd	r18, Y+3	; 0x03
    5238:	3c 81       	ldd	r19, Y+4	; 0x04
    523a:	26 30       	cpi	r18, 0x06	; 6
    523c:	31 05       	cpc	r19, r1
    523e:	04 f5       	brge	.+64     	; 0x5280 <num+0x70>
    5240:	8b 81       	ldd	r24, Y+3	; 0x03
    5242:	9c 81       	ldd	r25, Y+4	; 0x04
    5244:	82 30       	cpi	r24, 0x02	; 2
    5246:	91 05       	cpc	r25, r1
    5248:	09 f4       	brne	.+2      	; 0x524c <num+0x3c>
    524a:	45 c0       	rjmp	.+138    	; 0x52d6 <num+0xc6>
    524c:	2b 81       	ldd	r18, Y+3	; 0x03
    524e:	3c 81       	ldd	r19, Y+4	; 0x04
    5250:	23 30       	cpi	r18, 0x03	; 3
    5252:	31 05       	cpc	r19, r1
    5254:	54 f4       	brge	.+20     	; 0x526a <num+0x5a>
    5256:	8b 81       	ldd	r24, Y+3	; 0x03
    5258:	9c 81       	ldd	r25, Y+4	; 0x04
    525a:	00 97       	sbiw	r24, 0x00	; 0
    525c:	b1 f1       	breq	.+108    	; 0x52ca <num+0xba>
    525e:	2b 81       	ldd	r18, Y+3	; 0x03
    5260:	3c 81       	ldd	r19, Y+4	; 0x04
    5262:	21 30       	cpi	r18, 0x01	; 1
    5264:	31 05       	cpc	r19, r1
    5266:	a1 f1       	breq	.+104    	; 0x52d0 <num+0xc0>
    5268:	54 c0       	rjmp	.+168    	; 0x5312 <num+0x102>
    526a:	8b 81       	ldd	r24, Y+3	; 0x03
    526c:	9c 81       	ldd	r25, Y+4	; 0x04
    526e:	83 30       	cpi	r24, 0x03	; 3
    5270:	91 05       	cpc	r25, r1
    5272:	a1 f1       	breq	.+104    	; 0x52dc <num+0xcc>
    5274:	2b 81       	ldd	r18, Y+3	; 0x03
    5276:	3c 81       	ldd	r19, Y+4	; 0x04
    5278:	24 30       	cpi	r18, 0x04	; 4
    527a:	31 05       	cpc	r19, r1
    527c:	91 f1       	breq	.+100    	; 0x52e2 <num+0xd2>
    527e:	49 c0       	rjmp	.+146    	; 0x5312 <num+0x102>
    5280:	8b 81       	ldd	r24, Y+3	; 0x03
    5282:	9c 81       	ldd	r25, Y+4	; 0x04
    5284:	88 30       	cpi	r24, 0x08	; 8
    5286:	91 05       	cpc	r25, r1
    5288:	c1 f1       	breq	.+112    	; 0x52fa <num+0xea>
    528a:	2b 81       	ldd	r18, Y+3	; 0x03
    528c:	3c 81       	ldd	r19, Y+4	; 0x04
    528e:	29 30       	cpi	r18, 0x09	; 9
    5290:	31 05       	cpc	r19, r1
    5292:	5c f4       	brge	.+22     	; 0x52aa <num+0x9a>
    5294:	8b 81       	ldd	r24, Y+3	; 0x03
    5296:	9c 81       	ldd	r25, Y+4	; 0x04
    5298:	86 30       	cpi	r24, 0x06	; 6
    529a:	91 05       	cpc	r25, r1
    529c:	41 f1       	breq	.+80     	; 0x52ee <num+0xde>
    529e:	2b 81       	ldd	r18, Y+3	; 0x03
    52a0:	3c 81       	ldd	r19, Y+4	; 0x04
    52a2:	27 30       	cpi	r18, 0x07	; 7
    52a4:	31 05       	cpc	r19, r1
    52a6:	31 f1       	breq	.+76     	; 0x52f4 <num+0xe4>
    52a8:	34 c0       	rjmp	.+104    	; 0x5312 <num+0x102>
    52aa:	8b 81       	ldd	r24, Y+3	; 0x03
    52ac:	9c 81       	ldd	r25, Y+4	; 0x04
    52ae:	8a 30       	cpi	r24, 0x0A	; 10
    52b0:	91 05       	cpc	r25, r1
    52b2:	49 f1       	breq	.+82     	; 0x5306 <num+0xf6>
    52b4:	2b 81       	ldd	r18, Y+3	; 0x03
    52b6:	3c 81       	ldd	r19, Y+4	; 0x04
    52b8:	2a 30       	cpi	r18, 0x0A	; 10
    52ba:	31 05       	cpc	r19, r1
    52bc:	0c f1       	brlt	.+66     	; 0x5300 <num+0xf0>
    52be:	8b 81       	ldd	r24, Y+3	; 0x03
    52c0:	9c 81       	ldd	r25, Y+4	; 0x04
    52c2:	8b 30       	cpi	r24, 0x0B	; 11
    52c4:	91 05       	cpc	r25, r1
    52c6:	11 f1       	breq	.+68     	; 0x530c <num+0xfc>
    52c8:	24 c0       	rjmp	.+72     	; 0x5312 <num+0x102>
	case 0:
		return '0';
    52ca:	90 e3       	ldi	r25, 0x30	; 48
    52cc:	9a 83       	std	Y+2, r25	; 0x02
    52ce:	22 c0       	rjmp	.+68     	; 0x5314 <num+0x104>
		break;
	case 1:
		return '1';
    52d0:	21 e3       	ldi	r18, 0x31	; 49
    52d2:	2a 83       	std	Y+2, r18	; 0x02
    52d4:	1f c0       	rjmp	.+62     	; 0x5314 <num+0x104>
		break;
	case 2:
		return '2';
    52d6:	32 e3       	ldi	r19, 0x32	; 50
    52d8:	3a 83       	std	Y+2, r19	; 0x02
    52da:	1c c0       	rjmp	.+56     	; 0x5314 <num+0x104>
		break;
	case 3:
		return '3';
    52dc:	83 e3       	ldi	r24, 0x33	; 51
    52de:	8a 83       	std	Y+2, r24	; 0x02
    52e0:	19 c0       	rjmp	.+50     	; 0x5314 <num+0x104>
		break;
	case 4:
		return '4';
    52e2:	94 e3       	ldi	r25, 0x34	; 52
    52e4:	9a 83       	std	Y+2, r25	; 0x02
    52e6:	16 c0       	rjmp	.+44     	; 0x5314 <num+0x104>
		break;
	case 5:
		return '5';
    52e8:	25 e3       	ldi	r18, 0x35	; 53
    52ea:	2a 83       	std	Y+2, r18	; 0x02
    52ec:	13 c0       	rjmp	.+38     	; 0x5314 <num+0x104>
		break;
	case 6:
		return '6';
    52ee:	36 e3       	ldi	r19, 0x36	; 54
    52f0:	3a 83       	std	Y+2, r19	; 0x02
    52f2:	10 c0       	rjmp	.+32     	; 0x5314 <num+0x104>
		break;
	case 7:
		return '7';
    52f4:	87 e3       	ldi	r24, 0x37	; 55
    52f6:	8a 83       	std	Y+2, r24	; 0x02
    52f8:	0d c0       	rjmp	.+26     	; 0x5314 <num+0x104>
		break;
	case 8:
		return '8';
    52fa:	98 e3       	ldi	r25, 0x38	; 56
    52fc:	9a 83       	std	Y+2, r25	; 0x02
    52fe:	0a c0       	rjmp	.+20     	; 0x5314 <num+0x104>
		break;
	case 9:
		return '9';
    5300:	29 e3       	ldi	r18, 0x39	; 57
    5302:	2a 83       	std	Y+2, r18	; 0x02
    5304:	07 c0       	rjmp	.+14     	; 0x5314 <num+0x104>
		break;
	case 10:
		return '10';
    5306:	30 e3       	ldi	r19, 0x30	; 48
    5308:	3a 83       	std	Y+2, r19	; 0x02
    530a:	04 c0       	rjmp	.+8      	; 0x5314 <num+0x104>
		break;
	case 11:
		return '11';
    530c:	81 e3       	ldi	r24, 0x31	; 49
    530e:	8a 83       	std	Y+2, r24	; 0x02
    5310:	01 c0       	rjmp	.+2      	; 0x5314 <num+0x104>
    5312:	02 c0       	rjmp	.+4      	; 0x5318 <num+0x108>
		break;

	}

}
    5314:	9a 81       	ldd	r25, Y+2	; 0x02
    5316:	9d 83       	std	Y+5, r25	; 0x05
    5318:	8d 81       	ldd	r24, Y+5	; 0x05
    531a:	0f 90       	pop	r0
    531c:	0f 90       	pop	r0
    531e:	0f 90       	pop	r0
    5320:	0f 90       	pop	r0
    5322:	0f 90       	pop	r0
    5324:	cf 91       	pop	r28
    5326:	df 91       	pop	r29
    5328:	08 95       	ret

0000532a <LCD_APP_3>:
/*Function to Print Number from 0 to 10
 */

void LCD_APP_3(void) {
    532a:	df 93       	push	r29
    532c:	cf 93       	push	r28
    532e:	cd b7       	in	r28, 0x3d	; 61
    5330:	de b7       	in	r29, 0x3e	; 62
    5332:	2f 97       	sbiw	r28, 0x0f	; 15
    5334:	0f b6       	in	r0, 0x3f	; 63
    5336:	f8 94       	cli
    5338:	de bf       	out	0x3e, r29	; 62
    533a:	0f be       	out	0x3f, r0	; 63
    533c:	cd bf       	out	0x3d, r28	; 61
	LCD_HWIntial(PORTC, PORTD);
    533e:	82 e0       	ldi	r24, 0x02	; 2
    5340:	63 e0       	ldi	r22, 0x03	; 3
    5342:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <LCD_HWIntial>
	while (1) {
		u8 i = 0;
    5346:	1f 86       	std	Y+15, r1	; 0x0f
		LCD_SWIntial(PORTC, PORTD);
    5348:	82 e0       	ldi	r24, 0x02	; 2
    534a:	63 e0       	ldi	r22, 0x03	; 3
    534c:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <LCD_SWIntial>
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
    5350:	82 e0       	ldi	r24, 0x02	; 2
    5352:	63 e0       	ldi	r22, 0x03	; 3
    5354:	40 e8       	ldi	r20, 0x80	; 128
    5356:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		LCD_SendString(PORTC, PORTD, "     Number ");
    535a:	2d e6       	ldi	r18, 0x6D	; 109
    535c:	30 e0       	ldi	r19, 0x00	; 0
    535e:	82 e0       	ldi	r24, 0x02	; 2
    5360:	63 e0       	ldi	r22, 0x03	; 3
    5362:	a9 01       	movw	r20, r18
    5364:	0e 94 72 20 	call	0x40e4	; 0x40e4 <LCD_SendString>
		LCD_SendCommand(PORTC, PORTD, ROW_TOW);
    5368:	82 e0       	ldi	r24, 0x02	; 2
    536a:	63 e0       	ldi	r22, 0x03	; 3
    536c:	40 ec       	ldi	r20, 0xC0	; 192
    536e:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		//LCD_SendString(PORTC, PORTD, "        ");
		for (i = 0; i < 11; i++) {
    5372:	1f 86       	std	Y+15, r1	; 0x0f
    5374:	7e c0       	rjmp	.+252    	; 0x5472 <LCD_APP_3+0x148>
			LCD_SendData(PORTC, PORTD, num(i));
    5376:	8f 85       	ldd	r24, Y+15	; 0x0f
    5378:	0e 94 08 29 	call	0x5210	; 0x5210 <num>
    537c:	98 2f       	mov	r25, r24
    537e:	82 e0       	ldi	r24, 0x02	; 2
    5380:	63 e0       	ldi	r22, 0x03	; 3
    5382:	49 2f       	mov	r20, r25
    5384:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <LCD_SendData>
    5388:	80 e0       	ldi	r24, 0x00	; 0
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	aa ef       	ldi	r26, 0xFA	; 250
    538e:	b3 e4       	ldi	r27, 0x43	; 67
    5390:	8b 87       	std	Y+11, r24	; 0x0b
    5392:	9c 87       	std	Y+12, r25	; 0x0c
    5394:	ad 87       	std	Y+13, r26	; 0x0d
    5396:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5398:	6b 85       	ldd	r22, Y+11	; 0x0b
    539a:	7c 85       	ldd	r23, Y+12	; 0x0c
    539c:	8d 85       	ldd	r24, Y+13	; 0x0d
    539e:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a0:	20 e0       	ldi	r18, 0x00	; 0
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	4a ef       	ldi	r20, 0xFA	; 250
    53a6:	54 e4       	ldi	r21, 0x44	; 68
    53a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    53ac:	dc 01       	movw	r26, r24
    53ae:	cb 01       	movw	r24, r22
    53b0:	8f 83       	std	Y+7, r24	; 0x07
    53b2:	98 87       	std	Y+8, r25	; 0x08
    53b4:	a9 87       	std	Y+9, r26	; 0x09
    53b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53b8:	6f 81       	ldd	r22, Y+7	; 0x07
    53ba:	78 85       	ldd	r23, Y+8	; 0x08
    53bc:	89 85       	ldd	r24, Y+9	; 0x09
    53be:	9a 85       	ldd	r25, Y+10	; 0x0a
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	40 e8       	ldi	r20, 0x80	; 128
    53c6:	5f e3       	ldi	r21, 0x3F	; 63
    53c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    53cc:	88 23       	and	r24, r24
    53ce:	2c f4       	brge	.+10     	; 0x53da <LCD_APP_3+0xb0>
		__ticks = 1;
    53d0:	81 e0       	ldi	r24, 0x01	; 1
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	9e 83       	std	Y+6, r25	; 0x06
    53d6:	8d 83       	std	Y+5, r24	; 0x05
    53d8:	3f c0       	rjmp	.+126    	; 0x5458 <LCD_APP_3+0x12e>
	else if (__tmp > 65535)
    53da:	6f 81       	ldd	r22, Y+7	; 0x07
    53dc:	78 85       	ldd	r23, Y+8	; 0x08
    53de:	89 85       	ldd	r24, Y+9	; 0x09
    53e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	3f ef       	ldi	r19, 0xFF	; 255
    53e6:	4f e7       	ldi	r20, 0x7F	; 127
    53e8:	57 e4       	ldi	r21, 0x47	; 71
    53ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    53ee:	18 16       	cp	r1, r24
    53f0:	4c f5       	brge	.+82     	; 0x5444 <LCD_APP_3+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    53f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    53f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    53f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    53fa:	20 e0       	ldi	r18, 0x00	; 0
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	40 e2       	ldi	r20, 0x20	; 32
    5400:	51 e4       	ldi	r21, 0x41	; 65
    5402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5406:	dc 01       	movw	r26, r24
    5408:	cb 01       	movw	r24, r22
    540a:	bc 01       	movw	r22, r24
    540c:	cd 01       	movw	r24, r26
    540e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5412:	dc 01       	movw	r26, r24
    5414:	cb 01       	movw	r24, r22
    5416:	9e 83       	std	Y+6, r25	; 0x06
    5418:	8d 83       	std	Y+5, r24	; 0x05
    541a:	0f c0       	rjmp	.+30     	; 0x543a <LCD_APP_3+0x110>
    541c:	88 ec       	ldi	r24, 0xC8	; 200
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	9c 83       	std	Y+4, r25	; 0x04
    5422:	8b 83       	std	Y+3, r24	; 0x03
    5424:	8b 81       	ldd	r24, Y+3	; 0x03
    5426:	9c 81       	ldd	r25, Y+4	; 0x04
    5428:	01 97       	sbiw	r24, 0x01	; 1
    542a:	f1 f7       	brne	.-4      	; 0x5428 <LCD_APP_3+0xfe>
    542c:	9c 83       	std	Y+4, r25	; 0x04
    542e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5430:	8d 81       	ldd	r24, Y+5	; 0x05
    5432:	9e 81       	ldd	r25, Y+6	; 0x06
    5434:	01 97       	sbiw	r24, 0x01	; 1
    5436:	9e 83       	std	Y+6, r25	; 0x06
    5438:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    543a:	8d 81       	ldd	r24, Y+5	; 0x05
    543c:	9e 81       	ldd	r25, Y+6	; 0x06
    543e:	00 97       	sbiw	r24, 0x00	; 0
    5440:	69 f7       	brne	.-38     	; 0x541c <LCD_APP_3+0xf2>
    5442:	14 c0       	rjmp	.+40     	; 0x546c <LCD_APP_3+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5444:	6f 81       	ldd	r22, Y+7	; 0x07
    5446:	78 85       	ldd	r23, Y+8	; 0x08
    5448:	89 85       	ldd	r24, Y+9	; 0x09
    544a:	9a 85       	ldd	r25, Y+10	; 0x0a
    544c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5450:	dc 01       	movw	r26, r24
    5452:	cb 01       	movw	r24, r22
    5454:	9e 83       	std	Y+6, r25	; 0x06
    5456:	8d 83       	std	Y+5, r24	; 0x05
    5458:	8d 81       	ldd	r24, Y+5	; 0x05
    545a:	9e 81       	ldd	r25, Y+6	; 0x06
    545c:	9a 83       	std	Y+2, r25	; 0x02
    545e:	89 83       	std	Y+1, r24	; 0x01
    5460:	89 81       	ldd	r24, Y+1	; 0x01
    5462:	9a 81       	ldd	r25, Y+2	; 0x02
    5464:	01 97       	sbiw	r24, 0x01	; 1
    5466:	f1 f7       	brne	.-4      	; 0x5464 <LCD_APP_3+0x13a>
    5468:	9a 83       	std	Y+2, r25	; 0x02
    546a:	89 83       	std	Y+1, r24	; 0x01
		LCD_SWIntial(PORTC, PORTD);
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
		LCD_SendString(PORTC, PORTD, "     Number ");
		LCD_SendCommand(PORTC, PORTD, ROW_TOW);
		//LCD_SendString(PORTC, PORTD, "        ");
		for (i = 0; i < 11; i++) {
    546c:	8f 85       	ldd	r24, Y+15	; 0x0f
    546e:	8f 5f       	subi	r24, 0xFF	; 255
    5470:	8f 87       	std	Y+15, r24	; 0x0f
    5472:	8f 85       	ldd	r24, Y+15	; 0x0f
    5474:	8b 30       	cpi	r24, 0x0B	; 11
    5476:	08 f4       	brcc	.+2      	; 0x547a <LCD_APP_3+0x150>
    5478:	7e cf       	rjmp	.-260    	; 0x5376 <LCD_APP_3+0x4c>
			LCD_SendData(PORTC, PORTD, num(i));
			_delay_ms(500);

		}
		LCD_SendCommand(PORTC, PORTD, CLEAR);
    547a:	82 e0       	ldi	r24, 0x02	; 2
    547c:	63 e0       	ldi	r22, 0x03	; 3
    547e:	41 e0       	ldi	r20, 0x01	; 1
    5480:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    5484:	60 cf       	rjmp	.-320    	; 0x5346 <LCD_APP_3+0x1c>

00005486 <KEYBAD_APP_1>:
#include"../../HAL/KeyBad/Keybad_Interface.h"
#include"../../HAL/LCD/LCD_Interface.h"
/*Function to
 *
 */
void KEYBAD_APP_1(void) {
    5486:	df 93       	push	r29
    5488:	cf 93       	push	r28
    548a:	0f 92       	push	r0
    548c:	cd b7       	in	r28, 0x3d	; 61
    548e:	de b7       	in	r29, 0x3e	; 62
	LCD_HWIntial(PORTC, PORTD);
    5490:	82 e0       	ldi	r24, 0x02	; 2
    5492:	63 e0       	ldi	r22, 0x03	; 3
    5494:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <LCD_HWIntial>
	Keybad_HWIntial(PORTB);
    5498:	81 e0       	ldi	r24, 0x01	; 1
    549a:	0e 94 b4 20 	call	0x4168	; 0x4168 <Keybad_HWIntial>

	while (1) {
		LCD_SWIntial(PORTC, PORTD);
    549e:	82 e0       	ldi	r24, 0x02	; 2
    54a0:	63 e0       	ldi	r22, 0x03	; 3
    54a2:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <LCD_SWIntial>
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
    54a6:	82 e0       	ldi	r24, 0x02	; 2
    54a8:	63 e0       	ldi	r22, 0x03	; 3
    54aa:	40 e8       	ldi	r20, 0x80	; 128
    54ac:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		LCD_SendString(PORTC, PORTD, "Value is :: ");
    54b0:	2a e7       	ldi	r18, 0x7A	; 122
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	82 e0       	ldi	r24, 0x02	; 2
    54b6:	63 e0       	ldi	r22, 0x03	; 3
    54b8:	a9 01       	movw	r20, r18
    54ba:	0e 94 72 20 	call	0x40e4	; 0x40e4 <LCD_SendString>
		u8 Value = Keybad_SWIntial();
    54be:	0e 94 c6 20 	call	0x418c	; 0x418c <Keybad_SWIntial>
    54c2:	89 83       	std	Y+1, r24	; 0x01
		//	if (Value != '\0')
			LCD_SendData(PORTC, PORTD, Value);
    54c4:	82 e0       	ldi	r24, 0x02	; 2
    54c6:	63 e0       	ldi	r22, 0x03	; 3
    54c8:	49 81       	ldd	r20, Y+1	; 0x01
    54ca:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <LCD_SendData>

		LCD_SendCommand(PORTC, PORTD, CLEAR);
    54ce:	82 e0       	ldi	r24, 0x02	; 2
    54d0:	63 e0       	ldi	r22, 0x03	; 3
    54d2:	41 e0       	ldi	r20, 0x01	; 1
    54d4:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    54d8:	e2 cf       	rjmp	.-60     	; 0x549e <KEYBAD_APP_1+0x18>

000054da <KEYBAD_APP_2>:
}

/*Function To
 *
 */
void KEYBAD_APP_2(void) {
    54da:	df 93       	push	r29
    54dc:	cf 93       	push	r28
    54de:	cd b7       	in	r28, 0x3d	; 61
    54e0:	de b7       	in	r29, 0x3e	; 62
	LCD_HWIntial(PORTC, PORTD);
    54e2:	82 e0       	ldi	r24, 0x02	; 2
    54e4:	63 e0       	ldi	r22, 0x03	; 3
    54e6:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <LCD_HWIntial>
	while (1) {
		LCD_SWIntial(PORTC, PORTD);
    54ea:	82 e0       	ldi	r24, 0x02	; 2
    54ec:	63 e0       	ldi	r22, 0x03	; 3
    54ee:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <LCD_SWIntial>
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
    54f2:	82 e0       	ldi	r24, 0x02	; 2
    54f4:	63 e0       	ldi	r22, 0x03	; 3
    54f6:	40 e8       	ldi	r20, 0x80	; 128
    54f8:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		//LCD_SendData(PORTC, PORTD, Data);
		LCD_SendCommand(PORTC, PORTD, CLEAR);
    54fc:	82 e0       	ldi	r24, 0x02	; 2
    54fe:	63 e0       	ldi	r22, 0x03	; 3
    5500:	41 e0       	ldi	r20, 0x01	; 1
    5502:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    5506:	f1 cf       	rjmp	.-30     	; 0x54ea <KEYBAD_APP_2+0x10>

00005508 <KEYBAD_APP_3>:
}

/*Function to
 *
 */
void KEYBAD_APP_3(void) {
    5508:	df 93       	push	r29
    550a:	cf 93       	push	r28
    550c:	cd b7       	in	r28, 0x3d	; 61
    550e:	de b7       	in	r29, 0x3e	; 62
	LCD_HWIntial(PORTC, PORTD);
    5510:	82 e0       	ldi	r24, 0x02	; 2
    5512:	63 e0       	ldi	r22, 0x03	; 3
    5514:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <LCD_HWIntial>
	while (1) {
		LCD_SWIntial(PORTC, PORTD);
    5518:	82 e0       	ldi	r24, 0x02	; 2
    551a:	63 e0       	ldi	r22, 0x03	; 3
    551c:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <LCD_SWIntial>
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
    5520:	82 e0       	ldi	r24, 0x02	; 2
    5522:	63 e0       	ldi	r22, 0x03	; 3
    5524:	40 e8       	ldi	r20, 0x80	; 128
    5526:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		//LCD_SendData(PORTC, PORTD, Data);
		LCD_SendCommand(PORTC, PORTD, CLEAR);
    552a:	82 e0       	ldi	r24, 0x02	; 2
    552c:	63 e0       	ldi	r22, 0x03	; 3
    552e:	41 e0       	ldi	r20, 0x01	; 1
    5530:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    5534:	f1 cf       	rjmp	.-30     	; 0x5518 <KEYBAD_APP_3+0x10>

00005536 <EXT_APP_1>:
#include "../../HAL/LED/LED_Interface.h"
#include <avr/delay.h>
/*Function to
 *
 */
void EXT_APP_1(void) {
    5536:	df 93       	push	r29
    5538:	cf 93       	push	r28
    553a:	cd b7       	in	r28, 0x3d	; 61
    553c:	de b7       	in	r29, 0x3e	; 62
	Button_InitPullup(PORTB, PIN2);
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	62 e0       	ldi	r22, 0x02	; 2
    5542:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <Button_InitPullup>
	GIE_State(ENABLE);
    5546:	81 e0       	ldi	r24, 0x01	; 1
    5548:	0e 94 63 06 	call	0xcc6	; 0xcc6 <GIE_State>
	EXT_ISR0Intial(ENABLE, RASING_EDGE);
    554c:	81 e0       	ldi	r24, 0x01	; 1
    554e:	63 e0       	ldi	r22, 0x03	; 3
    5550:	0e 94 81 06 	call	0xd02	; 0xd02 <EXT_ISR0Intial>
	EXT_ISRFlag(INT0);
    5554:	80 e0       	ldi	r24, 0x00	; 0
    5556:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EXT_ISRFlag>
	while (1) {
		LED_ON(PORTB, PIN0);
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	60 e0       	ldi	r22, 0x00	; 0
    555e:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
    5562:	fb cf       	rjmp	.-10     	; 0x555a <EXT_APP_1+0x24>

00005564 <EXT_APP_2>:
}

/*Function To
 *
 */
void EXT_APP_2(void) {
    5564:	df 93       	push	r29
    5566:	cf 93       	push	r28
    5568:	cd b7       	in	r28, 0x3d	; 61
    556a:	de b7       	in	r29, 0x3e	; 62
    556c:	ff cf       	rjmp	.-2      	; 0x556c <EXT_APP_2+0x8>

0000556e <EXT_APP_3>:

/*Function To
 *
 */

void EXT_APP_3(void) {
    556e:	df 93       	push	r29
    5570:	cf 93       	push	r28
    5572:	cd b7       	in	r28, 0x3d	; 61
    5574:	de b7       	in	r29, 0x3e	; 62
    5576:	ff cf       	rjmp	.-2      	; 0x5576 <EXT_APP_3+0x8>

00005578 <__vector_1>:
	while (1) {

	}
}

void __vector_1(void) {
    5578:	1f 92       	push	r1
    557a:	0f 92       	push	r0
    557c:	0f b6       	in	r0, 0x3f	; 63
    557e:	0f 92       	push	r0
    5580:	11 24       	eor	r1, r1
    5582:	2f 93       	push	r18
    5584:	3f 93       	push	r19
    5586:	4f 93       	push	r20
    5588:	5f 93       	push	r21
    558a:	6f 93       	push	r22
    558c:	7f 93       	push	r23
    558e:	8f 93       	push	r24
    5590:	9f 93       	push	r25
    5592:	af 93       	push	r26
    5594:	bf 93       	push	r27
    5596:	ef 93       	push	r30
    5598:	ff 93       	push	r31
    559a:	df 93       	push	r29
    559c:	cf 93       	push	r28
    559e:	cd b7       	in	r28, 0x3d	; 61
    55a0:	de b7       	in	r29, 0x3e	; 62
    55a2:	2e 97       	sbiw	r28, 0x0e	; 14
    55a4:	de bf       	out	0x3e, r29	; 62
    55a6:	cd bf       	out	0x3d, r28	; 61
	if (Button_GetValue(PINB, PIN2) == LOW) {
    55a8:	85 e0       	ldi	r24, 0x05	; 5
    55aa:	62 e0       	ldi	r22, 0x02	; 2
    55ac:	0e 94 70 22 	call	0x44e0	; 0x44e0 <Button_GetValue>
    55b0:	88 23       	and	r24, r24
    55b2:	09 f0       	breq	.+2      	; 0x55b6 <__vector_1+0x3e>
    55b4:	76 c0       	rjmp	.+236    	; 0x56a2 <__vector_1+0x12a>
	LED_OFF(PORTB, PIN0);
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	60 e0       	ldi	r22, 0x00	; 0
    55ba:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
    55be:	80 e0       	ldi	r24, 0x00	; 0
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	aa e7       	ldi	r26, 0x7A	; 122
    55c4:	b4 e4       	ldi	r27, 0x44	; 68
    55c6:	8b 87       	std	Y+11, r24	; 0x0b
    55c8:	9c 87       	std	Y+12, r25	; 0x0c
    55ca:	ad 87       	std	Y+13, r26	; 0x0d
    55cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    55d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    55d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    55d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	4a ef       	ldi	r20, 0xFA	; 250
    55dc:	54 e4       	ldi	r21, 0x44	; 68
    55de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	8f 83       	std	Y+7, r24	; 0x07
    55e8:	98 87       	std	Y+8, r25	; 0x08
    55ea:	a9 87       	std	Y+9, r26	; 0x09
    55ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55ee:	6f 81       	ldd	r22, Y+7	; 0x07
    55f0:	78 85       	ldd	r23, Y+8	; 0x08
    55f2:	89 85       	ldd	r24, Y+9	; 0x09
    55f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	40 e8       	ldi	r20, 0x80	; 128
    55fc:	5f e3       	ldi	r21, 0x3F	; 63
    55fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5602:	88 23       	and	r24, r24
    5604:	2c f4       	brge	.+10     	; 0x5610 <__vector_1+0x98>
		__ticks = 1;
    5606:	81 e0       	ldi	r24, 0x01	; 1
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	9e 83       	std	Y+6, r25	; 0x06
    560c:	8d 83       	std	Y+5, r24	; 0x05
    560e:	3f c0       	rjmp	.+126    	; 0x568e <__vector_1+0x116>
	else if (__tmp > 65535)
    5610:	6f 81       	ldd	r22, Y+7	; 0x07
    5612:	78 85       	ldd	r23, Y+8	; 0x08
    5614:	89 85       	ldd	r24, Y+9	; 0x09
    5616:	9a 85       	ldd	r25, Y+10	; 0x0a
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	3f ef       	ldi	r19, 0xFF	; 255
    561c:	4f e7       	ldi	r20, 0x7F	; 127
    561e:	57 e4       	ldi	r21, 0x47	; 71
    5620:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5624:	18 16       	cp	r1, r24
    5626:	4c f5       	brge	.+82     	; 0x567a <__vector_1+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5628:	6b 85       	ldd	r22, Y+11	; 0x0b
    562a:	7c 85       	ldd	r23, Y+12	; 0x0c
    562c:	8d 85       	ldd	r24, Y+13	; 0x0d
    562e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5630:	20 e0       	ldi	r18, 0x00	; 0
    5632:	30 e0       	ldi	r19, 0x00	; 0
    5634:	40 e2       	ldi	r20, 0x20	; 32
    5636:	51 e4       	ldi	r21, 0x41	; 65
    5638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    563c:	dc 01       	movw	r26, r24
    563e:	cb 01       	movw	r24, r22
    5640:	bc 01       	movw	r22, r24
    5642:	cd 01       	movw	r24, r26
    5644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5648:	dc 01       	movw	r26, r24
    564a:	cb 01       	movw	r24, r22
    564c:	9e 83       	std	Y+6, r25	; 0x06
    564e:	8d 83       	std	Y+5, r24	; 0x05
    5650:	0f c0       	rjmp	.+30     	; 0x5670 <__vector_1+0xf8>
    5652:	88 ec       	ldi	r24, 0xC8	; 200
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	9c 83       	std	Y+4, r25	; 0x04
    5658:	8b 83       	std	Y+3, r24	; 0x03
    565a:	8b 81       	ldd	r24, Y+3	; 0x03
    565c:	9c 81       	ldd	r25, Y+4	; 0x04
    565e:	01 97       	sbiw	r24, 0x01	; 1
    5660:	f1 f7       	brne	.-4      	; 0x565e <__vector_1+0xe6>
    5662:	9c 83       	std	Y+4, r25	; 0x04
    5664:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5666:	8d 81       	ldd	r24, Y+5	; 0x05
    5668:	9e 81       	ldd	r25, Y+6	; 0x06
    566a:	01 97       	sbiw	r24, 0x01	; 1
    566c:	9e 83       	std	Y+6, r25	; 0x06
    566e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5670:	8d 81       	ldd	r24, Y+5	; 0x05
    5672:	9e 81       	ldd	r25, Y+6	; 0x06
    5674:	00 97       	sbiw	r24, 0x00	; 0
    5676:	69 f7       	brne	.-38     	; 0x5652 <__vector_1+0xda>
    5678:	14 c0       	rjmp	.+40     	; 0x56a2 <__vector_1+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    567a:	6f 81       	ldd	r22, Y+7	; 0x07
    567c:	78 85       	ldd	r23, Y+8	; 0x08
    567e:	89 85       	ldd	r24, Y+9	; 0x09
    5680:	9a 85       	ldd	r25, Y+10	; 0x0a
    5682:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5686:	dc 01       	movw	r26, r24
    5688:	cb 01       	movw	r24, r22
    568a:	9e 83       	std	Y+6, r25	; 0x06
    568c:	8d 83       	std	Y+5, r24	; 0x05
    568e:	8d 81       	ldd	r24, Y+5	; 0x05
    5690:	9e 81       	ldd	r25, Y+6	; 0x06
    5692:	9a 83       	std	Y+2, r25	; 0x02
    5694:	89 83       	std	Y+1, r24	; 0x01
    5696:	89 81       	ldd	r24, Y+1	; 0x01
    5698:	9a 81       	ldd	r25, Y+2	; 0x02
    569a:	01 97       	sbiw	r24, 0x01	; 1
    569c:	f1 f7       	brne	.-4      	; 0x569a <__vector_1+0x122>
    569e:	9a 83       	std	Y+2, r25	; 0x02
    56a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	}
}
    56a2:	2e 96       	adiw	r28, 0x0e	; 14
    56a4:	de bf       	out	0x3e, r29	; 62
    56a6:	cd bf       	out	0x3d, r28	; 61
    56a8:	cf 91       	pop	r28
    56aa:	df 91       	pop	r29
    56ac:	ff 91       	pop	r31
    56ae:	ef 91       	pop	r30
    56b0:	bf 91       	pop	r27
    56b2:	af 91       	pop	r26
    56b4:	9f 91       	pop	r25
    56b6:	8f 91       	pop	r24
    56b8:	7f 91       	pop	r23
    56ba:	6f 91       	pop	r22
    56bc:	5f 91       	pop	r21
    56be:	4f 91       	pop	r20
    56c0:	3f 91       	pop	r19
    56c2:	2f 91       	pop	r18
    56c4:	0f 90       	pop	r0
    56c6:	0f be       	out	0x3f, r0	; 63
    56c8:	0f 90       	pop	r0
    56ca:	1f 90       	pop	r1
    56cc:	18 95       	reti

000056ce <__vector_2>:


void __vector_2(void) {
    56ce:	1f 92       	push	r1
    56d0:	0f 92       	push	r0
    56d2:	0f b6       	in	r0, 0x3f	; 63
    56d4:	0f 92       	push	r0
    56d6:	11 24       	eor	r1, r1
    56d8:	df 93       	push	r29
    56da:	cf 93       	push	r28
    56dc:	cd b7       	in	r28, 0x3d	; 61
    56de:	de b7       	in	r29, 0x3e	; 62

}
    56e0:	cf 91       	pop	r28
    56e2:	df 91       	pop	r29
    56e4:	0f 90       	pop	r0
    56e6:	0f be       	out	0x3f, r0	; 63
    56e8:	0f 90       	pop	r0
    56ea:	1f 90       	pop	r1
    56ec:	18 95       	reti

000056ee <__vector_3>:

void __vector_3(void) {
    56ee:	1f 92       	push	r1
    56f0:	0f 92       	push	r0
    56f2:	0f b6       	in	r0, 0x3f	; 63
    56f4:	0f 92       	push	r0
    56f6:	11 24       	eor	r1, r1
    56f8:	df 93       	push	r29
    56fa:	cf 93       	push	r28
    56fc:	cd b7       	in	r28, 0x3d	; 61
    56fe:	de b7       	in	r29, 0x3e	; 62

}
    5700:	cf 91       	pop	r28
    5702:	df 91       	pop	r29
    5704:	0f 90       	pop	r0
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	0f 90       	pop	r0
    570a:	1f 90       	pop	r1
    570c:	18 95       	reti

0000570e <ADC_APP_1>:
#include "../../MCAL/ADC/ADC_Interface.h"
#include "../../HAL/LCD/LCD_Interface.h"
/*Function To
 *
 */
void ADC_APP_1(void) {
    570e:	df 93       	push	r29
    5710:	cf 93       	push	r28
    5712:	0f 92       	push	r0
    5714:	cd b7       	in	r28, 0x3d	; 61
    5716:	de b7       	in	r29, 0x3e	; 62
	LCD_HWIntial(PORTC, PORTD);
    5718:	82 e0       	ldi	r24, 0x02	; 2
    571a:	63 e0       	ldi	r22, 0x03	; 3
    571c:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <LCD_HWIntial>
	while (1) {
		ADC_VoltageRef(AREF); //select type voltage
    5720:	80 e0       	ldi	r24, 0x00	; 0
    5722:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <ADC_VoltageRef>
		ADC_Control(ENABLE); //Enable ADC
    5726:	81 e0       	ldi	r24, 0x01	; 1
    5728:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <ADC_Control>
		ADC_SinglePinInput(ADC0); //ADC0 Select
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	0e 94 14 0c 	call	0x1828	; 0x1828 <ADC_SinglePinInput>
		//ADC_DivisionFactor(FACTOR_2); //Divion factor
		u8 data = ADC_AdjustResult(RIGHT); //Right Adjustment
    5732:	81 e0       	ldi	r24, 0x01	; 1
    5734:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <ADC_AdjustResult>
    5738:	89 83       	std	Y+1, r24	; 0x01
		//lcd intial
		LCD_SWIntial(PORTC, PORTD);
    573a:	82 e0       	ldi	r24, 0x02	; 2
    573c:	63 e0       	ldi	r22, 0x03	; 3
    573e:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <LCD_SWIntial>
		LCD_SendCommand(PORTC, PORTD, ROW_ONE);
    5742:	82 e0       	ldi	r24, 0x02	; 2
    5744:	63 e0       	ldi	r22, 0x03	; 3
    5746:	40 e8       	ldi	r20, 0x80	; 128
    5748:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
		LCD_SendData(PORTC, PORTD, data);
    574c:	82 e0       	ldi	r24, 0x02	; 2
    574e:	63 e0       	ldi	r22, 0x03	; 3
    5750:	49 81       	ldd	r20, Y+1	; 0x01
    5752:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <LCD_SendData>
		LCD_SendCommand(PORTC, PORTD, CLEAR);
    5756:	82 e0       	ldi	r24, 0x02	; 2
    5758:	63 e0       	ldi	r22, 0x03	; 3
    575a:	41 e0       	ldi	r20, 0x01	; 1
    575c:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <LCD_SendCommand>
    5760:	df cf       	rjmp	.-66     	; 0x5720 <ADC_APP_1+0x12>

00005762 <ADC_APP_2>:
}

/*Function To
 *
 */
void ADC_APP_2(void) {
    5762:	df 93       	push	r29
    5764:	cf 93       	push	r28
    5766:	cd b7       	in	r28, 0x3d	; 61
    5768:	de b7       	in	r29, 0x3e	; 62
    576a:	ff cf       	rjmp	.-2      	; 0x576a <ADC_APP_2+0x8>

0000576c <ADC_APP_3>:
}

/*Function To
 *
 */
void ADC_APP_3(void) {
    576c:	df 93       	push	r29
    576e:	cf 93       	push	r28
    5770:	cd b7       	in	r28, 0x3d	; 61
    5772:	de b7       	in	r29, 0x3e	; 62
    5774:	ff cf       	rjmp	.-2      	; 0x5774 <ADC_APP_3+0x8>

00005776 <_7SEGMENT_APP_1>:
#include "../../HAL/Button/Button_Interface.h"
#include "../../HAL/LED/LED_Interface.h"
/*Function to Send any Number
 * Receive Number That you want to print
 */
void _7SEGMENT_APP_1(u8 Number) {
    5776:	df 93       	push	r29
    5778:	cf 93       	push	r28
    577a:	0f 92       	push	r0
    577c:	cd b7       	in	r28, 0x3d	; 61
    577e:	de b7       	in	r29, 0x3e	; 62
    5780:	89 83       	std	Y+1, r24	; 0x01
	_7Segment_Init(PORTC);
    5782:	82 e0       	ldi	r24, 0x02	; 2
    5784:	0e 94 96 22 	call	0x452c	; 0x452c <_7Segment_Init>
	_7Segment_Status(PORTC, COMMAN_CATHOD, ON);
    5788:	82 e0       	ldi	r24, 0x02	; 2
    578a:	62 e0       	ldi	r22, 0x02	; 2
    578c:	41 e0       	ldi	r20, 0x01	; 1
    578e:	0e 94 a4 22 	call	0x4548	; 0x4548 <_7Segment_Status>
	while (1) {
		_7Segment_SpecificNumber(PORTC, COMMAN_CATHOD, Number);
    5792:	82 e0       	ldi	r24, 0x02	; 2
    5794:	62 e0       	ldi	r22, 0x02	; 2
    5796:	49 81       	ldd	r20, Y+1	; 0x01
    5798:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_7Segment_SpecificNumber>
    579c:	fa cf       	rjmp	.-12     	; 0x5792 <_7SEGMENT_APP_1+0x1c>

0000579e <_7SEGMENT_APP_2>:
	}
}

/*Function to Print Number form zero  to 9
 */
void _7SEGMENT_APP_2(void) {
    579e:	df 93       	push	r29
    57a0:	cf 93       	push	r28
    57a2:	cd b7       	in	r28, 0x3d	; 61
    57a4:	de b7       	in	r29, 0x3e	; 62
	_7Segment_Init(PORTC);
    57a6:	82 e0       	ldi	r24, 0x02	; 2
    57a8:	0e 94 96 22 	call	0x452c	; 0x452c <_7Segment_Init>
	_7Segment_Status(PORTC, COMMAN_CATHOD, ON);
    57ac:	82 e0       	ldi	r24, 0x02	; 2
    57ae:	62 e0       	ldi	r22, 0x02	; 2
    57b0:	41 e0       	ldi	r20, 0x01	; 1
    57b2:	0e 94 a4 22 	call	0x4548	; 0x4548 <_7Segment_Status>
	while (1) {
		_7Segment0To9(PORTC, COMMAN_CATHOD);
    57b6:	82 e0       	ldi	r24, 0x02	; 2
    57b8:	62 e0       	ldi	r22, 0x02	; 2
    57ba:	0e 94 52 23 	call	0x46a4	; 0x46a4 <_7Segment0To9>
    57be:	fb cf       	rjmp	.-10     	; 0x57b6 <_7SEGMENT_APP_2+0x18>

000057c0 <_7SEGMENT_APP_3>:
}

/*Function to Increase By Button and Decrease By Anther Button
 *With LED Detect over Increase and Decrease
 */
void _7SEGMENT_APP_3(void) {
    57c0:	df 93       	push	r29
    57c2:	cf 93       	push	r28
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62
    57c8:	ad 97       	sbiw	r28, 0x2d	; 45
    57ca:	0f b6       	in	r0, 0x3f	; 63
    57cc:	f8 94       	cli
    57ce:	de bf       	out	0x3e, r29	; 62
    57d0:	0f be       	out	0x3f, r0	; 63
    57d2:	cd bf       	out	0x3d, r28	; 61
	u8 Inc = 0;
    57d4:	1d a6       	std	Y+45, r1	; 0x2d
	_7Segment_Init(PORTC);
    57d6:	82 e0       	ldi	r24, 0x02	; 2
    57d8:	0e 94 96 22 	call	0x452c	; 0x452c <_7Segment_Init>
	_7Segment_Status(PORTC, COMMAN_CATHOD, ON);
    57dc:	82 e0       	ldi	r24, 0x02	; 2
    57de:	62 e0       	ldi	r22, 0x02	; 2
    57e0:	41 e0       	ldi	r20, 0x01	; 1
    57e2:	0e 94 a4 22 	call	0x4548	; 0x4548 <_7Segment_Status>
	Button_InitPullup(PORTB, PIN0);
    57e6:	81 e0       	ldi	r24, 0x01	; 1
    57e8:	60 e0       	ldi	r22, 0x00	; 0
    57ea:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <Button_InitPullup>
	Button_InitPullup(PORTB, PIN1);
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	61 e0       	ldi	r22, 0x01	; 1
    57f2:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <Button_InitPullup>

	while (1) {

		u8 value = Button_GetValue(PINB, PIN0);
    57f6:	85 e0       	ldi	r24, 0x05	; 5
    57f8:	60 e0       	ldi	r22, 0x00	; 0
    57fa:	0e 94 70 22 	call	0x44e0	; 0x44e0 <Button_GetValue>
    57fe:	8c a7       	std	Y+44, r24	; 0x2c
    5800:	80 e0       	ldi	r24, 0x00	; 0
    5802:	90 e0       	ldi	r25, 0x00	; 0
    5804:	a8 ec       	ldi	r26, 0xC8	; 200
    5806:	b2 e4       	ldi	r27, 0x42	; 66
    5808:	8f a3       	std	Y+39, r24	; 0x27
    580a:	98 a7       	std	Y+40, r25	; 0x28
    580c:	a9 a7       	std	Y+41, r26	; 0x29
    580e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5810:	6f a1       	ldd	r22, Y+39	; 0x27
    5812:	78 a5       	ldd	r23, Y+40	; 0x28
    5814:	89 a5       	ldd	r24, Y+41	; 0x29
    5816:	9a a5       	ldd	r25, Y+42	; 0x2a
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	4a ef       	ldi	r20, 0xFA	; 250
    581e:	54 e4       	ldi	r21, 0x44	; 68
    5820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5824:	dc 01       	movw	r26, r24
    5826:	cb 01       	movw	r24, r22
    5828:	8b a3       	std	Y+35, r24	; 0x23
    582a:	9c a3       	std	Y+36, r25	; 0x24
    582c:	ad a3       	std	Y+37, r26	; 0x25
    582e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5830:	6b a1       	ldd	r22, Y+35	; 0x23
    5832:	7c a1       	ldd	r23, Y+36	; 0x24
    5834:	8d a1       	ldd	r24, Y+37	; 0x25
    5836:	9e a1       	ldd	r25, Y+38	; 0x26
    5838:	20 e0       	ldi	r18, 0x00	; 0
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	40 e8       	ldi	r20, 0x80	; 128
    583e:	5f e3       	ldi	r21, 0x3F	; 63
    5840:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5844:	88 23       	and	r24, r24
    5846:	2c f4       	brge	.+10     	; 0x5852 <_7SEGMENT_APP_3+0x92>
		__ticks = 1;
    5848:	81 e0       	ldi	r24, 0x01	; 1
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	9a a3       	std	Y+34, r25	; 0x22
    584e:	89 a3       	std	Y+33, r24	; 0x21
    5850:	3f c0       	rjmp	.+126    	; 0x58d0 <_7SEGMENT_APP_3+0x110>
	else if (__tmp > 65535)
    5852:	6b a1       	ldd	r22, Y+35	; 0x23
    5854:	7c a1       	ldd	r23, Y+36	; 0x24
    5856:	8d a1       	ldd	r24, Y+37	; 0x25
    5858:	9e a1       	ldd	r25, Y+38	; 0x26
    585a:	20 e0       	ldi	r18, 0x00	; 0
    585c:	3f ef       	ldi	r19, 0xFF	; 255
    585e:	4f e7       	ldi	r20, 0x7F	; 127
    5860:	57 e4       	ldi	r21, 0x47	; 71
    5862:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5866:	18 16       	cp	r1, r24
    5868:	4c f5       	brge	.+82     	; 0x58bc <_7SEGMENT_APP_3+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    586a:	6f a1       	ldd	r22, Y+39	; 0x27
    586c:	78 a5       	ldd	r23, Y+40	; 0x28
    586e:	89 a5       	ldd	r24, Y+41	; 0x29
    5870:	9a a5       	ldd	r25, Y+42	; 0x2a
    5872:	20 e0       	ldi	r18, 0x00	; 0
    5874:	30 e0       	ldi	r19, 0x00	; 0
    5876:	40 e2       	ldi	r20, 0x20	; 32
    5878:	51 e4       	ldi	r21, 0x41	; 65
    587a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    587e:	dc 01       	movw	r26, r24
    5880:	cb 01       	movw	r24, r22
    5882:	bc 01       	movw	r22, r24
    5884:	cd 01       	movw	r24, r26
    5886:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    588a:	dc 01       	movw	r26, r24
    588c:	cb 01       	movw	r24, r22
    588e:	9a a3       	std	Y+34, r25	; 0x22
    5890:	89 a3       	std	Y+33, r24	; 0x21
    5892:	0f c0       	rjmp	.+30     	; 0x58b2 <_7SEGMENT_APP_3+0xf2>
    5894:	88 ec       	ldi	r24, 0xC8	; 200
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	98 a3       	std	Y+32, r25	; 0x20
    589a:	8f 8f       	std	Y+31, r24	; 0x1f
    589c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    589e:	98 a1       	ldd	r25, Y+32	; 0x20
    58a0:	01 97       	sbiw	r24, 0x01	; 1
    58a2:	f1 f7       	brne	.-4      	; 0x58a0 <_7SEGMENT_APP_3+0xe0>
    58a4:	98 a3       	std	Y+32, r25	; 0x20
    58a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58a8:	89 a1       	ldd	r24, Y+33	; 0x21
    58aa:	9a a1       	ldd	r25, Y+34	; 0x22
    58ac:	01 97       	sbiw	r24, 0x01	; 1
    58ae:	9a a3       	std	Y+34, r25	; 0x22
    58b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58b2:	89 a1       	ldd	r24, Y+33	; 0x21
    58b4:	9a a1       	ldd	r25, Y+34	; 0x22
    58b6:	00 97       	sbiw	r24, 0x00	; 0
    58b8:	69 f7       	brne	.-38     	; 0x5894 <_7SEGMENT_APP_3+0xd4>
    58ba:	14 c0       	rjmp	.+40     	; 0x58e4 <_7SEGMENT_APP_3+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58bc:	6b a1       	ldd	r22, Y+35	; 0x23
    58be:	7c a1       	ldd	r23, Y+36	; 0x24
    58c0:	8d a1       	ldd	r24, Y+37	; 0x25
    58c2:	9e a1       	ldd	r25, Y+38	; 0x26
    58c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    58c8:	dc 01       	movw	r26, r24
    58ca:	cb 01       	movw	r24, r22
    58cc:	9a a3       	std	Y+34, r25	; 0x22
    58ce:	89 a3       	std	Y+33, r24	; 0x21
    58d0:	89 a1       	ldd	r24, Y+33	; 0x21
    58d2:	9a a1       	ldd	r25, Y+34	; 0x22
    58d4:	9e 8f       	std	Y+30, r25	; 0x1e
    58d6:	8d 8f       	std	Y+29, r24	; 0x1d
    58d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    58da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    58dc:	01 97       	sbiw	r24, 0x01	; 1
    58de:	f1 f7       	brne	.-4      	; 0x58dc <_7SEGMENT_APP_3+0x11c>
    58e0:	9e 8f       	std	Y+30, r25	; 0x1e
    58e2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		if (value == LOW) {
    58e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    58e6:	88 23       	and	r24, r24
    58e8:	69 f4       	brne	.+26     	; 0x5904 <_7SEGMENT_APP_3+0x144>
			Inc++;
    58ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    58ec:	8f 5f       	subi	r24, 0xFF	; 255
    58ee:	8d a7       	std	Y+45, r24	; 0x2d

			_7Segment_SpecificNumber(PORTC, COMMAN_CATHOD, Inc);
    58f0:	82 e0       	ldi	r24, 0x02	; 2
    58f2:	62 e0       	ldi	r22, 0x02	; 2
    58f4:	4d a5       	ldd	r20, Y+45	; 0x2d
    58f6:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_7Segment_SpecificNumber>
			LED_ON(PORTB, PIN2);
    58fa:	81 e0       	ldi	r24, 0x01	; 1
    58fc:	62 e0       	ldi	r22, 0x02	; 2
    58fe:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
    5902:	04 c0       	rjmp	.+8      	; 0x590c <_7SEGMENT_APP_3+0x14c>
			//_delay_ms(500);
		}
		else {
			LED_OFF(PORTB, PIN2);
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	62 e0       	ldi	r22, 0x02	; 2
    5908:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
		}
		u8 value_2 = Button_GetValue(PINB, PIN1);
    590c:	85 e0       	ldi	r24, 0x05	; 5
    590e:	61 e0       	ldi	r22, 0x01	; 1
    5910:	0e 94 70 22 	call	0x44e0	; 0x44e0 <Button_GetValue>
    5914:	8b a7       	std	Y+43, r24	; 0x2b
    5916:	80 e0       	ldi	r24, 0x00	; 0
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	a8 ec       	ldi	r26, 0xC8	; 200
    591c:	b2 e4       	ldi	r27, 0x42	; 66
    591e:	89 8f       	std	Y+25, r24	; 0x19
    5920:	9a 8f       	std	Y+26, r25	; 0x1a
    5922:	ab 8f       	std	Y+27, r26	; 0x1b
    5924:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5926:	69 8d       	ldd	r22, Y+25	; 0x19
    5928:	7a 8d       	ldd	r23, Y+26	; 0x1a
    592a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    592c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    592e:	20 e0       	ldi	r18, 0x00	; 0
    5930:	30 e0       	ldi	r19, 0x00	; 0
    5932:	4a ef       	ldi	r20, 0xFA	; 250
    5934:	54 e4       	ldi	r21, 0x44	; 68
    5936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    593a:	dc 01       	movw	r26, r24
    593c:	cb 01       	movw	r24, r22
    593e:	8d 8b       	std	Y+21, r24	; 0x15
    5940:	9e 8b       	std	Y+22, r25	; 0x16
    5942:	af 8b       	std	Y+23, r26	; 0x17
    5944:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5946:	6d 89       	ldd	r22, Y+21	; 0x15
    5948:	7e 89       	ldd	r23, Y+22	; 0x16
    594a:	8f 89       	ldd	r24, Y+23	; 0x17
    594c:	98 8d       	ldd	r25, Y+24	; 0x18
    594e:	20 e0       	ldi	r18, 0x00	; 0
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	40 e8       	ldi	r20, 0x80	; 128
    5954:	5f e3       	ldi	r21, 0x3F	; 63
    5956:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    595a:	88 23       	and	r24, r24
    595c:	2c f4       	brge	.+10     	; 0x5968 <_7SEGMENT_APP_3+0x1a8>
		__ticks = 1;
    595e:	81 e0       	ldi	r24, 0x01	; 1
    5960:	90 e0       	ldi	r25, 0x00	; 0
    5962:	9c 8b       	std	Y+20, r25	; 0x14
    5964:	8b 8b       	std	Y+19, r24	; 0x13
    5966:	3f c0       	rjmp	.+126    	; 0x59e6 <_7SEGMENT_APP_3+0x226>
	else if (__tmp > 65535)
    5968:	6d 89       	ldd	r22, Y+21	; 0x15
    596a:	7e 89       	ldd	r23, Y+22	; 0x16
    596c:	8f 89       	ldd	r24, Y+23	; 0x17
    596e:	98 8d       	ldd	r25, Y+24	; 0x18
    5970:	20 e0       	ldi	r18, 0x00	; 0
    5972:	3f ef       	ldi	r19, 0xFF	; 255
    5974:	4f e7       	ldi	r20, 0x7F	; 127
    5976:	57 e4       	ldi	r21, 0x47	; 71
    5978:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    597c:	18 16       	cp	r1, r24
    597e:	4c f5       	brge	.+82     	; 0x59d2 <_7SEGMENT_APP_3+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5980:	69 8d       	ldd	r22, Y+25	; 0x19
    5982:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5984:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5986:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5988:	20 e0       	ldi	r18, 0x00	; 0
    598a:	30 e0       	ldi	r19, 0x00	; 0
    598c:	40 e2       	ldi	r20, 0x20	; 32
    598e:	51 e4       	ldi	r21, 0x41	; 65
    5990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5994:	dc 01       	movw	r26, r24
    5996:	cb 01       	movw	r24, r22
    5998:	bc 01       	movw	r22, r24
    599a:	cd 01       	movw	r24, r26
    599c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    59a0:	dc 01       	movw	r26, r24
    59a2:	cb 01       	movw	r24, r22
    59a4:	9c 8b       	std	Y+20, r25	; 0x14
    59a6:	8b 8b       	std	Y+19, r24	; 0x13
    59a8:	0f c0       	rjmp	.+30     	; 0x59c8 <_7SEGMENT_APP_3+0x208>
    59aa:	88 ec       	ldi	r24, 0xC8	; 200
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	9a 8b       	std	Y+18, r25	; 0x12
    59b0:	89 8b       	std	Y+17, r24	; 0x11
    59b2:	89 89       	ldd	r24, Y+17	; 0x11
    59b4:	9a 89       	ldd	r25, Y+18	; 0x12
    59b6:	01 97       	sbiw	r24, 0x01	; 1
    59b8:	f1 f7       	brne	.-4      	; 0x59b6 <_7SEGMENT_APP_3+0x1f6>
    59ba:	9a 8b       	std	Y+18, r25	; 0x12
    59bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59be:	8b 89       	ldd	r24, Y+19	; 0x13
    59c0:	9c 89       	ldd	r25, Y+20	; 0x14
    59c2:	01 97       	sbiw	r24, 0x01	; 1
    59c4:	9c 8b       	std	Y+20, r25	; 0x14
    59c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59c8:	8b 89       	ldd	r24, Y+19	; 0x13
    59ca:	9c 89       	ldd	r25, Y+20	; 0x14
    59cc:	00 97       	sbiw	r24, 0x00	; 0
    59ce:	69 f7       	brne	.-38     	; 0x59aa <_7SEGMENT_APP_3+0x1ea>
    59d0:	14 c0       	rjmp	.+40     	; 0x59fa <_7SEGMENT_APP_3+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59d2:	6d 89       	ldd	r22, Y+21	; 0x15
    59d4:	7e 89       	ldd	r23, Y+22	; 0x16
    59d6:	8f 89       	ldd	r24, Y+23	; 0x17
    59d8:	98 8d       	ldd	r25, Y+24	; 0x18
    59da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    59de:	dc 01       	movw	r26, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	9c 8b       	std	Y+20, r25	; 0x14
    59e4:	8b 8b       	std	Y+19, r24	; 0x13
    59e6:	8b 89       	ldd	r24, Y+19	; 0x13
    59e8:	9c 89       	ldd	r25, Y+20	; 0x14
    59ea:	98 8b       	std	Y+16, r25	; 0x10
    59ec:	8f 87       	std	Y+15, r24	; 0x0f
    59ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    59f0:	98 89       	ldd	r25, Y+16	; 0x10
    59f2:	01 97       	sbiw	r24, 0x01	; 1
    59f4:	f1 f7       	brne	.-4      	; 0x59f2 <_7SEGMENT_APP_3+0x232>
    59f6:	98 8b       	std	Y+16, r25	; 0x10
    59f8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		if (value_2 == LOW) {
    59fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    59fc:	88 23       	and	r24, r24
    59fe:	69 f4       	brne	.+26     	; 0x5a1a <_7SEGMENT_APP_3+0x25a>
			Inc--;
    5a00:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a02:	81 50       	subi	r24, 0x01	; 1
    5a04:	8d a7       	std	Y+45, r24	; 0x2d
			_7Segment_SpecificNumber(PORTC, COMMAN_CATHOD, Inc);
    5a06:	82 e0       	ldi	r24, 0x02	; 2
    5a08:	62 e0       	ldi	r22, 0x02	; 2
    5a0a:	4d a5       	ldd	r20, Y+45	; 0x2d
    5a0c:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_7Segment_SpecificNumber>
			LED_ON(PORTB, PIN3);
    5a10:	81 e0       	ldi	r24, 0x01	; 1
    5a12:	63 e0       	ldi	r22, 0x03	; 3
    5a14:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
    5a18:	04 c0       	rjmp	.+8      	; 0x5a22 <_7SEGMENT_APP_3+0x262>
			//_delay_ms(1000);
		}
		else {
			LED_OFF(PORTB, PIN3);
    5a1a:	81 e0       	ldi	r24, 0x01	; 1
    5a1c:	63 e0       	ldi	r22, 0x03	; 3
    5a1e:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
		}

		if (Inc > 9 || Inc < 0) {
    5a22:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a24:	8a 30       	cpi	r24, 0x0A	; 10
    5a26:	08 f4       	brcc	.+2      	; 0x5a2a <_7SEGMENT_APP_3+0x26a>
    5a28:	7d c0       	rjmp	.+250    	; 0x5b24 <_7SEGMENT_APP_3+0x364>
			Inc = 0;
    5a2a:	1d a6       	std	Y+45, r1	; 0x2d
			_7Segment_SpecificNumber(PORTC, COMMAN_CATHOD, Inc);
    5a2c:	82 e0       	ldi	r24, 0x02	; 2
    5a2e:	62 e0       	ldi	r22, 0x02	; 2
    5a30:	4d a5       	ldd	r20, Y+45	; 0x2d
    5a32:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_7Segment_SpecificNumber>
			LED_ON(PORTB, PIN4);
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	64 e0       	ldi	r22, 0x04	; 4
    5a3a:	0e 94 00 10 	call	0x2000	; 0x2000 <LED_ON>
    5a3e:	80 e0       	ldi	r24, 0x00	; 0
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	aa e7       	ldi	r26, 0x7A	; 122
    5a44:	b4 e4       	ldi	r27, 0x44	; 68
    5a46:	8b 87       	std	Y+11, r24	; 0x0b
    5a48:	9c 87       	std	Y+12, r25	; 0x0c
    5a4a:	ad 87       	std	Y+13, r26	; 0x0d
    5a4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a56:	20 e0       	ldi	r18, 0x00	; 0
    5a58:	30 e0       	ldi	r19, 0x00	; 0
    5a5a:	4a ef       	ldi	r20, 0xFA	; 250
    5a5c:	54 e4       	ldi	r21, 0x44	; 68
    5a5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5a62:	dc 01       	movw	r26, r24
    5a64:	cb 01       	movw	r24, r22
    5a66:	8f 83       	std	Y+7, r24	; 0x07
    5a68:	98 87       	std	Y+8, r25	; 0x08
    5a6a:	a9 87       	std	Y+9, r26	; 0x09
    5a6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    5a70:	78 85       	ldd	r23, Y+8	; 0x08
    5a72:	89 85       	ldd	r24, Y+9	; 0x09
    5a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	40 e8       	ldi	r20, 0x80	; 128
    5a7c:	5f e3       	ldi	r21, 0x3F	; 63
    5a7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5a82:	88 23       	and	r24, r24
    5a84:	2c f4       	brge	.+10     	; 0x5a90 <_7SEGMENT_APP_3+0x2d0>
		__ticks = 1;
    5a86:	81 e0       	ldi	r24, 0x01	; 1
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	9e 83       	std	Y+6, r25	; 0x06
    5a8c:	8d 83       	std	Y+5, r24	; 0x05
    5a8e:	3f c0       	rjmp	.+126    	; 0x5b0e <_7SEGMENT_APP_3+0x34e>
	else if (__tmp > 65535)
    5a90:	6f 81       	ldd	r22, Y+7	; 0x07
    5a92:	78 85       	ldd	r23, Y+8	; 0x08
    5a94:	89 85       	ldd	r24, Y+9	; 0x09
    5a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a98:	20 e0       	ldi	r18, 0x00	; 0
    5a9a:	3f ef       	ldi	r19, 0xFF	; 255
    5a9c:	4f e7       	ldi	r20, 0x7F	; 127
    5a9e:	57 e4       	ldi	r21, 0x47	; 71
    5aa0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5aa4:	18 16       	cp	r1, r24
    5aa6:	4c f5       	brge	.+82     	; 0x5afa <_7SEGMENT_APP_3+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    5aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    5aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ab0:	20 e0       	ldi	r18, 0x00	; 0
    5ab2:	30 e0       	ldi	r19, 0x00	; 0
    5ab4:	40 e2       	ldi	r20, 0x20	; 32
    5ab6:	51 e4       	ldi	r21, 0x41	; 65
    5ab8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5abc:	dc 01       	movw	r26, r24
    5abe:	cb 01       	movw	r24, r22
    5ac0:	bc 01       	movw	r22, r24
    5ac2:	cd 01       	movw	r24, r26
    5ac4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5ac8:	dc 01       	movw	r26, r24
    5aca:	cb 01       	movw	r24, r22
    5acc:	9e 83       	std	Y+6, r25	; 0x06
    5ace:	8d 83       	std	Y+5, r24	; 0x05
    5ad0:	0f c0       	rjmp	.+30     	; 0x5af0 <_7SEGMENT_APP_3+0x330>
    5ad2:	88 ec       	ldi	r24, 0xC8	; 200
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	9c 83       	std	Y+4, r25	; 0x04
    5ad8:	8b 83       	std	Y+3, r24	; 0x03
    5ada:	8b 81       	ldd	r24, Y+3	; 0x03
    5adc:	9c 81       	ldd	r25, Y+4	; 0x04
    5ade:	01 97       	sbiw	r24, 0x01	; 1
    5ae0:	f1 f7       	brne	.-4      	; 0x5ade <_7SEGMENT_APP_3+0x31e>
    5ae2:	9c 83       	std	Y+4, r25	; 0x04
    5ae4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    5aea:	01 97       	sbiw	r24, 0x01	; 1
    5aec:	9e 83       	std	Y+6, r25	; 0x06
    5aee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5af0:	8d 81       	ldd	r24, Y+5	; 0x05
    5af2:	9e 81       	ldd	r25, Y+6	; 0x06
    5af4:	00 97       	sbiw	r24, 0x00	; 0
    5af6:	69 f7       	brne	.-38     	; 0x5ad2 <_7SEGMENT_APP_3+0x312>
    5af8:	7e ce       	rjmp	.-772    	; 0x57f6 <_7SEGMENT_APP_3+0x36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5afa:	6f 81       	ldd	r22, Y+7	; 0x07
    5afc:	78 85       	ldd	r23, Y+8	; 0x08
    5afe:	89 85       	ldd	r24, Y+9	; 0x09
    5b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5b06:	dc 01       	movw	r26, r24
    5b08:	cb 01       	movw	r24, r22
    5b0a:	9e 83       	std	Y+6, r25	; 0x06
    5b0c:	8d 83       	std	Y+5, r24	; 0x05
    5b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b10:	9e 81       	ldd	r25, Y+6	; 0x06
    5b12:	9a 83       	std	Y+2, r25	; 0x02
    5b14:	89 83       	std	Y+1, r24	; 0x01
    5b16:	89 81       	ldd	r24, Y+1	; 0x01
    5b18:	9a 81       	ldd	r25, Y+2	; 0x02
    5b1a:	01 97       	sbiw	r24, 0x01	; 1
    5b1c:	f1 f7       	brne	.-4      	; 0x5b1a <_7SEGMENT_APP_3+0x35a>
    5b1e:	9a 83       	std	Y+2, r25	; 0x02
    5b20:	89 83       	std	Y+1, r24	; 0x01
    5b22:	69 ce       	rjmp	.-814    	; 0x57f6 <_7SEGMENT_APP_3+0x36>
			_delay_ms(1000);
		}
		else {
			LED_OFF(PORTB, PIN4);
    5b24:	81 e0       	ldi	r24, 0x01	; 1
    5b26:	64 e0       	ldi	r22, 0x04	; 4
    5b28:	0e 94 16 10 	call	0x202c	; 0x202c <LED_OFF>
    5b2c:	64 ce       	rjmp	.-824    	; 0x57f6 <_7SEGMENT_APP_3+0x36>

00005b2e <_7SEGMENT_APP_4>:
		}
	}
}
void _7SEGMENT_APP_4(void) {
    5b2e:	df 93       	push	r29
    5b30:	cf 93       	push	r28
    5b32:	cd b7       	in	r28, 0x3d	; 61
    5b34:	de b7       	in	r29, 0x3e	; 62
    5b36:	ff cf       	rjmp	.-2      	; 0x5b36 <_7SEGMENT_APP_4+0x8>

00005b38 <main>:
 *
 *  Created on: Jul 25, 2024
 *      Author: Eslam
 */
#include "../APP/LM35_APP/LM35_APP.h"
int main() {
    5b38:	df 93       	push	r29
    5b3a:	cf 93       	push	r28
    5b3c:	cd b7       	in	r28, 0x3d	; 61
    5b3e:	de b7       	in	r29, 0x3e	; 62
	LM35_APP_1();
    5b40:	0e 94 53 24 	call	0x48a6	; 0x48a6 <LM35_APP_1>
    5b44:	80 e0       	ldi	r24, 0x00	; 0
    5b46:	90 e0       	ldi	r25, 0x00	; 0
}
    5b48:	cf 91       	pop	r28
    5b4a:	df 91       	pop	r29
    5b4c:	08 95       	ret

00005b4e <__prologue_saves__>:
    5b4e:	2f 92       	push	r2
    5b50:	3f 92       	push	r3
    5b52:	4f 92       	push	r4
    5b54:	5f 92       	push	r5
    5b56:	6f 92       	push	r6
    5b58:	7f 92       	push	r7
    5b5a:	8f 92       	push	r8
    5b5c:	9f 92       	push	r9
    5b5e:	af 92       	push	r10
    5b60:	bf 92       	push	r11
    5b62:	cf 92       	push	r12
    5b64:	df 92       	push	r13
    5b66:	ef 92       	push	r14
    5b68:	ff 92       	push	r15
    5b6a:	0f 93       	push	r16
    5b6c:	1f 93       	push	r17
    5b6e:	cf 93       	push	r28
    5b70:	df 93       	push	r29
    5b72:	cd b7       	in	r28, 0x3d	; 61
    5b74:	de b7       	in	r29, 0x3e	; 62
    5b76:	ca 1b       	sub	r28, r26
    5b78:	db 0b       	sbc	r29, r27
    5b7a:	0f b6       	in	r0, 0x3f	; 63
    5b7c:	f8 94       	cli
    5b7e:	de bf       	out	0x3e, r29	; 62
    5b80:	0f be       	out	0x3f, r0	; 63
    5b82:	cd bf       	out	0x3d, r28	; 61
    5b84:	09 94       	ijmp

00005b86 <__epilogue_restores__>:
    5b86:	2a 88       	ldd	r2, Y+18	; 0x12
    5b88:	39 88       	ldd	r3, Y+17	; 0x11
    5b8a:	48 88       	ldd	r4, Y+16	; 0x10
    5b8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b90:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b92:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b94:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b96:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b98:	b9 84       	ldd	r11, Y+9	; 0x09
    5b9a:	c8 84       	ldd	r12, Y+8	; 0x08
    5b9c:	df 80       	ldd	r13, Y+7	; 0x07
    5b9e:	ee 80       	ldd	r14, Y+6	; 0x06
    5ba0:	fd 80       	ldd	r15, Y+5	; 0x05
    5ba2:	0c 81       	ldd	r16, Y+4	; 0x04
    5ba4:	1b 81       	ldd	r17, Y+3	; 0x03
    5ba6:	aa 81       	ldd	r26, Y+2	; 0x02
    5ba8:	b9 81       	ldd	r27, Y+1	; 0x01
    5baa:	ce 0f       	add	r28, r30
    5bac:	d1 1d       	adc	r29, r1
    5bae:	0f b6       	in	r0, 0x3f	; 63
    5bb0:	f8 94       	cli
    5bb2:	de bf       	out	0x3e, r29	; 62
    5bb4:	0f be       	out	0x3f, r0	; 63
    5bb6:	cd bf       	out	0x3d, r28	; 61
    5bb8:	ed 01       	movw	r28, r26
    5bba:	08 95       	ret

00005bbc <_exit>:
    5bbc:	f8 94       	cli

00005bbe <__stop_program>:
    5bbe:	ff cf       	rjmp	.-2      	; 0x5bbe <__stop_program>
